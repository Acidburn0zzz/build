URL: http://buildbot.net/trac
GIT: git://github.com/nsylvain/buildbot.git in branch "chromium"
Sources: http://github.com/nsylvain/buildbot/tree/chromium
Version: 0.7.12
License: GNU General Public License (GPL) Version 2

This is a forked copy of buildbot v0.7.12 with the modifications living
in github. To list the local modifications, use:
  git log nsylvain/chromium ^v0.7.12
  

The following change has been made to fix issues that are now fixed in
a newer version of the upstream repository.

--- buildbot/status/web/console.py      (revision 54225)
+++ buildbot/status/web/console.py      (working copy)
@@ -431,11 +431,8 @@
                 builds.append(devBuild)

                 # Now break if we have enough builds.
-                current_revision = self.getChangeForBuild(
-                    builder.getBuild(-1), revision)
-                if self.comparator.isRevisionEarlier(
-                    devBuild, current_revision):
-                    break
+                if int(got_rev) < int(revision):
+                    break;


Then made the following embelishment to allow the old behavior for
time based comparators.

--- third_party/buildbot_7_12/buildbot/status/web/console.py    (revision 68693)
+++ third_party/buildbot_7_12/buildbot/status/web/console.py    (working copy)
@@ -450,8 +450,15 @@
                 builds.append(devBuild)

                 # Now break if we have enough builds.
-                if int(got_rev) < int(revision):
-                    break;
+                if self.comparator.getSortingKey() == "when":
+                    current_revision = self.getChangeForBuild(
+                        builder.getBuild(-1), revision)
+                    if self.comparator.isRevisionEarlier(
+                        devBuild, current_revision):
+                        break
+                else:
+                    if int(got_rev) < int(revision):
+                        break;


             build = build.getPreviousBuild()


The following patch was ported back from upstream adding log names and URLs to
the JSON output.

--- third_party/buildbot_7_12/buildbot/status/builder.py	(revision 70505)
+++ third_party/buildbot_7_12/buildbot/status/builder.py	(working copy)
@@ -1132,9 +1132,9 @@
         result['eta'] = self.getETA()
         result['urls'] = self.getURLs()
         result['step_number'] = self.step_number
-        # TODO(maruel): Move that to a sub-url or just publish the log_url
-        # instead.
-        #result['logs'] = self.getLogs()
+        result['logs'] = [[l.getName(),
+            self.build.builder.status.getURLForThing(l)]
+                for l in self.getLogs()]
         return result
 
 
@@ -1565,8 +1565,8 @@
         result['slave'] = self.getSlavename()
         # TODO(maruel): Add.
         #result['test_results'] = self.getTestResults()
-        # TODO(maruel): Include the url? It's too heavy otherwise.
-        #result['logs'] = self.getLogs()
+        result['logs'] = [[l.getName(),
+            self.builder.status.getURLForThing(l)] for l in self.getLogs()]
         result['eta'] = self.getETA()
         result['steps'] = [bss.asDict() for bss in self.steps]
         if self.getCurrentStep():


The following patch disables rss and atom output.

--- a/third_party/buildbot_7_12/buildbot/status/web/baseweb.py
+++ b/third_party/buildbot_7_12/buildbot/status/web/baseweb.py
@@ -594,8 +594,9 @@ class WebStatus(service.MultiService):
             root.putChild(name, child_resource)

         status = self.getStatus()
-        root.putChild("rss", Rss20StatusResource(status))
-        root.putChild("atom", Atom10StatusResource(status))
+        # Disabled from Chromium.
+        # root.putChild("rss", Rss20StatusResource(status))
+        # root.putChild("atom", Atom10StatusResource(status))
         root.putChild("json", JsonStatusResource(status))

         self.site.resource = root


Fixes c.number is None
--- a/master/buildbot/status/web/status_json.py
+++ b/master/buildbot/status/web/status_json.py
@@ -547,15 +547,13 @@ class ChangesJsonResource(JsonResource):
     def __init__(self, status, changes):
         JsonResource.__init__(self, status)
         for c in changes:
-            # TODO(maruel): Problem with multiple changes with the same number.
-            # Probably try server hack specific so we could fix it on this side
-            # instead. But there is still the problem with multiple pollers from
-            # different repo where the numbers could clash.
-            number = str(c.number)
-            while number in self.children:
-                # TODO(maruel): Do something better?
-                number = str(int(c.number)+1)
-            self.putChild(number, ChangeJsonResource(status, c))
+            # c.number can be None or clash another change if the change was
+            # generated inside buildbot or if using multiple pollers.
+            if c.number is not None and str(c.number) not in self.children:
+                self.putChild(str(c.number), ChangeJsonResource(status, c))
+            else:
+                # Temporary hack since it creates information exposure.
+                self.putChild(str(id(c)), ChangeJsonResource(status, c))

     def asDict(self, request):
         """Don't throw an exception when there is no child."""


Add extra parameters to HttpStatusPush as a very basic authentication mechanism.
--- a/third_party/buildbot_7_12/buildbot/status/status_push.py
+++ b/third_party/buildbot_7_12/buildbot/status/status_push.py
@@ -321,7 +321,7 @@ class HttpStatusPush(StatusPush):

     def __init__(self, serverUrl, debug=None, maxMemoryItems=None,
                  maxDiskItems=None, chunkSize=200, maxHttpRequestSize=2**20,
-                 **kwargs):
+                 extra_post_params=None, **kwargs):
         """
         @serverUrl: Base URL to be used to push events notifications.
         @maxMemoryItems: Maximum number of items to keep queued in memory.
@@ -334,6 +334,7 @@ class HttpStatusPush(StatusPush):
         """
         # Parameters.
         self.serverUrl = serverUrl
+        self.extra_post_params = extra_post_params or {}
         self.debug = debug
         self.chunkSize = chunkSize
         self.lastPushWasSuccessful = True
@@ -371,7 +372,9 @@ class HttpStatusPush(StatusPush):
                 packets = json.dumps(items, indent=2, sort_keys=True)
             else:
                 packets = json.dumps(items, separators=(',',':'))
-            data = urllib.urlencode({'packets': packets})
+            params = {'packets': packets}
+            params.update(self.extra_post)
+            data = urllib.urlencode(params)
             if (not self.maxHttpRequestSize or
                 len(data) < self.maxHttpRequestSize):
                 return (data, items)
@@ -389,6 +392,8 @@ class HttpStatusPush(StatusPush):
     def pushHttp(self):
         """Do the HTTP POST to the server."""
         (encoded_packets, items) = self.popChunk()
+        if not self.serverUrl:
+            return

         def Success(result):
             """Queue up next push."""


Add pendingBuilds
--- a/third_party/buildbot_7_12/buildbot/status/builder.py
+++ b/third_party/buildbot_7_12/buildbot/status/builder.py
@@ -2171,10 +2171,7 @@ class BuilderStatus(styles.Versioned):
         result['cachedBuilds'] = cached_builds
         result['currentBuilds'] = current_builds
         result['state'] = self.getState()[0]
-        # BuildRequestStatus doesn't have a number so display the SourceStamp.
-        result['pendingBuilds'] = [
-            b.getSourceStamp().asDict() for b in self.getPendingBuilds()
-        ]
+        result['pendingBuilds'] = len(self.getPendingBuilds())
         return result


diff --git a/third_party/buildbot_7_12/buildbot/status/web/status_json.py b/third_party/buildbot_7_12/buildbot/status/web/status_json.
index e3aaafe..6c272a6 100644
--- a/third_party/buildbot_7_12/buildbot/status/web/status_json.py
+++ b/third_party/buildbot_7_12/buildbot/status/web/status_json.py
@@ -344,6 +344,20 @@ class HelpResource(HtmlResource):
         return self.text


+class BuilderPendingBuildsJsonResource(JsonResource):
+    help = """Describe pending builds for a builder.
+"""
+    title = 'Builder'
+
+    def __init__(self, status, builder_status):
+        JsonResource.__init__(self, status)
+        self.builder_status = builder_status
+
+    def asDict(self, request):
+        # buildbot.status.builder.BuilderStatus
+        return [b.asDict() for b in self.builder_status.getPendingBuilds()]
+
+
 class BuilderJsonResource(JsonResource):
     help = """Describe a single builder.
 """
@@ -355,6 +369,9 @@ class BuilderJsonResource(JsonResource):
         self.putChild('builds', BuildsJsonResource(status, builder_status))
         self.putChild('slaves', BuilderSlavesJsonResources(status,
                                                            builder_status))
+        self.putChild(
+                'pendingBuilds',
+                BuilderPendingBuildsJsonResource(status, builder_status))

     def asDict(self, request):
         # buildbot.status.builder.BuilderStatus

Increase console customization build range:

--- status/web/console.py       (revision 75203)
+++ status/web/console.py       (working copy)
@@ -971,10 +971,10 @@
         # Keep only the revisions we care about.
         # By default we process the last 40 revisions.
         # If a dev name is passed, we look for the changes by this person in the
-        # last 80 revisions.
+        # last 160 revisions.
         numRevs = 40
         if devName:
-          numRevs *= 2
+          numRevs *= 4
         numBuilds = numRevs