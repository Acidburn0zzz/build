# Copyright (c) 2010 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

from buildbot.changes import svnpoller
from buildbot.scheduler import Dependent
from buildbot.scheduler import Scheduler

from master import build_utils
from master import master_config
from master import master_utils
from master import slaves_list
from master.factory import chromium_factory

import config

ActiveMaster = config.Master.ChromiumMemory

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

# Disable compression for the stdio files.
c['logCompressionLimit'] = False


####### CHANGESOURCES

# the 'change_source' list tells the buildmaster how it should find out about
# source code changes. Any class which implements IChangeSource can be added
# to this list: there are several in buildbot/changes/*.py to choose from.
def ChromeTreeFileSplitter(path):
  """split_file for the 'src' project in the trunk."""

  # Exclude o3d from triggering builds on chrome for now.
  if path.startswith('src/o3d/'):
    return None

  # List of projects we are interested in. The project names must exactly
  # match paths in the Subversion repository, relative to the 'path' URL
  # argument. build_utils.SplitPath() will use them as branch names to
  # kick off the Schedulers for different projects.
  projects = ['src']
  return build_utils.SplitPath(projects, path)

# Polls config.Master.trunk_url for changes
chromium_rev="http://src.chromium.org/viewvc/chrome?view=rev&revision=%s"
trunk_poller = svnpoller.SVNPoller(svnurl=config.Master.trunk_url,
                                   split_file=ChromeTreeFileSplitter,
                                   pollinterval=10,
                                   revlinktmpl=chromium_rev)

c['change_source'] = [trunk_poller]


####### SCHEDULERS

## configure the Schedulers

# Main scheduler for all changes in trunk.
s_chromium = Scheduler(name='chromium',
                       branch='src',
                       treeStableTimer=60,
                       builderNames=['Webkit Linux (valgrind)',
                                     'Webkit Linux (valgrind layout)',
                                     'Linux Heapcheck',
                                     'Webkit Mac (valgrind)',
                                     'Chromium OS UI (valgrind)(1)',
                                     'Chromium OS UI (valgrind)(2)',
                                     'Chromium OS UI (valgrind)(3)',
                                     'Chromium OS UI (valgrind)(4)',
                                     'Windows Tests (tsan)',
                                    ])

# Scheduler to trigger slaves that depend on the mac valgrind build.
s_chromium_mac_valgrind_builder= Scheduler(
    name='chromium_mac_valgrind_builder',
    branch='src',
    treeStableTimer=60,
    builderNames=['Chromium Mac Builder (valgrind)'])

s_chromium_mac_valgrind_dependent = Dependent(
    'chromium_mac_valgrind_dependent',
    s_chromium_mac_valgrind_builder,
    ['Chromium Mac (valgrind)',
     'Chromium Mac (tsan)',
     'Chromium Mac UI (valgrind)(1)',
     'Chromium Mac UI (valgrind)(2)',
     'Chromium Mac UI (valgrind)(3)',
     'Chromium Mac UI (valgrind)(4)',
    ])

# Scheduler to trigger slaves that depend on the linux valgrind build.
s_chromium_linux_valgrind_builder= Scheduler(
    name='chromium_linux_builder_valgrind',
    branch='src',
    treeStableTimer=60,
    builderNames=['Chromium Linux Builder (valgrind)'])

s_chromium_linux_valgrind_dependent = Dependent(
    'chromium_linux_valgrind_dependent',
    s_chromium_linux_valgrind_builder,
    ['Linux Tests (valgrind)(1)',
     'Linux Tests (valgrind)(2)',
     'Linux Tests (valgrind)(3)',
     'Linux Tests (valgrind)(4)',
     'Linux Tests (tsan)',
    ])


c['schedulers'] = [s_chromium,
                   s_chromium_mac_valgrind_builder,
                   s_chromium_mac_valgrind_dependent,
                   s_chromium_linux_valgrind_builder,
                   s_chromium_linux_valgrind_dependent]

####### BUILDERS

# buildbot/process/factory.py provides several BuildFactory classes you can
# start with, which implement build processes for common targets (GNU
# autoconf projects, CPAN perl modules, etc). The factory.BuildFactory is the
# base class, and is configured with a series of BuildSteps. When the build
# is run, the appropriate buildslave is told to execute each Step in turn.

# the first BuildStep is typically responsible for obtaining a copy of the
# sources. There are source-obtaining Steps in buildbot/process/step.py for
# CVS, SVN, and others.

builders = []

# ----------------------------------------------------------------------------
# FACTORIES

m_win = chromium_factory.ChromiumFactory('src/build', 'win32')
m_webkit = chromium_factory.ChromiumFactory('src/webkit', 'win32')
m_linux = chromium_factory.ChromiumFactory('src/build', 'linux2')
m_mac = chromium_factory.ChromiumFactory('src/build', 'darwin')
m_chromeos = chromium_factory.ChromiumFactory('src/build', 'linux2')

# Some shortcut to simplify the code below.
F_WIN = m_win.ChromiumFactory
F_WEBKIT = m_webkit.ChromiumFactory
F_LINUX = m_linux.ChromiumFactory
F_MAC = m_mac.ChromiumFactory
F_CR_OS = m_chromeos.ChromiumOSFactory

chromium_linux_valgrind_archive = master_config.GetArchiveUrl('ChromiumMemory',
    'Chromium Linux Builder (valgrind)',
    'chromium-rel-linux-valgrind-builder',
    'linux')

chromium_mac_valgrind_archive = master_config.GetArchiveUrl('ChromiumMemory',
    'Chromium Mac Builder (valgrind)',
    'chromium-rel-mac-valgrind-builder',
    'mac')

valgrind_gyp_defines = chromium_factory.ChromiumFactory.MEMORY_TOOLS_GYP_DEFINES

# Running out of address space on 10.5... try to buy some time.
valgrind_mac_gyp_defines = valgrind_gyp_defines + ' enable_svg=0'

heapcheck_gyp_defines = (
  'linux_use_tcmalloc=1 '
  'linux_use_heapchecker=1 '
  'linux_keep_shadow_stacks=1 '
  'werror= '
)

f_chromium_rel_linux_valgrind_tests_1 = F_LINUX(
    'chromium-rel-linux-valgrind-tests-1', target='Release',
    slave_type='Tester',
    build_url=chromium_linux_valgrind_archive,
    tests=['valgrind_unit',
           'valgrind_ui_1_of_8',
           'valgrind_ui_2_of_8',
           ],
    factory_properties={
        'needs_valgrind' : True,
        'gclient_env': { 'GYP_DEFINES' : valgrind_gyp_defines}})

f_chromium_rel_linux_valgrind_tests_2 = F_LINUX(
    'chromium-rel-linux-valgrind-tests-2', target='Release',
    slave_type='Tester',
    build_url=chromium_linux_valgrind_archive,
    tests=['valgrind_base',
           'valgrind_ui_3_of_8',
           'valgrind_ui_4_of_8',
           ],
    factory_properties={
        'needs_valgrind' : True,
        'gclient_env': { 'GYP_DEFINES' : valgrind_gyp_defines}})

f_chromium_rel_linux_valgrind_tests_3 = F_LINUX(
    'chromium-rel-linux-valgrind-tests-3', target='Release',
    slave_type='Tester',
    build_url=chromium_linux_valgrind_archive,
    tests=['valgrind_net',
           'valgrind_sync',
           'valgrind_ui_5_of_8',
           'valgrind_ui_6_of_8',
           ],
    factory_properties={
        'needs_valgrind' : True,
        'gclient_env': { 'GYP_DEFINES' : valgrind_gyp_defines}})

f_chromium_rel_linux_valgrind_tests_4 = F_LINUX(
    'chromium-rel-linux-valgrind-tests-4', target='Release',
    slave_type='Tester',
    build_url=chromium_linux_valgrind_archive,
    tests=['valgrind_app',
           'valgrind_googleurl',
           'valgrind_ipc',
           'valgrind_media',
           'valgrind_printing',
           'valgrind_remoting',
           'valgrind_ui_7_of_8',
           'valgrind_ui_8_of_8',
           ],
    factory_properties={
      'needs_valgrind' : True,
      'gclient_env': { 'GYP_DEFINES' : valgrind_gyp_defines}})

f_chromium_rel_linux_tsan = F_LINUX(
    'chromium-rel-linux-tsan', target='Release',
    slave_type='Tester',
    build_url=chromium_linux_valgrind_archive,
    tests=['tsan_app',
           'tsan_base',
           'tsan_googleurl',
           'tsan_net',
           'tsan_ipc',
           'tsan_media',
           'tsan_printing',
           'tsan_remoting',
           'tsan_sync',
           'tsan_unit_1_of_2',
           'tsan_unit_2_of_2',
           ],
    factory_properties={
      'needs_valgrind' : True,
      'gclient_env': { 'GYP_DEFINES' : valgrind_gyp_defines}})

f_chromium_rel_linux_valgrind_builder = F_LINUX(
    'chromium-rel-linux-valgrind-builder', target='Release',
    slave_type='Builder',
    options=['app_unittests',
             'base_unittests',
             'googleurl_unittests',
             'ipc_tests',
             'media_unittests',
             'net_unittests',
             'printing_unittests',
             'remoting_unittests',
             'sync_unit_tests',
             'ui_tests',
             'unit_tests',
             ],
    factory_properties={
      'gclient_env': { 'GYP_DEFINES' :
                 valgrind_gyp_defines}})

f_chromium_dbg_linux_heapcheck = F_LINUX('chromium-dbg-linux-heapcheck',
    target='Debug',
    options=['base_unittests', 'googleurl_unittests', 'net_unittests',
             'ipc_tests', 'media_unittests', 'printing_unittests',
             'unit_tests', 'app_unittests', 'test_shell_tests',
             'courgette_unittests', 'remoting_unittests', 'sync_unit_tests'],
    tests=['heapcheck_base', 'heapcheck_googleurl', 'heapcheck_net',
           'heapcheck_media', 'heapcheck_printing', 'heapcheck_ipc',
           'heapcheck_unit', 'heapcheck_app', 'heapcheck_test_shell',
           'heapcheck_courgette', 'heapcheck_remoting', 'heapcheck_sync'],
    factory_properties={
        'gclient_env': {'GYP_DEFINES' : heapcheck_gyp_defines} },
)



f_webkit_rel_linux_valgrind = F_LINUX('webkit-rel-linux-valgrind',
    target='Release',
    tests=['valgrind_test_shell'],
    options=['test_shell', 'test_shell_tests'],
    factory_properties={
        'needs_valgrind' : True,
        'gclient_env': { 'GYP_DEFINES' : valgrind_gyp_defines}})

f_webkit_rel_linux_valgrind_layout = F_LINUX(
    'webkit-rel-linux-valgrind-layout',
    target='Release',
    tests=['valgrind_layout'],
    options=['test_shell', 'test_shell_tests'],
    factory_properties={
        'needs_valgrind' : True,
        'gclient_env': { 'GYP_DEFINES' : valgrind_gyp_defines}})

# We use debug builds for mac valgrind bots because we can't get stacks on
# release builds.
f_cr_rel_mac_valgrind_builder = F_MAC(
    'chromium-rel-mac-valgrind-builder',
    slave_type='Builder',
    target='Debug',
    factory_properties={
        'needs_valgrind' : True,
        'gclient_env': { 'GYP_DEFINES' : valgrind_mac_gyp_defines}},
    options=['--', '-project', '../build/all.xcodeproj',
             '-target', 'chromium_builder_dbg_valgrind_mac'])

f_cr_dbg_mac_valgrind = F_MAC(
    'chromium-dbg-mac-valgrind',
    build_url=chromium_mac_valgrind_archive,
    slave_type='Tester',
    factory_properties={
        'needs_valgrind' : True,
        'gclient_env': {'GYP_DEFINES' : valgrind_mac_gyp_defines} },
    tests=['valgrind_app',
           'valgrind_base',
           'valgrind_googleurl',
           'valgrind_ipc',
           'valgrind_media',
           'valgrind_net',
           'valgrind_printing',
           'valgrind_remoting',
           'valgrind_unit_1_of_2',
           'valgrind_unit_2_of_2',
           ])

f_cr_dbg_mac_tsan = F_MAC(
    'chromium-dbg-mac-tsan',
    build_url=chromium_mac_valgrind_archive,
    slave_type='Tester',
    factory_properties={
        'needs_valgrind' : True,
        'gclient_env': {'GYP_DEFINES' : valgrind_mac_gyp_defines} },
    tests=['tsan_app',
           'tsan_base',
           'tsan_googleurl',
           'tsan_net',
           'tsan_ipc',
           'tsan_media',
           'tsan_printing',
           'tsan_remoting',
           'tsan_sync'])

f_cr_rel_mac_valgrind_ui_1 = F_MAC(
    'chromium-rel-mac-valgrind-ui-1',
    build_url=chromium_mac_valgrind_archive,
    slave_type='Tester',
    tests=['valgrind_ui_1_of_8',
           'valgrind_ui_2_of_8',
           ],
    factory_properties={
        'needs_valgrind' : True,
        'gclient_env': { 'GYP_DEFINES' : valgrind_mac_gyp_defines}})

f_cr_rel_mac_valgrind_ui_2 = F_MAC(
    'chromium-rel-mac-valgrind-ui-2',
    build_url=chromium_mac_valgrind_archive,
    slave_type='Tester',
    tests=['valgrind_ui_3_of_8',
           'valgrind_ui_4_of_8',
           ],
    factory_properties={
        'needs_valgrind' : True,
        'gclient_env': { 'GYP_DEFINES' : valgrind_mac_gyp_defines}})

f_cr_rel_mac_valgrind_ui_3 = F_MAC(
    'chromium-rel-mac-valgrind-ui-3',
    build_url=chromium_mac_valgrind_archive,
    slave_type='Tester',
    tests=['valgrind_ui_5_of_8',
           'valgrind_ui_6_of_8',
           ],
    factory_properties={
        'needs_valgrind' : True,
        'gclient_env': { 'GYP_DEFINES' : valgrind_mac_gyp_defines}})

f_cr_rel_mac_valgrind_ui_4 = F_MAC(
    'chromium-rel-mac-valgrind-ui-4',
    build_url=chromium_mac_valgrind_archive,
    slave_type='Tester',
    tests=['valgrind_ui_7_of_8',
           'valgrind_ui_8_of_8',
           ],
    factory_properties={
        'needs_valgrind' : True,
        'gclient_env': { 'GYP_DEFINES' : valgrind_mac_gyp_defines}})

f_webkit_rel_mac_valgrind = F_MAC(
    'webkit-rel-mac-valgrind',
    factory_properties={
      'needs_valgrind' : True,
      'gclient_env': { 'GYP_DEFINES' : valgrind_mac_gyp_defines } },
    tests=['valgrind_test_shell'],
    options=['--', '-project',
             '../webkit/webkit.xcodeproj'])

f_chromium_rel_chromeos_valgrind_tests_1 = F_CR_OS(
    'chromium-rel-chromeos-valgrind-tests-1', target='Release',
    tests=['valgrind_unit',
           'valgrind_ui_1_of_8',
           'valgrind_ui_2_of_8',
           ],
    options=['unit_tests',
             'ui_tests'],
    factory_properties={
      'needs_valgrind' : True,
      'gclient_env': {'GYP_DEFINES' : valgrind_gyp_defines + ' chromeos=1'}})

f_chromium_rel_chromeos_valgrind_tests_2 = F_CR_OS(
    'chromium-rel-chromeos-valgrind-tests-2', target='Release',
    tests=['valgrind_base',
           'valgrind_ui_3_of_8',
           'valgrind_ui_4_of_8',
           ],
    options=['base_unittests',
             'ui_tests'],
    factory_properties={
      'needs_valgrind' : True,
      'gclient_env': {'GYP_DEFINES' : valgrind_gyp_defines + ' chromeos=1'}})

f_chromium_rel_chromeos_valgrind_tests_3 = F_CR_OS(
    'chromium-rel-chromeos-valgrind-tests-3', target='Release',
    tests=['valgrind_net',
           'valgrind_ui_5_of_8',
           'valgrind_ui_6_of_8',
           ],
    options=['net_unittests',
             'ui_tests'],
    factory_properties={
      'needs_valgrind' : True,
      'gclient_env': {'GYP_DEFINES' : valgrind_gyp_defines + ' chromeos=1'}})

f_chromium_rel_chromeos_valgrind_tests_4 = F_CR_OS(
    'chromium-rel-chromeos-valgrind-tests-4', target='Release',
    tests=['valgrind_app',
           'valgrind_googleurl',
           'valgrind_ipc',
           'valgrind_media',
           'valgrind_printing',
           'valgrind_remoting',
           'valgrind_ui_7_of_8',
           'valgrind_ui_8_of_8',
           ],
    options=['app_unittests',
             'googleurl_unittests',
             'ipc_tests',
             'media_unittests',
             'printing_unittests',
             'remoting_unittests',
             'ui_tests'],
    factory_properties={
      'needs_valgrind' : True,
      'gclient_env': {'GYP_DEFINES' : valgrind_gyp_defines + ' chromeos=1'}})

pin_gyp_defines = chromium_factory.ChromiumFactory.MEMORY_TOOLS_GYP_DEFINES

f_chromium_dbg_win_tsan = F_WIN(
    'chromium-dbg-win-tsan',
    target='Debug',
    tests=[
      'tsan_googleurl',
      'tsan_printing',
      'tsan_remoting',
      'tsan_app',
      'tsan_media',
      'tsan_ipc',
      'tsan_base',
      'tsan_net',
    ],
    project='all.sln;chromium_builder_dbg_tsan_win',
    factory_properties={
      'needs_tsan_win' : True,
      'gclient_env': { 'GYP_DEFINES' : pin_gyp_defines },
    },
)

# ----------------------------------------------------------------------------
# BUILDER DEFINITIONS

# The 'builders' list defines the Builders. Each one is configured with a
# dictionary, using the following keys:
#  name (required): the name used to describe this bilder
#  slavename (required): which slave to use, must appear in c['slaves']
#  builddir (required): which subdirectory to run the builder in
#  factory (required): a BuildFactory to define how the build is run
#  periodicBuildTime (optional): if set, force a build every N seconds
#  category (optional): it is not used in the normal 'buildbot' meaning. It is
#                       used by gatekeeper to determine which steps it should
#                       look for to close the tree.
#

b_webkit_rel_linux_valgrind = {'name': 'Webkit Linux (valgrind)',
  'builddir': 'webkit-rel-linux-valgrind',
  'factory': f_webkit_rel_linux_valgrind,
  'category': '2Linux|builders_compile|builder_testers',
}

b_webkit_rel_linux_valgrind_layout = {'name': 'Webkit Linux (valgrind layout)',
  'builddir': 'webkit-rel-linux-valgrind-layout',
  'factory': f_webkit_rel_linux_valgrind_layout,
  'category': '2Linux|builders_compile|builder_testers',
}

b_chromium_dbg_linux_heapcheck = {
  'name': 'Linux Heapcheck',
  'builddir': 'chromium-dbg-linux-heapcheck',
  'factory': f_chromium_dbg_linux_heapcheck,
  'category': '5memory tests|builder_testers',
}

b_chromium_rel_linux_valgrind_builder = {
  'name': 'Chromium Linux Builder (valgrind)',
  'builddir': 'chromium-rel-linux-valgrind-builder',
  'factory': f_chromium_rel_linux_valgrind_builder,
  'category': '2Linux|builders_compile',
}

b_chromium_rel_linux_valgrind_tests_1 = {'name': 'Linux Tests (valgrind)(1)',
  'builddir': 'chromium-rel-linux-valgrind-tests-1',
  'factory': f_chromium_rel_linux_valgrind_tests_1,
  'category': '2Linux|builder_testers',
}

b_chromium_rel_linux_valgrind_tests_2 = {'name': 'Linux Tests (valgrind)(2)',
  'builddir': 'chromium-rel-linux-valgrind-tests-2',
  'factory': f_chromium_rel_linux_valgrind_tests_2,
  'category': '2Linux|builder_testers',
}

b_chromium_rel_linux_valgrind_tests_3 = {'name': 'Linux Tests (valgrind)(3)',
  'builddir': 'chromium-rel-linux-valgrind-tests-3',
  'factory': f_chromium_rel_linux_valgrind_tests_3,
  'category': '2Linux|builder_testers',
}

b_chromium_rel_linux_valgrind_tests_4 = {'name': 'Linux Tests (valgrind)(4)',
  'builddir': 'chromium-rel-linux-valgrind-tests-4',
  'factory': f_chromium_rel_linux_valgrind_tests_4,
  'category': '2Linux|builder_testers',
}

b_chromium_rel_linux_tsan = {'name': 'Linux Tests (tsan)',
  'builddir': 'chromium-rel-linux-tsan',
  'factory': f_chromium_rel_linux_tsan,
  'category': '2Linux|builders_compile|builder_testers',
}

b_chromium_dbg_mac_valgrind = {'name': 'Chromium Mac (valgrind)',
  'builddir': 'chromium-dbg-mac-valgrind',
  'factory': f_cr_dbg_mac_valgrind,
  'category': '3Mac|builder_testers',
}

b_chromium_dbg_mac_tsan = {'name': 'Chromium Mac (tsan)',
  'builddir': 'chromium-dbg-mac-tsan',
  'factory': f_cr_dbg_mac_tsan,
  'category': '3Mac|builder_testers',
}

b_webkit_rel_mac_valgrind = {'name': 'Webkit Mac (valgrind)',
  'builddir': 'webkit-rel-mac-valgrind',
  'factory': f_webkit_rel_mac_valgrind,
  'category': '3Mac|builders_compile|builder_testers',
}

b_chromium_rel_mac_valgrind_builder = {
  'name': 'Chromium Mac Builder (valgrind)',
  'builddir': 'chromium-rel-mac-valgrind-builder',
  'factory': f_cr_rel_mac_valgrind_builder,
  'category': '3Mac|builders_compile',
}

b_chromium_rel_mac_valgrind_ui_1 = {'name': 'Chromium Mac UI (valgrind)(1)',
  'builddir': 'chromium-rel-mac-valgrind-ui-1',
  'factory': f_cr_rel_mac_valgrind_ui_1,
  'category': '3Mac|builders_testers',
}

b_chromium_rel_mac_valgrind_ui_2 = {'name': 'Chromium Mac UI (valgrind)(2)',
  'builddir': 'chromium-rel-mac-valgrind-ui-2',
  'factory': f_cr_rel_mac_valgrind_ui_2,
  'category': '3Mac|builders_testers',
}

b_chromium_rel_mac_valgrind_ui_3 = {'name': 'Chromium Mac UI (valgrind)(3)',
  'builddir': 'chromium-rel-mac-valgrind-ui-3',
  'factory': f_cr_rel_mac_valgrind_ui_3,
  'category': '3Mac|builders_testers',
}

b_chromium_rel_mac_valgrind_ui_4 = {'name': 'Chromium Mac UI (valgrind)(4)',
  'builddir': 'chromium-rel-mac-valgrind-ui-4',
  'factory': f_cr_rel_mac_valgrind_ui_4,
  'category': '3Mac|builders_testers',
}

b_chromium_rel_chromeos_valgrind_ui_1 = {
  'name': 'Chromium OS UI (valgrind)(1)',
  'builddir': 'chromium-rel-chromeos-valgrind-tests-1',
  'factory': f_chromium_rel_chromeos_valgrind_tests_1,
  'category': '4ChromeOS|builders_compile|builder_testers',
}

b_chromium_rel_chromeos_valgrind_ui_2 = {
  'name': 'Chromium OS UI (valgrind)(2)',
  'builddir': 'chromium-rel-chromeos-valgrind-tests-2',
  'factory': f_chromium_rel_chromeos_valgrind_tests_2,
  'category': '4ChromeOS|builders_compile|builder_testers',
}

b_chromium_rel_chromeos_valgrind_ui_3 = {
  'name': 'Chromium OS UI (valgrind)(3)',
  'builddir': 'chromium-rel-chromeos-valgrind-tests-3',
  'factory': f_chromium_rel_chromeos_valgrind_tests_3,
  'category': '4ChromeOS|builders_compile|builder_testers',
}

b_chromium_rel_chromeos_valgrind_ui_4 = {
  'name': 'Chromium OS UI (valgrind)(4)',
  'builddir': 'chromium-rel-chromeos-valgrind-tests-4',
  'factory': f_chromium_rel_chromeos_valgrind_tests_4,
  'category': '4ChromeOS|builders_compile|builder_testers',
}

b_chromium_dbg_win_tsan = {
  'name': 'Windows Tests (tsan)',
  'builddir': 'chromium-dbg-win-tsan',
  'factory': f_chromium_dbg_win_tsan,
  'category': '1Windows|builders_compile|builder_testers',
}

c['builders'] = [
  b_chromium_rel_linux_valgrind_builder,
  b_chromium_rel_linux_valgrind_tests_1,
  b_chromium_rel_linux_valgrind_tests_2,
  b_chromium_rel_linux_valgrind_tests_3,
  b_chromium_rel_linux_valgrind_tests_4,
  b_chromium_rel_linux_tsan,
  b_webkit_rel_linux_valgrind,
  b_webkit_rel_linux_valgrind_layout,
  b_webkit_rel_mac_valgrind,
  b_chromium_rel_mac_valgrind_builder,
  b_chromium_dbg_mac_valgrind,
  b_chromium_dbg_mac_tsan,
  b_chromium_rel_mac_valgrind_ui_1,
  b_chromium_rel_mac_valgrind_ui_2,
  b_chromium_rel_mac_valgrind_ui_3,
  b_chromium_rel_mac_valgrind_ui_4,
  b_chromium_dbg_linux_heapcheck,
  b_chromium_rel_chromeos_valgrind_ui_1,
  b_chromium_rel_chromeos_valgrind_ui_2,
  b_chromium_rel_chromeos_valgrind_ui_3,
  b_chromium_rel_chromeos_valgrind_ui_4,
  b_chromium_dbg_win_tsan,
]

# Associate the slaves to the manual builders. The configuration is in
# slaves.cfg.
slaves = slaves_list.SlavesList('slaves.cfg', 'ChromiumMemory')
for builder in c['builders']:
  builder['slavenames'] = slaves.GetSlavesName(builder=builder['name'])

####### BUILDSLAVES

# The 'slaves' list defines the set of allowable buildslaves. List all the
# slaves registered to a builder. Remove dupes.
c['slaves'] = master_utils.AutoSetupSlaves(c['builders'],
                                           config.Master.GetBotPassword())

# Make sure everything works together.
master_utils.VerifySetup(c, slaves)

####### STATUS TARGETS

# Adds common status and tools to this master.
master_utils.AutoSetupMaster(c, ActiveMaster,
                             public_html="../master.chromium/public_html")

if ActiveMaster.base_app_url:
  from master.status_push import HttpStatusPush
  c['status'].append(HttpStatusPush(
      ActiveMaster.base_app_url + '/status-receiver',
      blackList=('requestSubmitted', 'requestCancelled', 'buildsetSubmitted',
                 'builderAdded', 'builderChangedState', 'buildStarted',
                 'buildETAUpdate', 'stepStarted', 'stepTextChanged',
                 'stepText2Changed', 'stepETAUpdate', 'logStarted',
                 'logFinished', 'buildedRemoved', 'slaveConnected',
                 'slaveDisconnected')))


####### PROJECT IDENTITY

# Buildbot master url:
c['buildbotURL'] = 'http://build.chromium.org/buildbot/waterfall/'
