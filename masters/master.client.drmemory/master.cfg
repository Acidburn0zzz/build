# -*- python -*-
# ex: set syntax=python:

# Copyright (c) 2012 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# It has one job: define a dictionary named BuildmasterConfig. This
# dictionary has a variety of keys to control different aspects of the
# buildmaster. They are documented in docs/config.xhtml .

from buildbot.changes import svnpoller
from buildbot.status.mail import MailNotifier
from buildbot import scheduler

from master import master_utils
from master import slaves_list
from master.factory import drmemory_factory

import config
ActiveMaster = config.Master.DrMemory

MASTER_HOST = ActiveMaster.master_host
MAIL_NOTIFIER = ActiveMaster.is_production_host
MASTER_PORT = ActiveMaster.master_port

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

config.DatabaseSetup(c, require_dbconfig=ActiveMaster.is_production_host)

# 'slavePortnum' defines the TCP port to listen on. This must match the value
# configured into the buildslaves (with their --master option)
c['slavePortnum'] = ActiveMaster.slave_port

slaves = slaves_list.SlavesList('slaves.cfg', 'DrMemory')


####### CHANGESOURCES

from buildbot.changes.svnpoller import SVNPoller
drm_poller = SVNPoller(svnurl=drmemory_factory.drm_svnurl,
                       pollinterval=60,
                       histmax=50,
                       svnbin='/usr/bin/svn',
)
c['change_source'] = [ drm_poller ]


####### SCHEDULERS

## configure the Schedulers
MAINBOTS = [
             ["win", ["xp", "vista_x64", "7_x64"]],
             ["linux", ["lucid_x64"]],
           ]
BUILDERS=[]
DRM_BUILDERS=[]
DR_BUILDERS=[]
DR_NIGHTLY_BUILDERS=[]
for (os, os_versions) in MAINBOTS:
  for version in os_versions:
    drm_builder = "%s-%s-drm" % (os, version)
    dr_builder  = "%s-%s-dr"  % (os, version)
    dr_nightly_builder  = "%s-%s-dr_nightly"  % (os, version)
    DRM_BUILDERS += [drm_builder]
    DR_BUILDERS += [dr_builder]
    DR_NIGHTLY_BUILDERS += [dr_nightly_builder]
    BUILDERS += [drm_builder, dr_builder, dr_nightly_builder]

STABLE_BUILDERS=["win-builder", "linux-builder",
                 "win-xp-drm", "win-7_x64-drm",
                 "win7-stab", "linux-cr"]
STABBOT="win7_stab_bot"

c['schedulers'] = []
c['schedulers'].append(scheduler.Scheduler(
                           name="all",
                           branch=None,
                           treeStableTimer=60,
                           builderNames=(["win-builder"] +
                                         ["linux-builder"] +
                                         DRM_BUILDERS)))
c['schedulers'].append(scheduler.Periodic(
                           name="periodic",
                           branch=None,
                           periodicBuildTimer=12*60*60,  # Every 12 hours
                           builderNames=DRM_BUILDERS+DR_BUILDERS))
c['schedulers'].append(scheduler.Periodic(
                           name="periodic_stable",
                           branch=None,
                           periodicBuildTimer=2*60*60,  # Every 2 hours
                           builderNames=["win7-stab", "linux-cr"]))
c['schedulers'].append(scheduler.Nightly(
                           name="dr-nightly",
                           branch=None,
                           hour=0, minute=0,  # At midnight
                           builderNames=DR_NIGHTLY_BUILDERS))
c['schedulers'].append(scheduler.Nightly(
                           name="weekly",
                           branch=None,
                           dayOfWeek=6,  # Monday=0, Sunday=6
                           properties={"is_weekly": True},
                           builderNames=["win7-stab"]))


####### BUILDERS

F_DR = drmemory_factory.CreateDRInDrMemoryFactory
F_DRM = drmemory_factory.CreateDrMFactory
F_DRMPACK = drmemory_factory.CreateDrMPackageFactory
F_WINSTAB = drmemory_factory.CreateWinStabFactory
F_LINUX_CR = drmemory_factory.CreateLinuxChromeFactory

c['builders'] = []

FACTORIES = {
    "win":   [
        ["drm", F_DRM(True)],
        ["dr", F_DR(os='win')],
    ],
    "linux": [
        ["drm", F_DRM(False)],
        ["dr", F_DR(os='linux')],
    ],
}


for (os, os_versions) in MAINBOTS:
  c['builders'].append({'name': '%s-builder' % os,
                        'factory': F_DRMPACK(os == "win")})
  for version in os_versions:
    for (f_name, f_obj) in FACTORIES[os]:
      c['builders'].append({'name': '%s-%s-%s' % (os, version, f_name),
                            'factory': f_obj})
    c['builders'].append({'name': '%s-%s-dr_nightly' % (os, version),
                          'factory': F_DR(nightly=True, os=os,
                                       os_version=version)})

c['builders'].append({'name': 'win7-stab',
                      'factory': F_WINSTAB()})


c['builders'].append({'name': 'linux-cr',
                      'factory': F_LINUX_CR()})


####### BUILDSLAVES

for builder in c['builders']:
  builder['slavenames'] = slaves.GetSlavesName(builder=builder['name'])

# The 'slaves' list defines the set of allowable buildslaves. List all the
# slaves registered to a builder. Remove dupes.
c['slaves'] = master_utils.AutoSetupSlaves(c['builders'],
                                           config.Master.GetBotPassword())

# Make sure everything works together.
master_utils.VerifySetup(c, slaves)


####### STATUS TARGETS

# Adds common status and tools to this master.
master_utils.AutoSetupMaster(c, ActiveMaster)

c['status'].append(MailNotifier(fromaddr="timurrrr+drm+buildbot@google.com",
                   lookup="gmail.com", # add @gmail.com if "@" is not in the commiter's ID
                   extraRecipients=['drmemory-devs@googlegroups.com'],
                   builders=STABLE_BUILDERS,
                   mode='problem'))

# Keep last build logs, the default is too low.
c['buildHorizon'] = 1000
c['logHorizon'] = 500
# Must be at least 2x the number of slaves.
c['eventHorizon'] = 200
# Must be at least 1x the number of builds listed in console.
c['buildCacheSize'] = 60


####### DEBUGGING OPTIONS

# if you set 'debugPassword', then you can connect to the buildmaster with
# the diagnostic tool in contrib/debugclient.py . From this tool, you can
# manually force builds and inject changes, which may be useful for testing
# your buildmaster without actually commiting changes to your repository (or
# before you have a functioning 'sources' set up). The debug tool uses the
# same port number as the slaves do: 'slavePortnum'.

#c['debugPassword'] = 'debugpassword'

# if you set 'manhole', you can ssh into the buildmaster and get an
# interactive python shell, which may be useful for debugging buildbot
# internals. It is probably only useful for buildbot developers. You can also
# use an authorized_keys file, or plain telnet.
#from buildbot import manhole
#c['manhole'] = manhole.PasswordManhole('tcp:9999:interface=127.0.0.1',
#                                       'admin', 'password')


####### PROJECT IDENTITY

# the 'projectName' string will be used to describe the project that this
# buildbot is working on. For example, it is used as the title of the
# waterfall HTML page. The 'projectURL' string will be used to provide a link
# from buildbot HTML pages to your project's home page.

c['projectName'] = ActiveMaster.project_name
c['projectURL'] = config.Master.project_url

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.Waterfall page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = 'http://build.chromium.org/p/client.drmemory/'
