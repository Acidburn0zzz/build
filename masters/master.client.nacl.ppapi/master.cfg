# -*- python -*-
# ex: set syntax=python:

# Copyright (c) 2010 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# This is the buildmaster config file for the 'nacl' bot. It must
# be installed as 'master.cfg' in your buildmaster's base directory
# (although the filename can be changed with the --basedir option to
# 'mktap buildbot master').

# It has one job: define a dictionary named BuildmasterConfig. This
# dictionary has a variety of keys to control different aspects of the
# buildmaster. They are documented in docs/config.xhtml .

# This file follows this naming convention:
# Factories: f_nacl_[dbg/opt/sdk]_[os]
# Builders:  b_nacl_[dbg/opt/sdk]_[os]
# BuildDir:  [dbg/opt/sdk]-[os]
#
# os = xp/linux/mac

from buildbot import locks
from buildbot.changes import svnpoller
from buildbot.scheduler import Dependent
from buildbot.scheduler import Scheduler
from buildbot.scheduler import Triggerable

from common import chromium_utils
from master import build_utils
from master import chromium_step
from master import master_utils
from master import slaves_list
from master.factory import nacl_factory
from master.factory import gclient_factory

import config


ActiveMaster = config.Master.NativeClientPPAPI

TREE_GATE_KEEPER = ActiveMaster.is_production_host

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

# 'slavePortnum' defines the TCP port to listen on. This must match the value
# configured into the buildslaves (with their --master option)
c['slavePortnum'] = ActiveMaster.slave_port


####### CHANGESOURCES

# the 'change_source' list tells the buildmaster how it should find out about
# source code changes. Any class which implements IChangeSource can be added
# to this list: there are several in buildbot/changes/*.py to choose from.
def NativeClientTreeFileSplitter(path):
  return ('ppapi', path)

# Polls config.Master.nacl_trunk_url for changes
trunk_poller = svnpoller.SVNPoller(
  svnurl='http://src.chromium.org/svn/trunk/src/ppapi',
  split_file=NativeClientTreeFileSplitter,
  pollinterval=10)

c['change_source'] = [trunk_poller]


####### BUILDERS

# buildbot/process/factory.py provides several BuildFactory classes you can
# start with, which implement build processes for common targets (GNU
# autoconf projects, CPAN perl modules, etc). The factory.BuildFactory is the
# base class, and is configured with a series of BuildSteps. When the build
# is run, the appropriate buildslave is told to execute each Step in turn.

# the first BuildStep is typically responsible for obtaining a copy of the
# sources. There are source-obtaining Steps in buildbot/process/step.py for
# CVS, SVN, and others.


# ----------------------------------------------------------------------------
# FACTORIES

m_linux = nacl_factory.NativeClientFactory(
    'native_client', 'linux2', use_supplement=True,
    custom_deps_list = [
        ('ppapi', 'http://src.chromium.org/svn/trunk/src/ppapi'),
    ],
)
# Add an extra frivilous checkout of part of ppapi so console view can make
# sense of the world.
m_linux._solutions.insert(0, gclient_factory.GClientSolution(
   'http://src.chromium.org/svn/trunk/src/ppapi/c', name='console_junk'))


# Some shortcut to simplify the code below.
F_LINUX = m_linux.NativeClientFactory


# The identifier of the factory is the build configuration. If two factories
# are using the same build configuration, they should have the same identifier.

factories = []

# Linux
ver = 'lucid'
for mode in ('dbg', 'opt'):
  name = 'lucid64-m32-n32-%s' % mode
  tests = [
    'nacl_small_tests',
    'nacl_medium_tests',
    'nacl_large_tests',
    'nacl_selenium',
  ]
  factories.append([name, '1Lucid', F_LINUX(name, clobber=True,
          target='%s-linux,nacl,doc' % mode,
          tests=tests,
          options=nacl_factory.generic_m32_n32_options,
          factory_properties={'archive_build': False})])


####### SCHEDULERS
## configure the Schedulers
# Main scheduler for all changes in trunk.
primary_builders = []
for f in factories:
  primary_builders.append(f[0])
s_nacl = Scheduler(
   name='nacl',
   branch='ppapi',
   treeStableTimer=60,
   builderNames=primary_builders,
)

c['schedulers'] = [
    s_nacl,
]


# Setup a per slave lock to prevent more than one thing running at once on
# a single slave.
slave_lock = locks.SlaveLock('overload_lock', maxCount=1)



# ----------------------------------------------------------------------------
# BUILDER DEFINITIONS

# The 'builders' list defines the Builders. Each one is configured with a
# dictionary, using the following keys:
#  name (required): the name used to describe this bilder
#  slavename (required): which slave to use, must appear in c['slaves']
#  builddir (required): which subdirectory to run the builder in
#  factory (required): a BuildFactory to define how the build is run
#  periodicBuildTime (optional): if set, force a build every N seconds
#  category (optional): it is not used in the normal 'buildbot' meaning. It is
#                       used by gatekeeper to determine which steps it should
#                       look for to close the tree.
#

c['builders'] = []
slaves = slaves_list.SlavesList('slaves.cfg', 'NativeClientPPAPI')
for f in factories:
  c['builders'].append({
      'name': f[0],
      'slavenames': slaves.GetSlavesName(builder=f[0]),
      'builddir': f[0],
      'factory': f[2],
      'category': '%s' % f[1],
      'locks': [slave_lock],
      'auto_reboot': False,
  })


####### BUILDSLAVES

# The 'slaves' list defines the set of allowable buildslaves. List all the
# slaves registered to a builder. Remove dupes.
c['slaves'] = master_utils.AutoSetupSlaves(c['builders'],
                                           config.Master.GetBotPassword())

# Make sure everything works together.
master_utils.VerifySetup(c, slaves)


####### STATUS TARGETS

# Adds common status and tools to this master.
master_utils.AutoSetupMaster(c, ActiveMaster)

# Add more.

if TREE_GATE_KEEPER:
  import gatekeeper
  # This is the list of the builder categories and the corresponding critical
  # steps. If one critical step fails, gatekeeper will close the tree
  # automatically.
  categories_steps = {
      '': [
           'update scripts', 'update',
           'clobber', 'clobber_packages',
      ],
      'info': [],
      'closer': [
           'update scripts', 'update',
           'clobber', 'clobber_packages', 'precompile', 'scons_compile',
           'gyp_compile', 'gyp_tests', 'build_packages',
           'cooking_tarball', 'selenium',
           'small_tests', 'medium_tests', 'large_tests',
           'hand_tests', 'smoke_tests',
           'backup_plugin', 'install_plugin', 'start_vncserver',
           'stop_vncserver', 'restore_plugin',
           'archived_build', 'extract_archive', 'setting_acls',
      ],
  }
  exclusions = { }
  forgiving_steps = ['update scripts', 'update', 'svnkill', 'taskkill',
                     'archived_build', 'extract_archive', 'setting_acls'],
  c['status'].append(gatekeeper.GateKeeper(
      fromaddr=ActiveMaster.from_address,
      categories_steps=categories_steps,
      exclusions=exclusions,
      relayhost=config.Master.smtp,
      subject='buildbot %(result)s in %(projectName)s on %(builder)s, '
              'revision %(revision)s',
      extraRecipients=ActiveMaster.tree_closing_notification_recipients,
      tree_status_url=ActiveMaster.tree_status_url,
      lookup='google.com',
      forgiving_steps=forgiving_steps))


####### PROJECT IDENTITY

# the 'projectName' string will be used to describe the project that this
# buildbot is working on. For example, it is used as the title of the
# waterfall HTML page. The 'projectURL' string will be used to provide a link
# from buildbot HTML pages to your project's home page.

c['projectName'] = ActiveMaster.project_name
c['projectURL'] = config.Master.project_url

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.Waterfall page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = 'http://build.chromium.org/p/client.nacl.ppapi/'
