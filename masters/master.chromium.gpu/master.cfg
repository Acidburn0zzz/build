# Copyright (c) 2012 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

from buildbot.changes import svnpoller
from buildbot.scheduler import Dependent
from buildbot.scheduler import Scheduler

from master import build_utils
from master import master_config
from master import master_utils
from master import slaves_list
from master.factory import chromium_factory

import config

ActiveMaster = config.Master.ChromiumGPU

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

# Disable compression for the stdio files.
c['logCompressionLimit'] = False

config.DatabaseSetup(c, require_dbconfig=ActiveMaster.is_production_host)

####### CHANGESOURCES

def ChromeTreeFileSplitter(path):
  """split_file for the 'src' project in the trunk."""

  # Exclude .DEPS.git from triggering builds on chrome.
  if path == 'src/.DEPS.git':
    return None

  # List of projects we are interested in. The project names must exactly
  # match paths in the Subversion repository, relative to the 'path' URL
  # argument. build_utils.SplitPath() will use them as branch names to
  # kick off the Schedulers for different projects.
  projects = ['src']
  return build_utils.SplitPath(projects, path)

# Polls config.Master.trunk_url for changes
chromium_rev = 'http://src.chromium.org/viewvc/chrome?view=rev&revision=%s'
trunk_poller = svnpoller.SVNPoller(svnurl=config.Master.trunk_url,
                                   split_file=ChromeTreeFileSplitter,
                                   pollinterval=10,
                                   revlinktmpl=chromium_rev)

c['change_source'] = [trunk_poller]


####### SCHEDULERS

## configure the Schedulers

# Main scheduler for all changes in trunk.

s_gpu = Scheduler(name='gpu',
                          branch='src',
                          treeStableTimer=60,
                          builderNames=['Win7 Release (ATI)',
                                        'Win7 Release (Intel)',
                                        'WinXP Release (NVIDIA)',
                                        'WinXP Debug (NVIDIA)',
                                        'Mac Release (Intel)',
                                        'Linux Release (ATI)',
                                        'Linux Release (Intel)',])
c['schedulers'] = [s_gpu]

####### BUILDERS

builders = []

# ----------------------------------------------------------------------------
# FACTORIES

# Using src/webkit is necessary for running the layout tests on Windows.
# However, the 'all' project resides in src/build. Thus, build in one place and
# test in another. Thus, it is impossible to build and test on the same Windows
# bot.
m_win = chromium_factory.ChromiumFactory('src/build', 'win32')
m_win_webkit = chromium_factory.ChromiumFactory('src/webkit', 'win32')
m_mac = chromium_factory.ChromiumFactory('src/build', 'mac')
m_linux = chromium_factory.ChromiumFactory('src/build', 'linux2')

# Some shortcut to simplify the code below.
F_WIN = m_win.ChromiumGPUFactory
F_WIN_WEBKIT = m_win_webkit.ChromiumGPUFactory
F_MAC = m_mac.ChromiumGPUFactory
F_LINUX = m_linux.ChromiumGPUFactory


f_win7_ati_rel = F_WIN(
    project='all.sln;chromium_gpu_builder',
    target='Release',
    slave_type='BuilderTester',
    tests=['gpu_tests', 'gpu_frame_rate', 'gpu_latency', 'gpu_throughput'],
    factory_properties={'gclient_env': {'GYP_DEFINES': 'fastbuild=1'},
                        'enable_hardware_gpu': True,
                        'test_results_server': 'test-results.appspot.com',
                        'generate_gtest_json': True})

f_win7_intel_rel = F_WIN(
    project='all.sln;chromium_gpu_builder',
    target='Release',
    slave_type='BuilderTester',
    tests=['gpu_tests', 'gpu_frame_rate', 'gpu_latency', 'gpu_throughput'],
    factory_properties={'gclient_env': {'GYP_DEFINES': 'fastbuild=1'},
                        'enable_hardware_gpu': True,
                        'test_results_server': 'test-results.appspot.com',
                        'generate_gtest_json': True})

f_winxp_rel = F_WIN(
    project='all.sln;chromium_gpu_builder',
    target='Release',
    slave_type='BuilderTester',
    tests=['gpu_tests', 'gpu_frame_rate', 'gpu_latency', 'gpu_throughput'],
    factory_properties={'gclient_env': {'GYP_DEFINES': 'fastbuild=1'},
                        'enable_hardware_gpu': True,
                        'test_results_server': 'test-results.appspot.com',
                        'generate_gtest_json': True})

f_winxp_dbg = F_WIN(
    project='all.sln;chromium_gpu_debug_builder',
    target='Debug',
    slave_type='BuilderTester',
    tests=['gpu_tests'],
    factory_properties={'gclient_env': {'GYP_DEFINES': 'fastbuild=1'},
                        'enable_hardware_gpu': True,
                        'test_results_server': 'test-results.appspot.com',
                        'generate_gtest_json': True})

f_mac_rel = F_MAC(
    target='Release',
    slave_type='BuilderTester',
    options=['--', '-project', 'all.xcodeproj',
             '-target', 'chromium_gpu_builder'],
    tests=['gpu_tests', 'gpu_frame_rate', 'gpu_latency', 'gpu_throughput'],
    factory_properties={'enable_hardware_gpu': True,
                        'test_results_server': 'test-results.appspot.com',
                        'generate_gtest_json': True})

f_linux_ati_rel = F_LINUX(
    target='Release',
    slave_type='BuilderTester',
    options=['chromium_gpu_builder'],
    tests=['gpu_tests', 'gpu_frame_rate', 'gpu_latency', 'gpu_throughput'],
    factory_properties={'enable_hardware_gpu': True,
                        'test_results_server': 'test-results.appspot.com',
                        'generate_gtest_json': True})

f_linux_intel_rel = F_LINUX(
    target='Release',
    slave_type='BuilderTester',
    options=['chromium_gpu_builder'],
    tests=['gpu_tests', 'gpu_frame_rate', 'gpu_latency', 'gpu_throughput'],
    factory_properties={'enable_hardware_gpu': True,
                        'test_results_server': 'test-results.appspot.com',
                        'generate_gtest_json': True})


# ----------------------------------------------------------------------------
# BUILDER DEFINITIONS

b_win_1 = {'name': 'Win7 Release (ATI)',
           'factory': f_win7_ati_rel}

b_win_2 = {'name': 'Win7 Release (Intel)',
           'factory': f_win7_intel_rel}

b_win_3 = {'name': 'WinXP Release (NVIDIA)',
           'factory': f_winxp_rel}

b_win_4 = {'name': 'WinXP Debug (NVIDIA)',
           'factory': f_winxp_dbg}

b_mac_1 = {'name': 'Mac Release (Intel)',
           'factory': f_mac_rel}

b_linux_1 = {'name': 'Linux Release (ATI)',
             'factory': f_linux_ati_rel}

b_linux_2 = {'name': 'Linux Release (Intel)',
             'factory': f_linux_intel_rel}

# Order them by OS type, target type, and OS version.
c['builders'] = [
  b_win_1,
  b_win_2,
  b_win_3,
  b_win_4,
  b_mac_1,
  b_linux_1,
  b_linux_2,
]

# Associate the slaves to the manual builders. The configuration is in
# slaves.cfg.
slaves = slaves_list.SlavesList('slaves.cfg', 'ChromiumGPU')
for builder in c['builders']:
  builder['slavenames'] = slaves.GetSlavesName(builder=builder['name'])

####### BUILDSLAVES

# The 'slaves' list defines the set of allowable buildslaves. List all the
# slaves registered to a builder. Remove dupes.
c['slaves'] = master_utils.AutoSetupSlaves(c['builders'],
                                           config.Master.GetBotPassword())

# Make sure everything works together.
master_utils.VerifySetup(c, slaves)

####### STATUS TARGETS

# Adds common status and tools to this master.
master_utils.AutoSetupMaster(c, ActiveMaster,
    public_html='../master.chromium/public_html',
    templates=['../master.chromium/templates'],
    enable_http_status_push=ActiveMaster.is_production_host)

####### PROJECT IDENTITY

# Buildbot master url:
c['buildbotURL'] = 'http://build.chromium.org/buildbot/gpu/'
