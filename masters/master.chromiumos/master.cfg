# -*- python -*-
# ex: set syntax=python:

# Copyright (c) 2011 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# This is the buildmaster config file for the 'chromeos' bot. It must
# be installed as 'master.cfg' in your buildmaster's base directory
# (although the filename can be changed with the --basedir option to
# 'mktap buildbot master').

# It has one job: define a dictionary named BuildmasterConfig. This
# dictionary has a variety of keys to control different aspects of the
# buildmaster. They are documented in docs/config.xhtml .

# TODO: update these docs
# This file follows this naming convention:
# Factories: f_cr_[dbg/rel]_[type]
# Builders:  b_chromeos_[dbg/rel]_[os]_[type]
# BuildDir:  chromeos-[dbg/rel]-[os]-[type]
#
# os = xp/vista/linux/mac
# type = perf/tests/full/jsc/webkit_latest

from buildbot.changes import svnpoller
from buildbot.changes.pb import PBChangeSource
from buildbot.scheduler import Dependent
from buildbot.scheduler import Scheduler
from buildbot.scheduler import Triggerable

# These modules come from scripts/master, which must be in the PYTHONPATH.
from master import build_utils
from master import master_utils
from master import slaves_list
from master.factory import chromeos_factory

# These modules come from scripts/common, which must be in the PYTHONPATH.
import config

ActiveMaster = config.Master.ChromiumOS

TREE_GATE_KEEPER = ActiveMaster.is_production_host
GOOD_REVISIONS = False

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}


####### CHANGESOURCES
def ChromeTreeFileSplitter(path):
  """split_file for chrome tree changes."""
  # Ignore other directories except trunk/src and releases.
  if path.startswith('releases') or path.startswith('trunk/src'):
    # Exclude o3d from triggering builds on chrome for now.
    if not path.startswith('trunk/src/o3d'):
      # List of projects we are interested in. The project names must exactly
      # match paths in the Subversion repository, relative to the 'path' URL
      # argument. build_utils.SplitPath() will use them as branch names to
      # kick off the Schedulers for different projects.
      projects = ['releases', 'trunk']
      return build_utils.SplitPath(projects, path)

  return None

chromium_rev = 'http://src.chromium.org/viewvc/chrome?view=rev&revision=%s'

chrome_trunk_poller = svnpoller.SVNPoller(
    svnurl = 'svn://svn.chromium.org/chrome/',
    split_file=ChromeTreeFileSplitter,
    pollinterval=300,
    revlinktmpl=chromium_rev)

pb_source = PBChangeSource()

c['change_source'] = [pb_source, chrome_trunk_poller]


####### SCHEDULERS

## configure the Schedulers

# Pre-flight scheduler for changes in Chromium OS.  All other slaves are either
# triggered or depend on this scheduler.
# XXX: Changes to builderNames must also be made in:# - slaves.cfg
# - public_html/announce.html
# - And down below in the builder definitions as well
# - and you probably need to restart any changed slaves as well as the master
s_pre_flight_queue = Scheduler(
  name='pre_flight_queue',
  # Renamed 'src' to 'master' for git_buildbot.py
  branch='master',
  treeStableTimer=0,
  builderNames=[
     'x86 generic pre flight queue',
  ])

# Pre-flight scheduler for trunk changes of Chromium for Chromium OS.
s_tot_chrome_pre_flight_queue = Scheduler(
  name='chrome_tot_pre_flight_queue',
  branch='trunk',
  treeStableTimer=0,
  builderNames=[
     'x86 generic tot chrome pre flight queue',
  ])

# Pre-flight scheduler for deps changes of Chromium for Chromium OS.
s_chrome_pre_flight_queue = Scheduler(
  name='chrome_pre_flight_queue',
  branch='releases',
  treeStableTimer=0,
  builderNames=[
     'x86 generic chrome pre flight queue',
  ])

# Triggerable for other pre-flight-queue slaves. We use triggers so that
# the other slaves are guaranteed to use the same sourcestamp as the main.
s_pre_flight_queue_slaves = Triggerable(
  name='pre_flight_queue_slaves',
  builderNames=[
     'arm generic binary',
     'arm tegra2 binary',
     'x86 pineview binary',
  ])

# Only trigger fulls when we have a newly revved build.
s_chromeos_full = Dependent(
  name='chromeos',
  upstream=s_pre_flight_queue,
  builderNames=[
     'arm generic full',
     'arm tegra2 full',
     'arm tegra2 seaboard full',
     'x86 generic full',
     'x86 pineview full',
  ])

# TODO: add ARM builds

c['schedulers'] = [s_pre_flight_queue, s_tot_chrome_pre_flight_queue,
                   s_chrome_pre_flight_queue, s_pre_flight_queue_slaves,
                   s_chromeos_full]

####### BUILDERS

# buildbot/process/factory.py provides several BuildFactory classes you can
# start with, which implement build processes for common targets (GNU
# autoconf projects, CPAN perl modules, etc). The factory.BuildFactory is the
# base class, and is configured with a series of BuildSteps. When the build
# is run, the appropriate buildslave is told to execute each Step in turn.

# the first BuildStep is typically responsible for obtaining a copy of the
# sources. There are source-obtaining Steps in buildbot/process/step.py for
# CVS, SVN, and others.

builders = []

# Should CbuildbotFactory's do a dry_run.
dry_run = not ActiveMaster.is_production_host

# ----------------------------------------------------------------------------
# FACTORIES

# The identifier of the factory is the build configuration. If two factories
# are using the same build configuration, they should have the same identifier.

# Full slaves.
f_arm_generic_rel = chromeos_factory.CbuildbotFactory(
    type='cbuildbot', params='arm-generic-full',
    dry_run=dry_run).get_factory()

f_arm_tegra2_rel = chromeos_factory.CbuildbotFactory(
    type='cbuildbot', params='arm-tegra2-full',
    dry_run=dry_run).get_factory()

f_x86_generic_rel = chromeos_factory.CbuildbotFactory(
    type='cbuildbot', params='x86-generic-full',
    dry_run=dry_run).get_factory()

f_arm_tegra2_seaboard_rel = chromeos_factory.CbuildbotFactory(
    type='cbuildbot', params='arm-tegra2-seaboard-full',
    dry_run=dry_run).get_factory()

f_x86_pineview_rel = chromeos_factory.CbuildbotFactory(
    type='cbuildbot', params='x86-pineview-full',
    dry_run=dry_run).get_factory()

# Pre-Flight Queue slaves.
f_arm_generic_bin = chromeos_factory.CbuildbotFactory(
    type='cbuildbot', params='arm-generic-bin',
    dry_run=dry_run).get_factory()

f_arm_tegra2_bin = chromeos_factory.CbuildbotFactory(
    type='cbuildbot', params='arm-tegra2-bin',
    dry_run=dry_run).get_factory()

f_x86_pineview_bin = chromeos_factory.CbuildbotFactory(
    type='cbuildbot', params='x86-pineview-bin',
    dry_run=dry_run).get_factory()

f_x86_generic_pre_flight_queue = chromeos_factory.CbuildbotFactory(
    type='cbuildbot',
    params='x86-generic-pre-flight-queue',
    is_master=True,
    dry_run=dry_run).get_factory()

f_x86_generic_tot_chrome_pre_flight_queue = \
    chromeos_factory.ChromeCbuildbotFactory(
        params='x86-generic-chrome-pre-flight-queue', is_master=False,
        chrome_rev_stages=['tot'],
        dry_run=dry_run).get_factory()

f_x86_generic_chrome_pre_flight_queue = chromeos_factory.ChromeCbuildbotFactory(
    params='x86-generic-chrome-pre-flight-queue', is_master=False,
    chrome_rev_stages=['latest_release'],
    dry_run=dry_run).get_factory()

# ----------------------------------------------------------------------------
# BUILDER DEFINITIONS

# The 'builders' list defines the Builders. Each one is configured with a
# dictionary, using the following keys:
#  name (required): the name used to describe this bilder
#  slavename (required): which slave to use, must appear in c['slaves']
#  builddir (required): which subdirectory to run the builder in
#  factory (required): a BuildFactory to define how the build is run
#  periodicBuildTime (optional): if set, force a build every N seconds
#  category (optional): it is not used in the normal 'buildbot' meaning. It is
#                       used by gatekeeper to determine which steps it should
#                       look for to close the tree.
#

b_arm_generic_bin = {
    'name': 'arm generic binary',
    'builddir': 'arm-generic-bin',
    'factory': f_arm_generic_bin,
    'category': '1release full|closer',
}

b_arm_generic_rel = {
    'name': 'arm generic full',
    'builddir': 'arm-generic-rel',
    'factory': f_arm_generic_rel,
    'category': '1release full|closer',
}

b_arm_tegra2_bin = {
    'name': 'arm tegra2 binary',
    'builddir': 'arm-tegra2-bin',
    'factory': f_arm_tegra2_bin,
    'category': '1release full|closer',
}

b_arm_tegra2_rel = {
    'name': 'arm tegra2 full',
    'builddir': 'arm-tegra2-rel',
    'factory': f_arm_tegra2_rel,
    'category': '1release full|closer',
}

b_arm_tegra2_seaboard_rel = {
    'name': 'arm tegra2 seaboard full',
    'builddir': 'arm-tegra2-seaboard-rel',
    'factory': f_arm_tegra2_seaboard_rel,
    'category': '1release full|closer',
}

b_x86_generic_rel = {
    'name': 'x86 generic full',
    'builddir': 'x86-generic-rel',
    'factory': f_x86_generic_rel,
    'category': '1release full|closer',
}

b_x86_pineview_bin = {
    'name': 'x86 pineview binary',
    'builddir': 'x86-pineview-bin',
    'factory': f_x86_pineview_bin,
    'category': '1release full|info',
}

b_x86_pineview_rel = {
    'name': 'x86 pineview full',
    'builddir': 'x86-pineview-rel',
    'factory': f_x86_pineview_rel,
    'category': '1release full|info',
}

b_x86_generic_pre_flight_queue = {
    'name': 'x86 generic pre flight queue',
    'builddir': 'x86-generic-pre-flight-queue',
    'factory': f_x86_generic_pre_flight_queue,
    'category': '1release full|closer',
    'auto_reboot': False,
}

b_x86_generic_tot_chrome_pre_flight_queue = {
    'name': 'x86 generic tot chrome pre flight queue',
    'builddir': 'x86-generic-tot-chrome-pre-flight-queue',
    'factory': f_x86_generic_tot_chrome_pre_flight_queue,
    'category': '1release full|info',
}

b_x86_generic_chrome_pre_flight_queue = {
    'name': 'x86 generic chrome pre flight queue',
    'builddir': 'x86-generic-chrome-pre-flight-queue',
    'factory': f_x86_generic_chrome_pre_flight_queue,
    'category': '1release full|closer',
}

c['builders'] = [
  b_x86_generic_rel,
  b_x86_pineview_bin,
  b_x86_pineview_rel,
  b_x86_generic_pre_flight_queue,
  b_arm_generic_bin,
  b_arm_generic_rel,
  b_arm_tegra2_bin,
  b_arm_tegra2_rel,
  b_arm_tegra2_seaboard_rel,
  b_x86_generic_tot_chrome_pre_flight_queue,
  b_x86_generic_chrome_pre_flight_queue,
]


####### BUILDSLAVES

# the 'slaves' list defines the set of allowable buildslaves. Each element is a
# tuple of bot-name and bot-password. These correspond to values given to the
# buildslave's mktap invocation.

# First, load the list from slaves.cfg.
slaves = slaves_list.SlavesList('slaves.cfg', 'ChromiumOS')

# Associate the slaves to the builders.
for builder in c['builders']:
  builder['slavenames'] = slaves.GetSlavesName(builder=builder['name'])
  # Don't enable auto_reboot for people testing locally.
  builder.setdefault('auto_reboot', ActiveMaster.is_production_host)

# The 'slaves' list defines the set of allowable buildslaves. List all the
# slaves registered to a builder. Remove dupes.
c['slaves'] = master_utils.AutoSetupSlaves(c['builders'],
                                           config.Master.GetBotPassword())


####### STATUS TARGETS

# Adds common status and tools to this master.
master_utils.AutoSetupMaster(c, ActiveMaster, order_console_by_time=True)

# Add more.

if TREE_GATE_KEEPER:
  from master import gatekeeper
  # This is the list of the builder categories and the corresponding critical
  # steps. If one critical step fails, gatekeeper will close the tree
  # automatically.
  # Note: don't include 'update scripts' since we can't do much about it when
  # it's failing and the tree is still technically fine.
  categories_steps = {
      'closer': [
          'update', 'configure build', 'setup mirrors', 'update chroot',
          'setup board', 'build packages', 'run tests',
          'build image', 'create qemu image', 'run smoke bvt', 'archived build',
          'cbuildbot', 'cbuildbot_master', 'cbuildbot_chrome_latest_release',
      ],
      'info': [
      ],
      '': [
      ],
  }
  exclusions = {}
  # TODO: convert GateKeeper to 'use_getname=True'
  # 1) set names for all steps in categories_steps
  # 2) update categories_steps to use names insteads of description
  # 3) change forgiving_steps to:
  #     forgiving_steps = ['update_scripts', 'update', 'archive_build']
  # 4) add 'use_getname=True' to the GateKeeper call
  forgiving_steps = ['update scripts', 'update', 'archived build']
  c['status'].append(gatekeeper.GateKeeper(
      fromaddr=ActiveMaster.from_address,
      categories_steps=categories_steps,
      exclusions=exclusions,
      relayhost=config.Master.smtp,
      subject='buildbot %(result)s in %(projectName)s on %(builder)s, '
              'revision %(revision)s',
      extraRecipients=ActiveMaster.tree_closing_notification_recipients,
      lookup=master_utils.FilterDomain(),
      forgiving_steps=forgiving_steps,
      tree_status_url=ActiveMaster.tree_status_url,
      check_revisions=False))

if GOOD_REVISIONS:
  # TODO: update for ChromeOS
  from master import goodrevisions
  # This is the list of builders with their respective list of critical steps
  # that all need to succeed to mark a revision as successful. A single failure
  # in any of the steps of any of the builders will mark the revision as failed.
  good_revision_steps = {
      'XP Tests (dbg)(2)': ['unit_tests'],
      'Mac10.5 Tests (dbg)(2)': ['unit_tests'],
      'Chromium Linux': ['unit_tests'],
    }
  c['status'].append(goodrevisions.GoodRevisions(
      good_revision_steps=good_revision_steps))


####### PROJECT IDENTITY

# Buildbot master url:
c['buildbotURL'] = 'http://build.chromium.org/buildbot/chromiumos/'
