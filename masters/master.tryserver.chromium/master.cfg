# -*- python -*-
# ex: set syntax=python:
# Copyright (c) 2011 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# READ THIS:
# See http://dev.chromium.org/developers/testing/chromium-build-infrastructure

# These modules come from scripts, which must be in the PYTHONPATH.
from master import master_utils
from master import slaves_list
from master import try_job_status_update
from master.builders_pools import BuildersPools
from master.factory import chromium_factory, chromeos_factory
from master.try_job_http import TryJobHTTP
from master.try_job_svn import TryJobSubversion

import config

ActiveMaster = config.Master.TryServer


STATUS_PUSH = False
MAIL_NOTIFIER = True
UPDATE_CODEREVIEW = ActiveMaster.is_production_host

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}


####### CHANGESOURCES

c['change_source'] = [ ]


####### BUILDERS

## FACTORIES

m_chromium_win = chromium_factory.ChromiumFactory(
    'src/build',
    target_platform='win32')

m_chromium_win_webkit = chromium_factory.ChromiumFactory(
    'src/webkit',
    target_platform='win32')

m_chromium_linux = chromium_factory.ChromiumFactory(
    'src/build',
    target_platform='linux2')

m_chromium_mac = chromium_factory.ChromiumFactory(
    'src/build',
    target_platform='darwin')

# Chromium for ChromiumOS
m_chromium_chromiumos = chromium_factory.ChromiumFactory(
    'src/build',
    target_platform='linux2')


def CreateBuilder(platform, builder_name, target, webkit=False,
                  tests=None, options=None, mode=None, timeout=2400,
                  slavebuilddir=None, extra_gyp_defines=None):
  """Generates and register a builder along with its slave(s)."""
  if platform not in ('win32', 'win64', 'linux', 'mac'):
    raise Exception(platform + ' is not an known os type')
  factory_properties = {}
  project = None
  if platform in ('win32', 'win64'):
    if webkit:
      factory = m_chromium_win_webkit
    else:
      factory = m_chromium_win
      project = 'all.sln'
      factory_properties['process_dumps'] = True
      factory_properties['gclient_env'] = { 'GYP_DEFINES' : 'fastbuild=1' }
      factory_properties['start_crash_handler'] = True
  elif platform == 'linux':
    factory = m_chromium_linux
    factory_properties['gclient_env'] = { 'GYP_DEFINES' : 'fastbuild=1' }
  elif platform == 'mac':
    factory = m_chromium_mac
    factory_properties['gclient_env'] = {
          'GYP_DEFINES' : 'fastbuild=1 enable_svg=0' }
  if extra_gyp_defines:
    factory_properties['gclient_env']['GYP_DEFINES'] += ' ' + extra_gyp_defines
  builder_factory = factory.ChromiumFactory(
      slave_type='Trybot', target=target, tests=tests, options=options,
      mode=mode, compile_timeout=timeout, project=project,
      factory_properties=factory_properties)
  builder_info = {
    'name': builder_name,
    'factory': builder_factory,
  }
  if slavebuilddir:
    builder_info['slavebuilddir'] = slavebuilddir
  return builder_info


# Try queues.
pools = BuildersPools('chrome')


# Linux builder
linux_tests = [
    'check_deps', 'base', 'net', 'googleurl', 'unit', 'ui',
    'browser_tests', 'test_shell', 'webkit_unit', 'media', 'printing',
    'remoting', 'nacl_ui', 'gpu', 'interactive_ui',
    'safe_browsing']
b_linux = CreateBuilder(platform='linux',
                        target='Debug',
                        tests=linux_tests,
                        builder_name='linux')
pools['chrome'].append('linux')

b_linux_rel = CreateBuilder(platform='linux',
                            target='Release',
                            tests=linux_tests,
                            builder_name='linux_rel',
                            slavebuilddir='linux')


# Mac builder
mac_tests = [
    'check_deps', 'base', 'net', 'googleurl', 'unit', 'ui',
    'browser_tests', 'test_shell', 'webkit_unit', 'media', 'printing',
    'remoting', 'nacl_ui', 'gpu', 'interactive_ui',
    'safe_browsing']
b_mac = CreateBuilder(platform='mac',
                      target='Debug',
                      tests=mac_tests,
                      builder_name='mac')
pools['chrome'].append('mac')

b_mac_rel = CreateBuilder(platform='mac',
                          target='Release',
                          tests=mac_tests,
                          builder_name='mac_rel',
                          slavebuilddir='mac')


# Windows builder
win_tests = [
    'check_deps', 'base', 'net', 'googleurl', 'unit', 'ui',
    'browser_tests', 'test_shell', 'webkit_unit', 'media',
    'chrome_frame_unittests', 'printing', 'remoting', 'nacl_ui',
    'gpu', 'installer', 'interactive_ui', 'safe_browsing']
b_win = CreateBuilder(target='Debug',
                      platform='win32',
                      tests=win_tests,
                      builder_name='win')
pools['chrome'].append('win')

b_win_rel = CreateBuilder(target='Release',
                          platform='win32',
                          tests=win_tests,
                          builder_name='win_rel',
                          slavebuilddir='win')


# TOOLKIT_VIEWS builder
b_view_linux = {
  'name': 'linux_view',
  'factory': m_chromium_chromiumos.ChromiumOSFactory(
      target='Debug',
      tests=['unit', 'base', 'net', 'googleurl', 'media',
             'ui', 'printing', 'remoting', 'browser_tests',
             'interactive_ui', 'safe_browsing', 'views',
            ],
      options=['app_unittests', 'base_unittests', 'browser_tests',
               'interactive_ui_tests', 'ipc_tests', 'googleurl_unittests',
               'media_unittests', 'net_unittests', 'printing_unittests',
               'remoting_unittests', 'safe_browsing_tests', 'sync_unit_tests',
               'ui_tests', 'unit_tests', 'views_unittests', 'gfx_unittests',
              ],
      factory_properties={
        'gclient_env': {'GYP_DEFINES': 'toolkit_views=1 fastbuild=1'}})
}

# Chromium for ChromiumOS
b_chromium_chromiumos = {
  'name': 'linux_chromeos',
  'factory': m_chromium_chromiumos.ChromiumOSFactory(
      target='Debug',
      tests=['unit', 'base', 'net', 'googleurl', 'media',
             'ui', 'printing', 'remoting', 'browser_tests',
             'interactive_ui', 'safe_browsing'
            ],
      options=['chromeos_builder'],
      factory_properties={
        'gclient_env': {'GYP_DEFINES': 'chromeos=1 fastbuild=1'}})
}

# 32 bits tools can't link libwebcore.a anymore due to lack of virtual address
# space, including OSX 10.5.
valgrind_gyp_defines = (
    chromium_factory.ChromiumFactory.MEMORY_TOOLS_GYP_DEFINES + ' enable_svg=0')

b_valgrind_linux = {
  'name': 'linux_valgrind',
  'factory': m_chromium_linux.ChromiumFactory(
      target='Release',
      options=['app_unittests',
               'base_unittests',
               'googleurl_unittests',
               'ipc_tests',
               'media_unittests',
               'net_unittests',
               'gfx_unittests',
               'printing_unittests',
               'remoting_unittests',
               'safe_browsing_tests',
               'unit_tests',
               'test_shell_tests',
               'DumpRenderTree',
             ],
      tests=['valgrind_app',
             'valgrind_base',
             'valgrind_googleurl',
             'valgrind_ipc',
             'valgrind_media',
             'valgrind_net',
             'valgrind_printing',
             'valgrind_remoting',
             'valgrind_safe_browsing',
             'valgrind_unit',
             'valgrind_test_shell',
            ],
      factory_properties={
        'needs_valgrind' : True,
        'gclient_env': {
          'GYP_DEFINES' : valgrind_gyp_defines + ' target_arch=ia32'
        }
      }
  ),
}

b_valgrind_mac = {
  'name': 'mac_valgrind',
  'factory': m_chromium_mac.ChromiumFactory(
      target='Debug',
      # This trybot will build every build target. We can speed up the build
      # for Valgrind by building only what we really need if/when we want to.
      # See http://crbug.com/42298
      tests=['valgrind_app',
             'valgrind_base',
             'valgrind_googleurl',
             'valgrind_ipc',
             'valgrind_media',
             'valgrind_net',
             'valgrind_printing',
             'valgrind_remoting',
             'valgrind_safe_browsing',
             'valgrind_unit',
             'valgrind_test_shell',
            ],
      factory_properties={
        'needs_valgrind' : True,
        'gclient_env': { 'GYP_DEFINES' : valgrind_gyp_defines}}),
}

b_chromium_chromiumos_valgrind = {
  'name': 'linux_chromeos_valgrind',
  'factory': m_chromium_chromiumos.ChromiumOSFactory(
      target='Release',
      options=['app_unittests',
               'base_unittests',
               'googleurl_unittests',
               'ipc_tests',
               'media_unittests',
               'net_unittests',
               'gfx_unittests',
               'printing_unittests',
               'remoting_unittests',
               'safe_browsing_tests',
               'unit_tests',
             ],
      tests=['valgrind_app',
             'valgrind_base',
             'valgrind_googleurl',
             'valgrind_ipc',
             'valgrind_media',
             'valgrind_net',
             'valgrind_printing',
             'valgrind_remoting',
             'valgrind_safe_browsing',
             'valgrind_unit',
            ],
      factory_properties={
        'needs_valgrind' : True,
        'gclient_env': {
          'GYP_DEFINES' : valgrind_gyp_defines + ' target_arch=ia32 chromeos=1'
        }
      }
  ),
}

b_tsan_linux = {
  'name': 'linux_tsan',
  # Reuse the directory.
  'slavebuilddir': 'linux_valgrind',
  'factory': m_chromium_linux.ChromiumFactory(
      target='Release',
      options=['app_unittests',
               'base_unittests',
               'googleurl_unittests',
               'ipc_tests',
               'media_unittests',
               'net_unittests',
               'gfx_unittests',
               'printing_unittests',
               'remoting_unittests',
               'unit_tests',
             ],
      tests=['tsan_app',
             'tsan_base',
             'tsan_googleurl',
             'tsan_ipc',
             'tsan_media',
             'tsan_net',
             'tsan_printing',
             'tsan_remoting',
             'tsan_unit',
            ],
      factory_properties={
        'needs_valgrind' : True,
        'gclient_env': {
          'GYP_DEFINES' : valgrind_gyp_defines + ' target_arch=ia32'
        }
      }
  ),
}

# Linux coverage builder
GYP_DEFINES_FOR_COVERAGE = ('coverage=1 '
                            'fastbuild=1 '
                            'enable_svg=0 ')

b_coverage_linux = {
  'name': 'linux_coverage',
  'factory': m_chromium_linux.ChromiumFactory(
      target='Debug',
      clobber=False,
      options=['coverage_build'],
      tests=['run_coverage_bundles', 'process_coverage'],
      factory_properties={
        'gclient_env': { 'GYP_DEFINES' : GYP_DEFINES_FOR_COVERAGE},
        'perf_id': 'chromium-dbg-linux-try',
        'use_build_number': True,
      }),
}

# WebKit Layout builders
b_linux_layout = {
  'name': 'linux_layout',
  'slavebuilddir': 'linux_layout',
  'factory': m_chromium_linux.ChromiumFactory(
      target='Debug',
      tests=['test_shell', 'webkit_unit', 'webkit', 'webkit_gpu'],
      options=['test_shell', 'test_shell_tests', 'webkit_unit_tests',
               'DumpRenderTree']),
}
b_linux_layout_rel = {
  'name': 'linux_layout_rel',
  # Reuse the directory.
  'slavebuilddir': 'linux_layout',
  'factory': m_chromium_linux.ChromiumFactory(
      target='Release',
      tests=['test_shell', 'webkit_unit', 'webkit', 'webkit_gpu'],
      options=['test_shell', 'test_shell_tests', 'webkit_unit_tests',
               'DumpRenderTree']),
}

b_mac_layout = {
  'name': 'mac_layout',
  'slavebuilddir': 'mac_layout',
  'factory': m_chromium_mac.ChromiumFactory(
      target='Debug',
      tests=['test_shell', 'webkit_unit', 'webkit', 'webkit_gpu'],
      options=['--', '-project', '../webkit/webkit.xcodeproj']),
}
b_mac_layout_rel = {
  'name': 'mac_layout_rel',
  # Reuse the directory.
  'slavebuilddir': 'mac_layout',
  'factory': m_chromium_mac.ChromiumFactory(
      target='Release',
      tests=['test_shell', 'webkit_unit', 'webkit', 'webkit_gpu'],
      options=['--', '-project', '../webkit/webkit.xcodeproj']),
}

b_win_layout = {
  'name': 'win_layout',
  'slavebuilddir': 'win_layout',
  'factory': m_chromium_win_webkit.ChromiumFactory(
      target='Debug',
      tests=['test_shell', 'webkit_unit', 'webkit', 'webkit_gpu'])
}
b_win_layout_rel = {
  'name': 'win_layout_rel',
  # Reuse the directory.
  'slavebuilddir': 'win_layout',
  'factory': m_chromium_win_webkit.ChromiumFactory(
      target='Release',
      tests=['test_shell', 'webkit_unit', 'webkit', 'webkit_gpu'])
}
b_win_layout_7 = {
  'name': 'win_layout_7',
  'factory': m_chromium_win_webkit.ChromiumFactory(
      target='Debug',
      tests=['test_shell', 'webkit_unit', 'webkit', 'webkit_gpu'])
}


# Sync builders
b_linux_sync = CreateBuilder(
    platform='linux',
    target='Debug',
    tests=['sync_integration'],
    builder_name='linux_sync',
    slavebuilddir='linux')
b_mac_sync = CreateBuilder(
    platform='mac',
    target='Debug',
    tests=['sync_integration'],
    builder_name='mac_sync',
    slavebuilddir='mac')
b_win_sync = CreateBuilder(
    platform='win32',
    target='Debug',
    tests=['sync_integration'],
    builder_name='win_sync',
    slavebuilddir='win')

# Clang builders
b_linux_clang = CreateBuilder(
    platform='linux',
    target='Debug',
    options=['--build-tool=make', '--compiler=clang'],
    tests=[],
    extra_gyp_defines='clang=1 clang_use_chrome_plugins=1',
    builder_name='linux_clang')

b_mac_clang = CreateBuilder(
    platform='mac',
    target='Debug',
    options=['--compiler=clang'],
    tests=[],
    extra_gyp_defines='clang=1 clang_use_chrome_plugins=1',
    builder_name='mac_clang')

# Touch builder(s)
b_linux_touch = CreateBuilder(
    platform='linux',
    target='Debug',
    options=[],
    tests=[],
    extra_gyp_defines='touchui=1',
    builder_name='linux_touch')


c['builders'] = [
  b_linux, b_mac, b_win,
  b_view_linux, b_chromium_chromiumos,
  b_valgrind_linux, b_valgrind_mac,
  b_chromium_chromiumos_valgrind, b_tsan_linux,
  b_linux_layout, b_mac_layout, b_win_layout, b_win_layout_7,
  b_linux_rel, b_mac_rel, b_win_rel,
  b_linux_layout_rel, b_mac_layout_rel, b_win_layout_rel,
  b_coverage_linux,
  b_linux_sync, b_mac_sync, b_win_sync,
  b_linux_clang,
  b_mac_clang,
  b_linux_touch,
]


# Slaves are loaded from slaves.cfg.
slaves = slaves_list.SlavesList('slaves.cfg', 'TryServer')

# Associate the slaves to the builders. The configuration is in slaves.cfg.
for builder in c['builders']:
  builder['slavenames'] = slaves.GetSlavesName(builder=builder['name'])
  # Don't enable auto_reboot for people testing locally.
  builder['auto_reboot'] = ActiveMaster.is_production_host


####### BUILDSLAVES

# The 'slaves' list defines the set of allowable buildslaves. List all the
# slaves registered to a builder. Remove dupes.
c['slaves'] = master_utils.AutoSetupSlaves(c['builders'],
                                           config.Master.GetBotPassword())

# Make sure everything works together.
master_utils.VerifySetup(c, slaves)


####### SCHEDULERS

# Configure the Schedulers;
# Main Tryscheduler for the try queue. groups is defined in the loop above.
c['schedulers'] = []

last_good_urls = {'chrome': ActiveMaster.last_good_url}
code_review_sites = {'chrome': ActiveMaster.code_review_site}

c['schedulers'].append(TryJobHTTP(
      name='try_job_http',
      port=ActiveMaster.try_job_port,
      last_good_urls=last_good_urls,
      code_review_sites=code_review_sites,
      pools=pools))

if ActiveMaster.svn_url and ActiveMaster.is_production_host:
  c['schedulers'].append(TryJobSubversion(
      name='try_job_svn',
      svn_url=ActiveMaster.svn_url,
      last_good_urls=last_good_urls,
      code_review_sites=code_review_sites,
      pools=pools))


####### STATUS TARGETS

# Adds common status and tools to this master.
# Use our own mail notifier.
master_utils.AutoSetupMaster(c, ActiveMaster, False)

if STATUS_PUSH:
  from master.status_push import HttpStatusPush
  c['status'].append(HttpStatusPush(
      'http://craebuild.appspot.com/status-listener'))

if MAIL_NOTIFIER:
  # Add a dumb MailNotifier first so it will be used for BuildSlave with
  # notify_on_missing set when they go missing.
  from buildbot.status import mail
  c['status'].append(mail.MailNotifier(
      fromaddr=ActiveMaster.from_address,
      builders=[],
      relayhost=config.Master.smtp,
      lookup=master_utils.FilterDomain()))

  # Try job result emails.
  from master.try_mail_notifier import TryMailNotifier
  c['status'].append(TryMailNotifier(
      fromaddr=ActiveMaster.from_address,
      subject="try %(result)s for %(reason)s on %(builder)s @ r%(revision)s",
      mode='all',
      relayhost=config.Master.smtp,
      lookup=master_utils.FilterDomain()))

if UPDATE_CODEREVIEW:
  c['status'].append(try_job_status_update.TryJobStatusUpdate(None))


# Keep last try jobs, the default is too low. Must keep at least a few days
# worth of try jobs.
c['buildHorizon'] = 3000
c['logHorizon'] = 3000
# Must be at least 2x the number of slaves.
c['eventHorizon'] = 200
# Must be at least 2x the number of on-going builds.
c['buildCacheSize'] = 200
c['logCompressionLimit'] = False


# Hack buildbot so the Stop build button doesn't work anymore. Otherwise it's
# just a pain, user misuse this button all the time.
def hack_stop(function):
  def hook(*args, **kwargs):
    result = function(*args, **kwargs)
    result = result.replace('<input type="submit" value="Stop',
        '<input type="button" onclick="alert(\''
        'For more information, visit '
        'http://dev.chromium.org/developers/try-server-usage'
        '\');"'
        ' value="Stop')
    return result
  return hook

# Only do the hack_stop if we are the production master.  This allows
# us to keep the STOP button live for local/test instances.
if ActiveMaster.is_production_host:
  from buildbot.status.web.builder import StatusResourceBuilder
  StatusResourceBuilder.build_line = hack_stop(StatusResourceBuilder.build_line)
  from buildbot.status.web import base
  base.make_stop_form = hack_stop(base.make_stop_form)


####### PROJECT IDENTITY

# The 'projectURL' string will be used to provide a link
# from buildbot HTML pages to your project's home page.
c['projectURL'] = 'http://dev.chromium.org/developers/testing/try-server-usage'

# Buildbot master url:
c['buildbotURL'] = 'http://build.chromium.org/p/tryserver.chromium/'

# vi: set ts=4 sts=2 sw=2 et:
