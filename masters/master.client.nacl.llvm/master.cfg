# -*- python -*-
# ex: set syntax=python:

# Copyright (c) 2011 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# This is the buildmaster config file for the 'nacl' bot. It must
# be installed as 'master.cfg' in your buildmaster's base directory
# (although the filename can be changed with the --basedir option to
# 'mktap buildbot master').

# It has one job: define a dictionary named BuildmasterConfig. This
# dictionary has a variety of keys to control different aspects of the
# buildmaster. They are documented in docs/config.xhtml .

# This file follows this naming convention:
# Factories: f_nacl_[dbg/opt/sdk]_[os]
# Builders:  b_nacl_[dbg/opt/sdk]_[os]
# BuildDir:  [dbg/opt/sdk]-[os]
#
# os = xp/linux/mac


import time


from buildbot import locks
from buildbot.changes import svnpoller
from buildbot.scheduler import Scheduler
from buildbot.scheduler import Triggerable
from buildbot.status.web import console

from master import master_utils
from master import slaves_list
from master.factory import nacl_factory
from master.factory import gclient_factory

import config


# -------- MONKEY PATCHING functions from console.py in third_party buildbot.
# Done to add:
#   - Increase console history to 200 revisions (instead of 40).
#   - Ignore got_revision for the purpose of console sorting (not accurate for
#   this waterfall).


def getBuildsForRevision(self, request, builder, builderName, lastRevision,
                         numBuilds, debugInfo):
    """Return the list of all the builds for a given builder that we will
    need to be able to display the console page. We start by the most recent
    build, and we go down until we find a build that was built prior to the
    last change we are interested in."""

    revision = lastRevision
    cachedRevision = self.cache.getRevision(builderName)
    if cachedRevision and cachedRevision > lastRevision:
        revision = cachedRevision

    builds = []
    build = self.getHeadBuild(builder)
    number = 0
    while build and number < numBuilds:
        debugInfo["builds_scanned"] += 1
        number += 1

        # CHANGED WAS HERE:
        # Dropped got_revision as a source for got_rev.
        got_rev = -1

        # Get the last revision in this build.
        try:
            if got_rev == -1:
               got_rev = build.getProperty("trigger_by_revision")
            if not self.comparator.isValidRevision(got_rev):
                got_rev = -1
        except:
            pass
        try:
            if got_rev == -1:
               got_rev = build.getProperty("revision")
            if not self.comparator.isValidRevision(got_rev):
                got_rev = -1
        except:
            pass

        # We ignore all builds that don't have last revisions.
        # TODO(nsylvain): If the build is over, maybe it was a problem
        # with the update source step. We need to find a way to tell the
        # user that his change might have broken the source update.
        if got_rev and got_rev != -1:
            details = self.getBuildDetails(request, builderName, build)
            devBuild = console.DevBuild(got_rev, build.getResults(),
                                         console.getInProgressResults(build),
                                         build.getNumber(),
                                         build.isFinished(),
                                         build.getText(),
                                         build.getETA(),
                                         details,
                                         build.getTimes()[0])

            builds.append(devBuild)

            # Now break if we have enough builds.
            if self.comparator.getSortingKey() == "when":
                current_revision = self.getChangeForBuild(
                    builder.getBuild(-1), revision)
                if self.comparator.isRevisionEarlier(
                    devBuild, current_revision):
                    break
            else:
                if int(got_rev) < int(revision):
                    break;


        build = build.getPreviousBuild()

    return builds


def body(self, request):
    "This method builds the main console view display."

    # Debug information to display at the end of the page.
    debugInfo = dict()
    debugInfo["load_time"] = time.time()

    # get url parameters
    # Categories to show information for.
    categories = request.args.get("category", [])
    # List of all builders to show on the page.
    builders = request.args.get("builder", [])
    # Branch used to filter the changes shown.
    branch = request.args.get("branch", [console.ANYBRANCH])[0]
    # List of all the committers name to display on the page.
    devName = request.args.get("name", [])
    # json format.
    jsonFormat = request.args.get("json", [False])[0]


    # and the data we want to render
    status = self.getStatus(request)

    projectURL = status.getProjectURL()
    projectName = status.getProjectName()

    # Get all revisions we can find.
    source = self.getChangemaster(request)
    allChanges = self.getAllChanges(source, status, debugInfo)

    debugInfo["source_all"] = len(allChanges)

    # Keep only the revisions we care about.
    # By default we process the last 40 revisions.
    # If a dev name is passed, we look for the changes by this person in the
    # last 160 revisions.
    # CHANGED!!!:
    #   Switched from 40 to 200.
    numRevs = 200
    if devName:
      numRevs *= 4
    numBuilds = numRevs


    revisions = self.stripRevisions(allChanges, numRevs, branch, devName)
    debugInfo["revision_final"] = len(revisions)

    # Fetch all the builds for all builders until we get the next build
    # after lastRevision.
    builderList = None
    allBuilds = None
    if revisions:
        lastRevision = revisions[len(revisions)-1].revision
        debugInfo["last_revision"] = lastRevision

        (builderList, allBuilds) = self.getAllBuildsForRevision(status,
                                            request,
                                            lastRevision,
                                            numBuilds,
                                            categories,
                                            builders,
                                            debugInfo)

    tempCache = console.TemporaryCache()
    debugInfo["added_blocks"] = 0
    debugInfo["from_cache"] = 0

    data = ""

    if request.args.get("display_cache", None):
        data += "<br>Global Cache"
        data += self.cache.display()
        data += "<br>Temporary Cache"
        data += tempCache.display()

    if (jsonFormat and int(jsonFormat) == 1):
        revisions = revisions[0:1]
    data += self.displayPage(request, status, builderList, allBuilds,
                            revisions, categories, branch, tempCache,
                            debugInfo, jsonFormat)

    if not devName and branch == console.ANYBRANCH and not categories and not jsonFormat:
      tempCache.updateGlobalCache(self.cache)
      self.cache.trim()

    return data


# Monkey patch console.
console.ConsoleStatusResource.getBuildsForRevision = getBuildsForRevision
console.ConsoleStatusResource.body = body


ActiveMaster = config.Master.NativeClientLLVM

TREE_GATE_KEEPER = ActiveMaster.is_production_host

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

# 'slavePortnum' defines the TCP port to listen on. This must match the value
# configured into the buildslaves (with their --master option)
c['slavePortnum'] = ActiveMaster.slave_port


####### CHANGESOURCES

# the 'change_source' list tells the buildmaster how it should find out about
# source code changes. Any class which implements IChangeSource can be added
# to this list: there are several in buildbot/changes/*.py to choose from.
def NativeClientTreeFileSplitter(path):
  return ('llvm', path)


c['change_source'] = []

for repo in [
  'llvm',
  'cfe',
  'dragonegg',
  'llvm-gcc-4.2',
]:
  poller = svnpoller.SVNPoller(
      svnurl='http://llvm.org/svn/llvm-project/%s/trunk' % repo,
      split_file=NativeClientTreeFileSplitter,
      revlinktmpl='http://llvm.org/viewvc/llvm-project?view=rev&revision=%s',
      pollinterval=10)
  c['change_source'].append(poller)


####### BUILDERS

# buildbot/process/factory.py provides several BuildFactory classes you can
# start with, which implement build processes for common targets (GNU
# autoconf projects, CPAN perl modules, etc). The factory.BuildFactory is the
# base class, and is configured with a series of BuildSteps. When the build
# is run, the appropriate buildslave is told to execute each Step in turn.

# the first BuildStep is typically responsible for obtaining a copy of the
# sources. There are source-obtaining Steps in buildbot/process/step.py for
# CVS, SVN, and others.


# ----------------------------------------------------------------------------
# FACTORIES

m_linux = nacl_factory.NativeClientFactory(
    build_dir='native_client', target_platform='linux2', use_supplement=True,
)


# Some shortcut to simplify the code below.
F_LINUX = m_linux.NativeClientFactory


# The identifier of the factory is the build configuration. If two factories
# are using the same build configuration, they should have the same identifier.

factories = []

# Linux
factories.append(['llvm', '1llvm', F_LINUX()])


####### SCHEDULERS
## configure the Schedulers
# Main scheduler for all changes in trunk.
primary_builders = []
for f in factories:
  primary_builders.append(f[0])
s_nacl = Scheduler(
   name='nacl',
   branch='llvm',
   treeStableTimer=0,
   builderNames=['llvm'],
)

c['schedulers'] = [
    s_nacl,
]



# Setup a per slave lock to prevent more than one thing running at once on
# a single slave.
slave_lock = locks.SlaveLock('overload_lock', maxCount=1)



# ----------------------------------------------------------------------------
# BUILDER DEFINITIONS

# The 'builders' list defines the Builders. Each one is configured with a
# dictionary, using the following keys:
#  name (required): the name used to describe this bilder
#  slavename (required): which slave to use, must appear in c['slaves']
#  builddir (required): which subdirectory to run the builder in
#  factory (required): a BuildFactory to define how the build is run
#  periodicBuildTime (optional): if set, force a build every N seconds
#  category (optional): it is not used in the normal 'buildbot' meaning. It is
#                       used by gatekeeper to determine which steps it should
#                       look for to close the tree.
#

c['builders'] = []
slaves = slaves_list.SlavesList('slaves.cfg', 'NativeClientLLVM')
for f in factories:
  c['builders'].append({
      'name': f[0],
      'slavenames': slaves.GetSlavesName(builder=f[0]),
      'builddir': f[0],
      'factory': f[2],
      'category': '%s' % f[1],
      'locks': [slave_lock],
      'auto_reboot': False,
  })


####### BUILDSLAVES

# The 'slaves' list defines the set of allowable buildslaves. List all the
# slaves registered to a builder. Remove dupes.
c['slaves'] = master_utils.AutoSetupSlaves(c['builders'],
                                           config.Master.GetBotPassword())

# Make sure everything works together.
master_utils.VerifySetup(c, slaves)


####### STATUS TARGETS

# Adds common status and tools to this master.
master_utils.AutoSetupMaster(c, ActiveMaster,
                             public_html='../master.client.nacl/public_html')

# Add more.

if TREE_GATE_KEEPER:
  from master import gatekeeper
  # This is the list of the builder categories and the corresponding critical
  # steps. If one critical step fails, gatekeeper will close the tree
  # automatically.
  categories_steps = {
      '': [
           'update scripts', 'update',
           'clobber', 'clobber_packages',
      ],
      'info': [],
      'closer': [
           'update scripts', 'update',
           'clobber', 'clobber_packages', 'precompile', 'scons_compile',
           'gyp_compile', 'gyp_tests', 'build_packages',
           'cooking_tarball', 'selenium',
           'small_tests', 'medium_tests', 'large_tests',
           'hand_tests', 'smoke_tests',
           'backup_plugin', 'install_plugin', 'start_vncserver',
           'stop_vncserver', 'restore_plugin',
           'archived_build', 'extract_archive', 'setting_acls',
      ],
  }
  exclusions = { }
  forgiving_steps = ['update scripts', 'update', 'svnkill', 'taskkill',
                     'archived_build', 'extract_archive', 'setting_acls'],
  c['status'].append(gatekeeper.GateKeeper(
      fromaddr=ActiveMaster.from_address,
      categories_steps=categories_steps,
      exclusions=exclusions,
      relayhost=config.Master.smtp,
      subject='buildbot %(result)s in %(projectName)s on %(builder)s, '
              'revision %(revision)s',
      extraRecipients=ActiveMaster.tree_closing_notification_recipients,
      tree_status_url=ActiveMaster.tree_status_url,
      lookup='google.com',
      forgiving_steps=forgiving_steps))


####### PROJECT IDENTITY

# the 'projectName' string will be used to describe the project that this
# buildbot is working on. For example, it is used as the title of the
# waterfall HTML page. The 'projectURL' string will be used to provide a link
# from buildbot HTML pages to your project's home page.

c['projectName'] = ActiveMaster.project_name
c['projectURL'] = config.Master.project_url

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.Waterfall page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = 'http://build.chromium.org/p/client.nacl.llvm/'
