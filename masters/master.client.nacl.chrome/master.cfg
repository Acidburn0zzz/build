# -*- python -*-
# ex: set syntax=python:

# Copyright (c) 2011 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# This is the buildmaster config file for the 'nacl' bot. It must
# be installed as 'master.cfg' in your buildmaster's base directory
# (although the filename can be changed with the --basedir option to
# 'mktap buildbot master').

# It has one job: define a dictionary named BuildmasterConfig. This
# dictionary has a variety of keys to control different aspects of the
# buildmaster. They are documented in docs/config.xhtml .

# This file follows this naming convention:
# Factories: f_nacl_[dbg/opt/sdk]_[os]
# Builders:  b_nacl_[dbg/opt/sdk]_[os]
# BuildDir:  [dbg/opt/sdk]-[os]
#
# os = xp/linux/mac

from buildbot.changes import svnpoller
from buildbot.scheduler import Scheduler

from master import master_utils
from master import slaves_list
from master.factory import chromium_factory

import config

ActiveMaster = config.Master.NativeClientChrome

TREE_GATE_KEEPER = ActiveMaster.is_production_host
GOOD_REVISIONS = False

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}


####### CHANGESOURCES

# the 'change_source' list tells the buildmaster how it should find out about
# source code changes. Any class which implements IChangeSource can be added
# to this list: there are several in buildbot/changes/*.py to choose from.
def NativeClientTreeFileSplitter(path):
  projects = ['native_client']
  for p in projects:
    if path.startswith(p + '/'):
      return (p, path[len(p)+1:])
  return None

# Polls config.Master.nacl_trunk_url for changes
trunk_poller = svnpoller.SVNPoller(
  svnurl=config.Master.nacl_trunk_url + '/src',
  split_file=NativeClientTreeFileSplitter,
  pollinterval=10)

c['change_source'] = [trunk_poller]


####### BUILDERS

# buildbot/process/factory.py provides several BuildFactory classes you can
# start with, which implement build processes for common targets (GNU
# autoconf projects, CPAN perl modules, etc). The factory.BuildFactory is the
# base class, and is configured with a series of BuildSteps. When the build
# is run, the appropriate buildslave is told to execute each Step in turn.

# the first BuildStep is typically responsible for obtaining a copy of the
# sources. There are source-obtaining Steps in buildbot/process/step.py for
# CVS, SVN, and others.


# ----------------------------------------------------------------------------
# FACTORIES

# NOTE: we end up having a separate m_win64_ch because unfortunately
#    ChromiumNativeClientLatestFactory mutates in a non-idempotent way.
m_win_ch = chromium_factory.ChromiumFactory('src/build', 'win32')
m_win64_ch = chromium_factory.ChromiumFactory('src/build', 'win32')
m_linux_ch = chromium_factory.ChromiumFactory('src/build', 'linux2')
m_mac_ch = chromium_factory.ChromiumFactory('src/build', 'darwin')

# Some shortcut to simplify the code below.
F_WIN_CH = m_win_ch.ChromiumNativeClientLatestFactory
F_WIN64_CH = m_win64_ch.ChromiumNativeClientLatestFactory
F_LINUX_CH = m_linux_ch.ChromiumNativeClientLatestFactory
F_MAC_CH = m_mac_ch.ChromiumNativeClientLatestFactory


# The identifier of the factory is the build configuration. If two factories
# are using the same build configuration, they should have the same identifier.

# BuilderTesters using a custom build configuration.
factories = []

# Add Chromium integration factories.
factories.append(['xp-nacl-chrome', '1Integration|info', F_WIN_CH(
    compile_timeout=2400,
    project='all.sln;chromium_builder_tests',
    clobber=False,
    tests=['unit', 'nacl_ui', 'nacl_integration', 'nacl_sandbox'],
    factory_properties={'disable_mini_installer_test': True})
])
factories.append(['win64-nacl-chrome', '1Integration|info', F_WIN64_CH(
    compile_timeout=2400,
    project='all.sln;chromium_builder_tests',
    clobber=False,
    tests=['unit', 'nacl_ui', 'nacl_integration', 'nacl_sandbox'],
    factory_properties={'disable_mini_installer_test': True})
])
factories.append(['mac-nacl-chrome', '1Integration|info', F_MAC_CH(
    clobber=False,
    tests=['unit', 'nacl_ui', 'nacl_integration', 'nacl_sandbox'],
    factory_properties={})
])
factories.append(['hardy64-nacl-chrome', '1Integration|info', F_LINUX_CH(
    clobber=False,
    tests=['unit', 'nacl_ui', 'nacl_integration', 'nacl_sandbox'],
    options=['--build-tool=make', 'all'],
    factory_properties={
        'gclient_env': {'GYP_GENERATORS' : 'make'}})
])



####### SCHEDULERS
## configure the Schedulers
# Main scheduler for all changes in trunk.
primary_builders = []
for f in factories:
  primary_builders.append(f[0])
s_nacl = Scheduler(
   name='nacl',
   branch='native_client',
   treeStableTimer=60,
   builderNames=primary_builders,
)
c['schedulers'] = [
    s_nacl,
]


# ----------------------------------------------------------------------------
# BUILDER DEFINITIONS

# The 'builders' list defines the Builders. Each one is configured with a
# dictionary, using the following keys:
#  name (required): the name used to describe this bilder
#  slavename (required): which slave to use, must appear in c['slaves']
#  builddir (required): which subdirectory to run the builder in
#  factory (required): a BuildFactory to define how the build is run
#  periodicBuildTime (optional): if set, force a build every N seconds
#  category (optional): it is not used in the normal 'buildbot' meaning. It is
#                       used by gatekeeper to determine which steps it should
#                       look for to close the tree.
#

c['builders'] = []
slaves = slaves_list.SlavesList('slaves.cfg', 'NativeClientChrome')
for f in factories:
  c['builders'].append({
      'name': f[0],
      'slavenames': slaves.GetSlavesName(builder=f[0]),
      'builddir': f[0],
      'factory': f[2],
      'category': '%s' % f[1],
      # Don't enable auto_reboot for people testing locally.
      'auto_reboot': ActiveMaster.is_production_host,
  })
  if f[0] == 'xp-m32-n32-sdk':
    c['builders'][-1]['max_builds'] = 2


####### BUILDSLAVES

# The 'slaves' list defines the set of allowable buildslaves. List all the
# slaves registered to a builder. Remove dupes.
c['slaves'] = master_utils.AutoSetupSlaves(c['builders'],
                                           config.Master.GetBotPassword())

# Make sure everything works together.
master_utils.VerifySetup(c, slaves)


####### STATUS TARGETS

# Adds common status and tools to this master.
master_utils.AutoSetupMaster(c, ActiveMaster)

# Add more.

if TREE_GATE_KEEPER:
  from master import gatekeeper
  # This is the list of the builder categories and the corresponding critical
  # steps. If one critical step fails, gatekeeper will close the tree
  # automatically.
  categories_steps = {
      '': [
           'update scripts', 'update',
           'clobber', 'clobber_packages',
      ],
      'info': [],
      'closer': [
           'update scripts', 'update',
           'clobber', 'clobber_packages', 'precompile', 'compile',
           'scons_compile', 'gyp_compile', 'build_packages',
           'cooking_tarball', 'selenium',
           'small_tests', 'medium_tests', 'large_tests',
           'hand_tests', 'smoke_tests',
           'backup_plugin', 'install_plugin', 'start_vncserver',
           'stop_vncserver', 'restore_plugin'],
  }
  exclusions = { }
  forgiving_steps = ['update scripts', 'update', 'svnkill', 'taskkill',
                     'archived build']
  c['status'].append(gatekeeper.GateKeeper(
      fromaddr=ActiveMaster.from_address,
      categories_steps=categories_steps,
      exclusions=exclusions,
      relayhost=config.Master.smtp,
      subject='buildbot %(result)s in %(projectName)s on %(builder)s, '
              'revision %(revision)s',
      extraRecipients=ActiveMaster.tree_closing_notification_recipients,
      tree_status_url=ActiveMaster.tree_status_url,
      lookup=master_utils.FilterDomain(),
      forgiving_steps=forgiving_steps))

if GOOD_REVISIONS:
  from master import goodrevisions
  # This is the list of builders with their respective list of critical steps
  # that all need to succeed to mark a revision as successful. A single failure
  # in any of the steps of any of the builders will mark the revision as failed.
  all_steps = [
    'update',
    'compile',
    'small_tests',
    'medium_tests',
    'large_tests',
  ]
  c['status'].append(goodrevisions.GoodRevisions(
      good_revision_steps={'': all_steps},
      store_revisions_url=ActiveMaster.store_revisions_url))


####### PROJECT IDENTITY

# Buildbot master url:
c['buildbotURL'] = 'http://build.chromium.org/p/client.nacl.chrome/'
