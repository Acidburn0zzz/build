# -*- python -*-
# ex: set syntax=python:

# Copyright (c) 2011 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# This is the buildmaster config file for the 'nacl' bot. It must
# be installed as 'master.cfg' in your buildmaster's base directory
# (although the filename can be changed with the --basedir option to
# 'mktap buildbot master').

# It has one job: define a dictionary named BuildmasterConfig. This
# dictionary has a variety of keys to control different aspects of the
# buildmaster. They are documented in docs/config.xhtml .

# This file follows this naming convention:
# Factories: f_nacl_[dbg/opt/sdk]_[os]
# Builders:  b_nacl_[dbg/opt/sdk]_[os]
# BuildDir:  [dbg/opt/sdk]-[os]
#
# os = xp/linux/mac

from buildbot import locks
from buildbot.changes import svnpoller
from buildbot.scheduler import Scheduler
from buildbot.scheduler import Triggerable

from master import build_utils
from master import slaves_list
from master import master_utils
from master.factory import nacl_factory


import config

ActiveMaster = config.Master.NativeClient

TREE_GATE_KEEPER = ActiveMaster.is_production_host
GOOD_REVISIONS = ActiveMaster.is_production_host

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}


####### CHANGESOURCES

# the 'change_source' list tells the buildmaster how it should find out about
# source code changes. Any class which implements IChangeSource can be added
# to this list: there are several in buildbot/changes/*.py to choose from.
def NativeClientTreeFileSplitter(path):
  projects = ['native_client']
  for p in projects:
    if path.startswith(p + '/'):
      return (p, path[len(p)+1:])
  return None

# Polls config.Master.nacl_trunk_url for changes
trunk_poller = svnpoller.SVNPoller(
  svnurl=config.Master.nacl_trunk_url + '/src',
  split_file=NativeClientTreeFileSplitter,
  pollinterval=10)

c['change_source'] = [trunk_poller]


####### BUILDERS

# buildbot/process/factory.py provides several BuildFactory classes you can
# start with, which implement build processes for common targets (GNU
# autoconf projects, CPAN perl modules, etc). The factory.BuildFactory is the
# base class, and is configured with a series of BuildSteps. When the build
# is run, the appropriate buildslave is told to execute each Step in turn.

# the first BuildStep is typically responsible for obtaining a copy of the
# sources. There are source-obtaining Steps in buildbot/process/step.py for
# CVS, SVN, and others.


# ----------------------------------------------------------------------------
# FACTORIES

m_win32 = nacl_factory.NativeClientFactory(
    'native_client', 'win32', use_supplement=True,
    switched_to_annotations=True)
m_win64 = nacl_factory.NativeClientFactory(
    'native_client', 'win64', use_supplement=True,
    switched_to_annotations=True)
m_linux = nacl_factory.NativeClientFactory(
    'native_client', 'linux2', use_supplement=True,
    switched_to_annotations=True)
m_mac = nacl_factory.NativeClientFactory(
    'native_client', 'darwin', use_supplement=True,
    switched_to_annotations=True)
m_arm = nacl_factory.NativeClientFactory(
    'native_client', 'arm', use_supplement=True,
    switched_to_annotations=True)
m_arm_tester = nacl_factory.NativeClientFactory(
    'native_client', 'arm', use_supplement=True,
    switched_to_annotations=True)

# Temporary for annotation transition.
# TODO(bradnelson): drop this.
m_win32_cov = nacl_factory.NativeClientFactory(
    'native_client', 'win32', use_supplement=True)
m_linux_cov = nacl_factory.NativeClientFactory(
    'native_client', 'linux2', use_supplement=True)
m_mac_cov = nacl_factory.NativeClientFactory(
    'native_client', 'darwin', use_supplement=True)
m_arm_cov = nacl_factory.NativeClientFactory(
    'native_client', 'arm', use_supplement=True)

# Some shortcut to simplify the code below.
F_WIN32 = m_win32.NativeClientFactory
F_WIN64 = m_win64.NativeClientFactory
F_LINUX = m_linux.NativeClientFactory
F_MAC = m_mac.NativeClientFactory
F_ARM = m_arm.NativeClientFactory

# Temporary for annotation transition.
# TODO(bradnelson): drop this.
F_WIN32_COV = m_win32_cov.NativeClientFactory
F_LINUX_COV = m_linux_cov.NativeClientFactory
F_MAC_COV = m_mac_cov.NativeClientFactory
F_ARM_COV = m_arm_cov.NativeClientFactory

F_LINUX_ANNO = m_linux.AnnotatedFactory


# The identifier of the factory is the build configuration. If two factories
# are using the same build configuration, they should have the same identifier.

# BuilderTesters using a custom build configuration.
factories = []
# XP
for mode in ['opt']:
  name = 'xp-m32-n32-%s' % mode
  factories.append([name, '1Windows', F_WIN32(clobber=True,
      target='%s-win,nacl,doc' % mode,
      tests=['nacl_small_tests',
             'nacl_medium_tests',
             'nacl_large_tests',
             'nacl_browser_tests'],
      options=nacl_factory.win_m32_n32_options,
      factory_properties={'archive_build': False})])
# Vista64
for mode in ['dbg', 'opt']:
  name = 'vista64-m64-n64-%s' % mode
  factories.append([name, '1Windows|closer', F_WIN64(clobber=True,
      target='%s-win,nacl,doc' % mode,
      tests=[
          'nacl_small_tests',
          'nacl_medium_tests',
          'nacl_large_tests',
          'nacl_browser_tests',
          'nacl_trigger_win7atom64_hw_%s' % mode
      ],
      options=nacl_factory.win_m64_n64_options,
      factory_properties={
        'archive_build': True,
        'archive_src': 'native_client/vista64.tgz',
        'archive_dst_base': 'between_builders',
        'archive_dst': 'vista64_' + mode + '/rev_%(revision)s/build.tgz',
      })])
# Win7 on Atom64
for mode in ['dbg', 'opt']:
  name = 'win7atom64-m64-n64-test-%s' % mode
  factories.append([name, '1Windows|closer', F_WIN64(clobber=True,
      target='%s-win,nacl,doc' % mode,
      tests=['nacl_small_tests',
             'nacl_medium_tests',
             'nacl_large_tests',
             'nacl_browser_tests'],
      options=nacl_factory.win_m64_n64_tester_options,
      slave_type='Tester',
      factory_properties={
        'archive_build': False,
        'archive_url': (
            'http://commondatastorage.googleapis.com/nativeclient-archive2/'
            'between_builders/vista64_' + mode + '/rev_%(revision)s/build.tgz'),
      })])
# Mac
for mode in ['opt']:
  for osx in ['10.6', '10.5']:
    name = 'mac%s-m32-n32-%s' % (osx, mode)
    factories.append([name, '2Mac', F_MAC(clobber=True,
        target='%s-mac,nacl,doc' % mode,
        tests=['nacl_small_tests',
               'nacl_medium_tests',
               'nacl_large_tests',
               'nacl_selenium'],
        options=nacl_factory.generic_m32_n32_options,
        factory_properties={'archive_build': False})])
# Linux
for ver in ['hardy', 'lucid']:
  cat_ver = {'hardy': '3Hardy', 'lucid': '4Lucid'}[ver]
  # m32-n32
  for b in ['32', '64']:
    for mode in ['dbg', 'opt']:
      name = '%s%s-m32-n32-%s' % (ver, b, mode)
      if name in ['hardy32-m32-n32-dbg',
                  'hardy64-m32-n32-dbg',
                  'lucid64-m32-n32-dbg']: continue
      tests = ['nacl_small_tests',
               'nacl_medium_tests',
               'nacl_large_tests',
               'nacl_selenium']
      factories.append([name, cat_ver, F_LINUX(clobber=True,
          target='%s-linux,nacl,doc' % mode,
          tests=tests,
          options=nacl_factory.generic_m32_n32_options,
          factory_properties={'archive_build': False})])
  # m64-n64
  for mode in ['dbg', 'opt']:
    name = '%s64-m64-n64-%s' % (ver, mode)
    if name == 'hardy64-m64-n64-dbg': continue
    if ver == 'hardy':
      options = nacl_factory.hardy64_m64_n64_options
    else:
      options = nacl_factory.generic_m64_n64_options
    factories.append([name, cat_ver, F_LINUX(clobber=True,
        target='%s-linux,nacl,doc' % mode,
        options=options,
        tests=['nacl_small_tests',
               'nacl_medium_tests',
               'nacl_large_tests',
               'nacl_browser_tests'],
        factory_properties={
          'archive_build': False,
          'gclient_env': {'GYP_DEFINES': 'target_arch=x64'},
        })])
# ARM
for mode in ['dbg', 'opt']:
  name = 'hardy64-marm-narm-%s' % mode
  factories.append([name, '5Arm', F_ARM(clobber=True,
      target='%s-linux,nacl' % mode,
      tests=[
          'nacl_small_tests',
          'nacl_medium_tests',
          'nacl_large_tests',
          'nacl_trigger_arm_hw_%s' % mode
      ],
      options=nacl_factory.linux_marm_narm_options[mode],
      factory_properties={
        'archive_build': True,
        'archive_src': 'native_client/arm.tgz',
        'archive_dst_base': 'between_builders',
        'archive_dst': 'arm_' + mode + '/rev_%(revision)s/build.tgz',
      })])

# Arm board tests
for mode in ['dbg', 'opt']:
  name = 'arm-marm-narm-test-%s' % mode
  factories.append([name, '5Arm', F_ARM(clobber=True,
        target='%s-linux,nacl' % mode,
        tests=[
            'nacl_small_tests',
            'nacl_medium_tests',
            'nacl_large_tests',
            'nacl_selenium',
        ],
        options=nacl_factory.linux_marm_narm_options['%s-arm' % mode],
        slave_type='Tester',
        factory_properties={
          'archive_build': False,
          'archive_url': (
              'http://commondatastorage.googleapis.com/nativeclient-archive2/'
              'between_builders/arm_' + mode + '/rev_%(revision)s/build.tgz'),
        },
  )])

# Valgrind
factories.append(['karmic64-valgrind', '6Other|closer', F_LINUX(
    clobber=True,
    target='dbg-linux,nacl',
    options=nacl_factory.generic_m64_n64_options,
    tests=['nacl_valgrind'])])

# SPEC
factories.append(['lucid64-spec-arm', '6Other|closer',
    F_LINUX_ANNO('./tests/spec2k/bot_spec.sh 1 ~/cpu2000-redhat64-ia32',
                 factory_properties={
                   'test_name': 'spec2k',
                   'perf_id': 'nacl-lucid64-spec-arm',
                   'show_perf_results': True,
                 })])
factories.append(['lucid64-spec-x86', '6Other|closer',
    F_LINUX_ANNO('./tests/spec2k/bot_spec.sh 2 ~/cpu2000-redhat64-ia32',
                 factory_properties={
                   'test_name': 'spec2k',
                   'perf_id': 'nacl-lucid64-spec-x86',
                   'show_perf_results': True,
                 })])

# PNaCl
factories.append(['lucid64-pnacl-translator', '6PNaCl|closer',
    F_LINUX_ANNO('./tests/spec2k/bot_spec.sh 3 ~/cpu2000-redhat64-ia32',
                 factory_properties={
                   'test_name': 'spec2k',
                   'perf_id': 'nacl-lucid64-spec-trans',
                   'show_perf_results': True,
                 })])
factories.append(['lucid64-pnacl1', '6PNaCl|closer', F_LINUX()])
factories.append(['lucid64-pnacl2', '6PNaCl|closer', F_LINUX()])

# Coverage
name = 'mac-m32-n32-coverage'
factories.append([name, '7Coverage|closer', F_MAC_COV(clobber=True,
    target='coverage-mac,nacl,doc',
    tests=['nacl_coverage'],
    options=nacl_factory.generic_m32_n32_options,
    factory_properties={
        'archive_build': False,
        'archive_coverage': 'coverage-mac-x86-32',
    })])

name = 'hardy64-m32-n32-coverage'
factories.append([name, '7Coverage|closer', F_LINUX_COV(clobber=True,
    target='coverage-linux,nacl,doc',
    tests=['nacl_coverage'],
    options=nacl_factory.generic_m32_n32_options,
    factory_properties={
        'archive_build': False,
        'archive_coverage': 'coverage-linux-x86-32',
    })])

name = 'hardy64-m64-n64-coverage'
factories.append([name, '7Coverage|closer', F_LINUX_COV(clobber=True,
    target='coverage-linux,nacl,doc',
    tests=['nacl_coverage'],
    options=nacl_factory.generic_m64_n64_options,
    factory_properties={
        'archive_build': False,
        'archive_coverage': 'coverage-linux-x86-64',
    })])

name = 'hardy64-marm-narm-coverage'
factories.append([name, '7Coverage|closer', F_ARM_COV(clobber=True,
    target='coverage-linux,nacl,doc',
    tests=['nacl_coverage'],
    options=nacl_factory.linux_marm_narm_options['dbg'],
    factory_properties={
        'archive_build': False,
        'archive_coverage': 'coverage-linux-arm',
    })])

name = 'xp-m32-n32-coverage'
factories.append([name, '7Coverage|closer', F_WIN32_COV(clobber=True,
    target='coverage-win,nacl,doc',
    tests=['nacl_coverage'],
    options=nacl_factory.win_m32_n32_options,
    factory_properties={
        'archive_build': False,
        'archive_coverage': 'coverage-win-x86-32',
    })])


# BARE METAL BOTS

name = 'lucid32-bare-m32-n32-opt'
factories.append([name, '4Lucid', F_LINUX(clobber=True,
  target='opt-linux,nacl',
  tests=['nacl_small_tests',
         'nacl_medium_tests',
         'nacl_large_tests',
         'nacl_browser_tests'],
  options=nacl_factory.generic_m32_n32_options,
  factory_properties={'archive_build': False})]
)

name = 'lucid64-bare-m64-n64-opt'
factories.append([name, '4Lucid', F_LINUX(clobber=True,
  target='opt-linux,nacl',
  tests=['nacl_small_tests',
         'nacl_medium_tests',
         'nacl_large_tests',
         'nacl_browser_tests'],
  options=nacl_factory.generic_m64_n64_options,
  factory_properties={'archive_build': False})]
)

name = 'win7-bare-m64-n64-opt'
factories.append([name, '1Windows|closer', F_WIN64(clobber=True,
  target='opt-win,nacl',
  tests=['nacl_small_tests',
         'nacl_medium_tests',
         'nacl_large_tests',
         'nacl_browser_tests'],
  options=nacl_factory.win_m64_n64_options,
  factory_properties={'archive_build': False})]
)

name = 'win7-bare-m32-n32-opt'
factories.append([name, '1Windows|closer', F_WIN32(clobber=True,
  target='opt-win,nacl',
  tests=['nacl_small_tests',
         'nacl_medium_tests',
         'nacl_large_tests',
         'nacl_browser_tests'],
  options=nacl_factory.win_m32_n32_options,
  factory_properties={'archive_build': False})]
)

name = 'xp-bare-m32-n32-opt'
factories.append([name, '1Windows|closer', F_WIN32(clobber=True,
  target='opt-win,nacl',
  tests=['nacl_small_tests',
         'nacl_medium_tests',
         'nacl_large_tests',
         'nacl_browser_tests'],
  options=nacl_factory.win_m32_n32_options,
  factory_properties={'archive_build': False})]
)



####### SCHEDULERS
## configure the Schedulers
# Main scheduler for all changes in trunk.
primary_builders = []
for f in factories:
  if '-test-' not in f[0]:
    primary_builders.append(f[0])
s_nacl = Scheduler(
   name='nacl',
   branch='native_client',
   treeStableTimer=60,
   builderNames=primary_builders,
)

s_win7atom64_dbg_hw_tests = Triggerable(
    name='win7atom64_dbg_hw_tests',
    builderNames=['win7atom64-m64-n64-test-dbg'])
s_win7atom64_opt_hw_tests = Triggerable(
    name='win7atom64_opt_hw_tests',
    builderNames=['win7atom64-m64-n64-test-opt'])
s_arm_dbg_hw_tests = Triggerable(name='arm_dbg_hw_tests',
                                 builderNames=['arm-marm-narm-test-dbg'])
s_arm_opt_hw_tests = Triggerable(name='arm_opt_hw_tests',
                                 builderNames=['arm-marm-narm-test-opt'])

c['schedulers'] = [
    s_nacl,
    s_win7atom64_dbg_hw_tests,
    s_win7atom64_opt_hw_tests,
    s_arm_dbg_hw_tests,
    s_arm_opt_hw_tests,
]


# Setup a per slave lock to prevent more than one thing running at once on
# a single slave.
slave_lock = locks.SlaveLock('overload_lock', maxCount=1)



# ----------------------------------------------------------------------------
# BUILDER DEFINITIONS

# The 'builders' list defines the Builders. Each one is configured with a
# dictionary, using the following keys:
#  name (required): the name used to describe this bilder
#  slavename (required): which slave to use, must appear in c['slaves']
#  builddir (required): which subdirectory to run the builder in
#  factory (required): a BuildFactory to define how the build is run
#  periodicBuildTime (optional): if set, force a build every N seconds
#  category (optional): it is not used in the normal 'buildbot' meaning. It is
#                       used by gatekeeper to determine which steps it should
#                       look for to close the tree.
#

def AutoReboot(builder):
  return builder not in [
      'lucid64-pnacl-translator',
      'lucid64-spec-arm',
      'lucid64-spec-x86',
      'arm-marm-narm-test-dbg',
      'arm-marm-narm-test-opt',
  ] and 'bare' not in builder


c['builders'] = []
slaves = slaves_list.SlavesList('slaves.cfg', 'NativeClient')
for f in factories:
  c['builders'].append({
      'name': f[0],
      'slavenames': slaves.GetSlavesName(builder=f[0]),
      'builddir': f[0],
      'factory': f[2],
      'category': '%s' % f[1],
      'locks': [slave_lock],
      'auto_reboot': AutoReboot(f[0]),
  })


####### BUILDSLAVES

# The 'slaves' list defines the set of allowable buildslaves. List all the
# slaves registered to a builder. Remove dupes.
c['slaves'] = master_utils.AutoSetupSlaves(c['builders'],
                                           config.Master.GetBotPassword())

# Make sure everything works together.
master_utils.VerifySetup(c, slaves)


####### STATUS TARGETS

# Adds common status and tools to this master.
master_utils.AutoSetupMaster(c, ActiveMaster)


# Convert factories to a list of (factory_name, factory_object) pairs.
factories_bare = [(f[0], f[2]) for f in factories]
# Filter out factories for testers (which contain -test-), since these
# have bad source stamps preventing them from being included in lkgr.
factories_bare = [f for f in factories_bare if '-test-' not in f[0]]
# Create mapping of builder name to list of steps.
builder_steps = build_utils.ExtractFactoriesSteps(factories_bare)
all_steps = build_utils.AllFactoriesSteps(factories_bare)


if TREE_GATE_KEEPER:
  from master import gatekeeper
  # This is the list of the builder categories and the corresponding critical
  # steps. If one critical step fails, gatekeeper will close the tree
  # automatically.
  categories_steps = {
      '': ['update scripts', 'update'],
      'info': [],
      'closer': all_steps,
  }
  exclusions = {}
  forgiving_steps = []
  c['status'].append(gatekeeper.GateKeeper(
      fromaddr=ActiveMaster.from_address,
      categories_steps=categories_steps,
      exclusions=exclusions,
      relayhost=config.Master.smtp,
      subject='buildbot %(result)s in %(projectName)s on %(builder)s, '
              'revision %(revision)s',
      extraRecipients=ActiveMaster.tree_closing_notification_recipients,
      tree_status_url=ActiveMaster.tree_status_url,
      lookup='google.com',
      forgiving_steps=forgiving_steps))

if GOOD_REVISIONS:
  from master import goodrevisions
  c['status'].append(goodrevisions.GoodRevisions(
      good_revision_steps=builder_steps,
      store_revisions_url=ActiveMaster.store_revisions_url))


####### PROJECT IDENTITY

# Buildbot master url:
c['buildbotURL'] = 'http://build.chromium.org/p/client.nacl/'
