# -*- python -*-
# ex: set syntax=python:

# Copyright (c) 2011 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# This is the buildmaster config file for the 'nacl' bot. It must
# be installed as 'master.cfg' in your buildmaster's base directory
# (although the filename can be changed with the --basedir option to
# 'mktap buildbot master').

# It has one job: define a dictionary named BuildmasterConfig. This
# dictionary has a variety of keys to control different aspects of the
# buildmaster. They are documented in docs/config.xhtml .

# This file follows this naming convention:
# Factories: f_nacl_[dbg/opt/sdk]_[os]
# Builders:  b_nacl_[dbg/opt/sdk]_[os]
# BuildDir:  [dbg/opt/sdk]-[os]
#
# os = xp/linux/mac

from buildbot import locks
from buildbot.changes import svnpoller
from buildbot.scheduler import Scheduler
from buildbot.scheduler import Triggerable

from master import build_utils
from master import slaves_list
from master import master_utils
from master.factory import nacl_factory


import config

ActiveMaster = config.Master.NativeClient

TREE_GATE_KEEPER = ActiveMaster.is_production_host
GOOD_REVISIONS = ActiveMaster.is_production_host

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}


####### CHANGESOURCES

# the 'change_source' list tells the buildmaster how it should find out about
# source code changes. Any class which implements IChangeSource can be added
# to this list: there are several in buildbot/changes/*.py to choose from.
def NativeClientTreeFileSplitter(path):
  projects = ['native_client']
  for p in projects:
    if path.startswith(p + '/'):
      return (p, path[len(p)+1:])
  return None

# Polls config.Master.nacl_trunk_url for changes
trunk_poller = svnpoller.SVNPoller(
  svnurl=config.Master.nacl_trunk_url + '/src',
  split_file=NativeClientTreeFileSplitter,
  pollinterval=10)

c['change_source'] = [trunk_poller]


####### BUILDERS

# buildbot/process/factory.py provides several BuildFactory classes you can
# start with, which implement build processes for common targets (GNU
# autoconf projects, CPAN perl modules, etc). The factory.BuildFactory is the
# base class, and is configured with a series of BuildSteps. When the build
# is run, the appropriate buildslave is told to execute each Step in turn.

# the first BuildStep is typically responsible for obtaining a copy of the
# sources. There are source-obtaining Steps in buildbot/process/step.py for
# CVS, SVN, and others.


# ----------------------------------------------------------------------------
# FACTORIES

m_nacl_posix = nacl_factory.NativeClientFactory(
    'posix', 'native_client', use_supplement=True)
m_nacl_win = nacl_factory.NativeClientFactory(
    'win32', 'native_client', use_supplement=True)
F_NACL = m_nacl_posix.NativeClientFactory
F_NACL_WIN = m_nacl_win.NativeClientFactory


# BuilderTesters using a custom build configuration.
factories = [
    # XP
    ['xp-m32-n32-opt', '1Windows|closer', F_NACL_WIN()],
    # Vista64
    ['vista64-m64-n64-dbg', '1Windows|closer', F_NACL_WIN(
        # Disabled atom bot.
        #tests=['nacl_trigger_win7atom64_hw_dbg'],
    )],
    ['vista64-m64-n64-opt', '1Windows|closer', F_NACL_WIN(
        # Disabled atom bot.
        #tests=['nacl_trigger_win7atom64_hw_opt'],
    )],
    # Disabled atom bot.
    # Win7 on Atom64
    #['win7atom64-m64-n64-test-dbg', '1Windows|closer', F_NACL_WIN()],
    #['win7atom64-m64-n64-test-opt', '1Windows|closer', F_NACL_WIN()],
    # Mac
    ['mac10.5-m32-n32-opt', '2Mac|closer', F_NACL()],
    ['mac10.6-m32-n32-opt', '2Mac|closer', F_NACL()],
    # Linux
    ['lucid32-m32-n32-dbg', '3Lucid|closer', F_NACL()],
    ['lucid32-m32-n32-opt', '3Lucid|closer', F_NACL()],
    ['lucid64-m32-n32-opt', '3Lucid|closer', F_NACL()],
    ['lucid64-m64-n64-dbg', '3Lucid|closer', F_NACL()],
    ['lucid64-m64-n64-opt', '3Lucid|closer', F_NACL()],
    # ARM
    ['pnacl-arm-dbg', '4Arm|closer', F_NACL(
        tests=['nacl_trigger_arm_hw_dbg'],
    )],
    ['pnacl-arm-opt', '4Arm|closer', F_NACL(
        tests=['nacl_trigger_arm_hw_opt'],
    )],
    # Arm board tests
    ['pnacl-arm-hw-dbg', '4Arm|closer', F_NACL()],
    ['pnacl-arm-hw-opt', '4Arm|closer', F_NACL()],
    # Valgrind
    ['karmic64-valgrind', '5Other|closer', F_NACL()],
    # SPEC
    ['lucid64-spec-arm', '5Other|closer', F_NACL(
        factory_properties={
            'test_name': 'spec2k',
            'perf_id': 'nacl-lucid64-spec-x86',
            'show_perf_results': True,
        },
    )],
    ['lucid64-spec-x86', '5Other|closer', F_NACL(
        factory_properties={
            'test_name': 'spec2k',
            'perf_id': 'nacl-lucid64-spec-arm',
            'show_perf_results': True,
        },
    )],
    # PNaCl
    ['lucid64-pnacl-translator', '6PNaCl|closer', F_NACL(
        factory_properties={
            'test_name': 'spec2k',
            'perf_id': 'nacl-lucid64-spec-trans',
            'show_perf_results': True,
        },
    )],
    ['pnacl-x8632', '6PNaCl|closer', F_NACL()],
    ['pnacl-x8664', '6PNaCl|closer', F_NACL()],
    # Coverage
    ['mac-m32-n32-coverage', '7Coverage|closer', F_NACL()],
    ['hardy64-m32-n32-coverage', '7Coverage|closer', F_NACL()],
    ['hardy64-m64-n64-coverage', '7Coverage|closer', F_NACL()],
    ['hardy64-marm-narm-coverage', '7Coverage|closer', F_NACL()],
    ['xp-m32-n32-coverage', '7Coverage|closer', F_NACL()],
    # BARE METAL BOTS
    ['lucid32-bare-m32-n32-opt', '3Lucid|closer', F_NACL()],
    ['lucid64-bare-m64-n64-opt', '3Lucid|closer', F_NACL()],
    ['xp-bare-m32-n32-opt', '1Windows|closer', F_NACL_WIN()],
    ['win7-bare-m32-n32-opt', '1Windows|closer', F_NACL_WIN()],
    ['win7-bare-m64-n64-opt', '1Windows|closer', F_NACL_WIN()],
]


####### SCHEDULERS
## configure the Schedulers
# Main scheduler for all changes in trunk.
primary_builders = []
for f in factories:
  if '-test-' not in f[0]:
    primary_builders.append(f[0])
s_nacl = Scheduler(
   name='nacl',
   branch='native_client',
   treeStableTimer=60,
   builderNames=primary_builders,
)

# Disabled atom bot.
#s_win7atom64_dbg_hw_tests = Triggerable(
#    name='win7atom64_dbg_hw_tests',
#    builderNames=['win7atom64-m64-n64-test-dbg'])
#s_win7atom64_opt_hw_tests = Triggerable(
#    name='win7atom64_opt_hw_tests',
#    builderNames=['win7atom64-m64-n64-test-opt'])
s_arm_dbg_hw_tests = Triggerable(name='arm_dbg_hw_tests',
                                 builderNames=['pnacl-arm-hw-dbg'])
s_arm_opt_hw_tests = Triggerable(name='arm_opt_hw_tests',
                                 builderNames=['pnacl-arm-hw-opt'])

c['schedulers'] = [
    s_nacl,
# Disabled atom bot.
#    s_win7atom64_dbg_hw_tests,
#    s_win7atom64_opt_hw_tests,
    s_arm_dbg_hw_tests,
    s_arm_opt_hw_tests,
]


# Setup a per slave lock to prevent more than one thing running at once on
# a single slave.
slave_lock = locks.SlaveLock('overload_lock', maxCount=1)



# ----------------------------------------------------------------------------
# BUILDER DEFINITIONS

# The 'builders' list defines the Builders. Each one is configured with a
# dictionary, using the following keys:
#  name (required): the name used to describe this bilder
#  slavename (required): which slave to use, must appear in c['slaves']
#  builddir (required): which subdirectory to run the builder in
#  factory (required): a BuildFactory to define how the build is run
#  periodicBuildTime (optional): if set, force a build every N seconds
#  category (optional): it is not used in the normal 'buildbot' meaning. It is
#                       used by gatekeeper to determine which steps it should
#                       look for to close the tree.
#

def AutoReboot(builder):
  return builder not in [
      'lucid64-pnacl-translator',
      'lucid64-spec-arm',
      'lucid64-spec-x86',
      'pnacl-arm-hw-dbg',
      'pnacl-arm-hw-opt',
  ] and 'bare' not in builder


c['builders'] = []
slaves = slaves_list.SlavesList('slaves.cfg', 'NativeClient')
for f in factories:
  c['builders'].append({
      'name': f[0],
      'slavenames': slaves.GetSlavesName(builder=f[0]),
      'builddir': f[0],
      'factory': f[2],
      'category': '%s' % f[1],
      'locks': [slave_lock],
      'auto_reboot': AutoReboot(f[0]),
  })


####### BUILDSLAVES

# The 'slaves' list defines the set of allowable buildslaves. List all the
# slaves registered to a builder. Remove dupes.
c['slaves'] = master_utils.AutoSetupSlaves(c['builders'],
                                           config.Master.GetBotPassword())

# Make sure everything works together.
master_utils.VerifySetup(c, slaves)


####### STATUS TARGETS

# Adds common status and tools to this master.
master_utils.AutoSetupMaster(c, ActiveMaster)


# Convert factories to a list of (factory_name, factory_object) pairs.
factories_bare = [(f[0], f[2]) for f in factories]
# Filter out factories for testers (which contain -test-), since these
# have bad source stamps preventing them from being included in lkgr.
factories_bare = [f for f in factories_bare if '-test-' not in f[0]]
# Create mapping of builder name to list of steps.
builder_steps = build_utils.ExtractFactoriesSteps(factories_bare)
all_steps = build_utils.AllFactoriesSteps(factories_bare)


if TREE_GATE_KEEPER:
  from master import gatekeeper
  # This is the list of the builder categories and the corresponding critical
  # steps. If one critical step fails, gatekeeper will close the tree
  # automatically.
  categories_steps = {
      '': ['update scripts', 'update'],
      'info': [],
      'closer': all_steps,
  }
  exclusions = {}
  forgiving_steps = []
  c['status'].append(gatekeeper.GateKeeper(
      fromaddr=ActiveMaster.from_address,
      categories_steps=categories_steps,
      exclusions=exclusions,
      relayhost=config.Master.smtp,
      subject='buildbot %(result)s in %(projectName)s on %(builder)s, '
              'revision %(revision)s',
      extraRecipients=ActiveMaster.tree_closing_notification_recipients,
      tree_status_url=ActiveMaster.tree_status_url,
      lookup='google.com',
      forgiving_steps=forgiving_steps))

if GOOD_REVISIONS:
  from master import goodrevisions
  c['status'].append(goodrevisions.GoodRevisions(
      good_revision_steps=builder_steps,
      store_revisions_url=ActiveMaster.store_revisions_url))


####### PROJECT IDENTITY

# Buildbot master url:
c['buildbotURL'] = 'http://build.chromium.org/p/client.nacl/'
