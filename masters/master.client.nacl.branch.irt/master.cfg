# -*- python -*-
# ex: set syntax=python:

# Copyright (c) 2011 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# This is the buildmaster config file for the 'nacl' bot. It must
# be installed as 'master.cfg' in your buildmaster's base directory
# (although the filename can be changed with the --basedir option to
# 'mktap buildbot master').

# It has one job: define a dictionary named BuildmasterConfig. This
# dictionary has a variety of keys to control different aspects of the
# buildmaster. They are documented in docs/config.xhtml .

# This file follows this naming convention:
# Factories: f_nacl_[dbg/opt/sdk]_[os]
# Builders:  b_nacl_[dbg/opt/sdk]_[os]
# BuildDir:  [dbg/opt/sdk]-[os]
#
# os = xp/linux/mac

from buildbot import locks
from buildbot.changes import svnpoller
from buildbot.scheduler import Scheduler
from buildbot.scheduler import Triggerable

from master import build_utils
from master import slaves_list
from master import master_utils
from master.factory import nacl_factory


import config

ActiveMaster = config.Master.NativeClientBranchIRT

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}


####### CHANGESOURCES

# the 'change_source' list tells the buildmaster how it should find out about
# source code changes. Any class which implements IChangeSource can be added
# to this list: there are several in buildbot/changes/*.py to choose from.

def NativeClientTreeFileSplitter(path):
  branch_map = {
    '835': 'm14',
  }
  projects = ['native_client']
  for branch in branch_map:
    branch_prefix = '%s/src/native_client/' % branch
    if path.startswith(branch_prefix):
      return (branch, path[len(branch_prefix):])
  return None

branch_poller = svnpoller.SVNPoller(
  svnurl='svn://svn.chromium.org/native_client/branches',
  split_file=NativeClientTreeFileSplitter,
  pollinterval=10)

c['change_source'] = [branch_poller]


####### BUILDERS

# buildbot/process/factory.py provides several BuildFactory classes you can
# start with, which implement build processes for common targets (GNU
# autoconf projects, CPAN perl modules, etc). The factory.BuildFactory is the
# base class, and is configured with a series of BuildSteps. When the build
# is run, the appropriate buildslave is told to execute each Step in turn.

# the first BuildStep is typically responsible for obtaining a copy of the
# sources. There are source-obtaining Steps in buildbot/process/step.py for
# CVS, SVN, and others.


# ----------------------------------------------------------------------------
# FACTORIES

nacl_m14_url = (
    'svn://svn.chromium.org/native_client/branches/835/src/native_client')
m_nacl_posix = nacl_factory.NativeClientFactory(
    alternate_url=nacl_m14_url,
    build_dir='native_client', target_platform='posix', use_supplement=True)
m_nacl_win = nacl_factory.NativeClientFactory(
    alternate_url=nacl_m14_url,
    build_dir='native_client', target_platform='win32', use_supplement=True)
F_NACL = m_nacl_posix.NativeClientFactory
F_NACL_WIN = m_nacl_win.NativeClientFactory


# BuilderTesters using a custom build configuration.
factories = [
    # lucid-32 (07)
    ['lucid-32-newlib-dbg', '1m14|closer', F_NACL()],
    # lucid-64 (08)
    ['lucid-64-newlib-dbg', '1m14|closer', F_NACL()],
]


####### SCHEDULERS
## configure the Schedulers
primary_builders = []
for f in factories:
  if '-arm_hw-' not in f[0]:
    primary_builders.append(f[0])
s_nacl_m14 = Scheduler(
   name='nacl',
   branch='m14',
   treeStableTimer=0,
   builderNames=primary_builders,
)

c['schedulers'] = [
    s_nacl_m14,
]


# Setup a per slave lock to prevent more than one thing running at once on
# a single slave.
slave_lock = locks.SlaveLock('overload_lock', maxCount=1)



# ----------------------------------------------------------------------------
# BUILDER DEFINITIONS

# The 'builders' list defines the Builders. Each one is configured with a
# dictionary, using the following keys:
#  name (required): the name used to describe this bilder
#  slavename (required): which slave to use, must appear in c['slaves']
#  builddir (required): which subdirectory to run the builder in
#  factory (required): a BuildFactory to define how the build is run
#  periodicBuildTime (optional): if set, force a build every N seconds
#  category (optional): it is not used in the normal 'buildbot' meaning. It is
#                       used by gatekeeper to determine which steps it should
#                       look for to close the tree.
#

c['builders'] = []
slaves = slaves_list.SlavesList('slaves.cfg', 'NativeClientBranchIRT')
for f in factories:
  c['builders'].append({
      'name': f[0],
      'slavenames': slaves.GetSlavesName(builder=f[0]),
      'builddir': f[0],
      'factory': f[2],
      'category': '%s' % f[1],
      'locks': [slave_lock],
      'auto_reboot': False,
  })


####### BUILDSLAVES

# The 'slaves' list defines the set of allowable buildslaves. List all the
# slaves registered to a builder. Remove dupes.
c['slaves'] = master_utils.AutoSetupSlaves(c['builders'],
                                           config.Master.GetBotPassword())

# Make sure everything works together.
master_utils.VerifySetup(c, slaves)


####### STATUS TARGETS

# Adds common status and tools to this master.
master_utils.AutoSetupMaster(c, ActiveMaster)



####### PROJECT IDENTITY

# Buildbot master url:
c['buildbotURL'] = 'http://build.chromium.org/p/client.nacl.branch.irt/'
