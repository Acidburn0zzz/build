# -*- python -*-
# ex: set syntax=python:

# Copyright (c) 2012 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import tempfile

# These modules come from scripts/master, which must be in the PYTHONPATH.
import master.cros_builder_mapping as cros_builder_mapping
# Perform reload so a 'make reconfig' picks up changes to cros_builder_mapping
reload(cros_builder_mapping)

from master import master_utils
from master import slaves_list
from master.cros_builders_pools import CrOSBuildersPools
from master.cros_try_job_git import CrOSTryJobGit
from master.factory import chromeos_factory

from buildbot.changes.gitpoller import GitPoller

# These modules come from scripts/common, which must be in the PYTHONPATH.
import config

ActiveMaster = config.Master.ChromiumOSTryServer

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

config.DatabaseSetup(c, require_dbconfig=ActiveMaster.is_production_host)

####### CHANGESOURCES

c['change_source'] = GitPoller(
    repourl=ActiveMaster.repo_url,
    workdir=tempfile.mkdtemp(prefix='gitpoller'),
    pollinterval=10)

####### BUILDERS

c['builders'] = []
pools = CrOSBuildersPools(default_pool_name='ChromeOS',
                          builder_mapping=cros_builder_mapping.CONFIG_NAME_DICT)

# ----------------------------------------------------------------------------
# BUILDER DEFINITIONS

# The 'builders' list defines the Builders. Each one is configured with a
# dictionary, using the following keys:
#  name (required): the name used to describe this bilder
#  slavename (required): which slave to use, must appear in c['slaves']
#  builddir (required): which subdirectory to run the builder in
#  factory (required): a BuildFactory to define how the build is run
#  category (optional): it is not used in the normal 'buildbot' meaning. It is
#                       used by gatekeeper to determine which steps it should
#                       look for to close the tree.
#

# Cros helper functions to build builders and factories.

def GetCBuildbotFactory(config):
  """Returns cros buildbot factories."""
  return chromeos_factory.CbuildbotFactory(
      params=config, trybot=True, crostools_repo=None).get_factory()


def AddBuilderDefinition(display_name):
  """Adds a builder definition given by the args.

  Args:
    display_name: Name displayed on buildbot waterfall.
  """
  def GetConfig():
    return cros_builder_mapping.NAME_CONFIG_DICT.get(display_name, display_name)

  c['builders'].append({
    'name': display_name,
    'builddir': display_name.replace(' ', '-'),
    'factory': GetCBuildbotFactory(GetConfig()),
    'category': '1release full|info',
  })

  pools['ChromeOS'].append(display_name)


# Pre Flight Queues
AddBuilderDefinition('x86 generic PFQ')
AddBuilderDefinition('arm generic PFQ')
AddBuilderDefinition('tegra2 PFQ')

# Full Builders
AddBuilderDefinition('x86 generic full')
AddBuilderDefinition('arm generic full')
AddBuilderDefinition('tegra2 full')
AddBuilderDefinition('tegra2 seaboard full')
AddBuilderDefinition('x86 pineview full')

AddBuilderDefinition('chromiumos sdk',)

####### BUILDSLAVES

# the 'slaves' list defines the set of allowable buildslaves. Each element is a
# tuple of bot-name and bot-password. These correspond to values given to the
# buildslave's mktap invocation.

# First, load the list from slaves.cfg.
slaves = slaves_list.SlavesList('slaves.cfg', 'ChromiumOSTryServer')

# Associate the slaves to the builders.
for builder in c['builders']:
  builder['slavenames'] = slaves.GetSlavesName(builder=builder['name'])
  # Don't enable auto_reboot for people testing locally.
  builder.setdefault('auto_reboot', ActiveMaster.is_production_host)

# The 'slaves' list defines the set of allowable buildslaves. List all the
# slaves registered to a builder. Remove dupes.
c['slaves'] = master_utils.AutoSetupSlaves(c['builders'],
                                           config.Master.GetBotPassword())

####### SCHEDULERS

c['schedulers'] = []
c['schedulers'].append(CrOSTryJobGit(
    name='cros_try_job_git',
    pools=pools,
    poller=c['change_source'],
    ))

####### STATUS TARGETS

# Adds common status and tools to this master.
master_utils.AutoSetupMaster(c, ActiveMaster, order_console_by_time=True,
                             public_html='../master.chromium/public_html',
                             templates=['./templates',
                                        '../master.chromiumos/templates'])

# Add a dumb MailNotifier first so it will be used for BuildSlave with
# notify_on_missing set when they go missing.
from buildbot.status import mail
c['status'].append(mail.MailNotifier(
    fromaddr=ActiveMaster.from_address,
    builders=[],
    relayhost=config.Master.smtp,
    lookup=master_utils.UsersAreEmails()))

# Try job result emails.
from master.try_mail_notifier import TryMailNotifier
c['status'].append(TryMailNotifier(
    fromaddr=ActiveMaster.from_address,
    subject="try %(result)s for %(reason)s on %(builder)s",
    mode='all',
    relayhost=config.Master.smtp,
    lookup=master_utils.UsersAreEmails()))


####### PROJECT IDENTITY

# Buildbot master url:
c['buildbotURL'] = ''
