# -*- Python -*-
# ex: set syntax=python:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

# Note that pollinterval is in seconds!
# Polls the repo for new changes every 30 seconds
from buildbot.changes import svnpoller
poller = svnpoller.SVNPoller(svnurl = "http://sfntly.googlecode.com/svn/trunk/",
                             pollinterval = 30)

c['change_source'] = [ poller ]


####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a
# build: what steps, and which slaves can execute them.  Note that any
# particular build will only take place on one slave.

from buildbot.process.factory import BuildFactory
from buildbot.steps.source import SVN

from buildbot.steps.shell import ShellCommand
from buildbot.steps.shell import Configure, Compile, Test

SFNTLY_CPP_ROOT="build/cpp"

### UNIX
unix_steps = [
    # check out the source
    SVN(svnurl="http://sfntly.googlecode.com/svn/trunk/"),

    # get google test and setup symlinks
    ShellCommand(command=["unzip", "-o",
                          "ext/redist/gtest-1.6.0.zip",
                          "-d", "ext/"],
                 workdir=SFNTLY_CPP_ROOT),
    ShellCommand(command=["ln", "-s", "-f",
                          "gtest-1.6.0", "gtest"],
                 workdir=SFNTLY_CPP_ROOT + "/ext"),
    ShellCommand(command=["ln", "-s", "-f",
                          "../../ext/gtest", "gtest"],
                 workdir=SFNTLY_CPP_ROOT + "/src/test"),

    # generate Makefiles
    ShellCommand(command=["rm", "-rf", "build"],
                 workdir=SFNTLY_CPP_ROOT),
    ShellCommand(command=["mkdir", "build"],
                 workdir=SFNTLY_CPP_ROOT),
    Configure(command=["cmake", ".."],
              workdir=SFNTLY_CPP_ROOT + "/build",
              haltOnFailure=True,
              env={"CC":"clang", "CXX":"clang++"}),

    # generate binaries
    Compile(command=["make"],
            workdir=SFNTLY_CPP_ROOT),
    # copy test fonts to bin/ folder
    ShellCommand(command=["cp", "data/ext/Tuffy.ttf",
                          "bin/"], workdir=SFNTLY_CPP_ROOT),

    # run unit tests
    Test(command=["./unit_test"],
         workdir=SFNTLY_CPP_ROOT + "/bin")
    ]
clang_unix_factory = BuildFactory(unix_steps)

unix_steps[5] = Configure(command=["cmake", ".."],
                          workdir=SFNTLY_CPP_ROOT + "/build",
                          haltOnFailure=True,
                          env={"CC":"gcc", "CXX":"g++"})
gcc_unix_factory = BuildFactory(unix_steps)

### Windows
windows_steps = [
    # check out the source
    SVN(svnurl="http://sfntly.googlecode.com/svn/trunk/"),

    # get google test and setup symlinks
    ShellCommand(command=["rm", "-rf", "gtest", "icu", "cmake"],
                 workdir=SFNTLY_CPP_ROOT + "/ext"),
    ShellCommand(command=["mkdir", "icu"],
                 workdir=SFNTLY_CPP_ROOT + "/ext"),
    ShellCommand(command=["unzip", "-o",
                          "redist/gtest-1.6.0.zip"],
                 workdir=SFNTLY_CPP_ROOT + "/ext"),
    ShellCommand(command=["mv",
                          "gtest-1.6.0", "gtest"],
                 workdir=SFNTLY_CPP_ROOT + "/ext"),
    ShellCommand(command=["unzip", "-o",
                          "redist/icu4c-4_6_1-Win32-msvc10",
                          "-d", "."],
                 workdir=SFNTLY_CPP_ROOT + "/ext"),
    ShellCommand(command=["unzip", "-o",
                          "redist/cmake-2.8.5-win32-x86.zip",
                          "-d", "."],
                 workdir=SFNTLY_CPP_ROOT + "/ext"),
    ShellCommand(command=["mv",
                          "cmake-2.8.5-win32-x86", "cmake"],
	         workdir=SFNTLY_CPP_ROOT + "/ext"),

    # generate Makefiles
    ShellCommand(command=["rm", "-rf", "build"],
                 workdir=SFNTLY_CPP_ROOT),
    ShellCommand(command=["mkdir", "build"],
                 workdir=SFNTLY_CPP_ROOT),
    Configure(command=["cmake", "..",
                       "-G", "Visual Studio 9 2008"],
              workdir=SFNTLY_CPP_ROOT + "/build",
              haltOnFailure=True),

    # generate binaries
    Compile(command=["vcvars32.bat"], workdir=SFNTLY_CPP_ROOT + "/build"),
    Compile(command=["devenv", "sfntly.sln", "/build"],
            workdir=SFNTLY_CPP_ROOT + "/build"),

    # copy test fonts to bin/ folder
    ShellCommand(command=["cp", "data/ext/Tuffy.ttf",
                          "build/bin/Debug/"], workdir=SFNTLY_CPP_ROOT),
    ShellCommand(command=["cp", "ext/icu/bin/icudt46.dll",
                          "build/bin/Debug"], workdir=SFNTLY_CPP_ROOT),
    ShellCommand(command=["cp", "ext/icu/bin/icuuc46.dll",
                          "build/bin/Debug"], workdir=SFNTLY_CPP_ROOT),

    # run unit tests
    Test(command=[".\\subsetter.exe", "Tuffy.ttf", "Tuffy-s.ttf"],
         workdir=SFNTLY_CPP_ROOT + "/build/bin/Debug"),
    Test(command=[".\\unit_test.exe"],
         workdir=SFNTLY_CPP_ROOT + "/build/bin/Debug")
    ]

vc10_win_factory = BuildFactory(windows_steps)

from buildbot.config import BuilderConfig

b_sfntly_clang_linux = {
    'name' : 'Clang Linux',
    'builddir' : 'clang-linux',
    'factory' : clang_unix_factory
    }
b_sfntly_gcc_linux = {
    'name' : 'GCC Linux',
    'builddir' : 'gcc-linux',
    'factory' : gcc_unix_factory
    }
b_sfntly_clang_mac = {
    'name' : 'Clang Mac',
    'builddir' : 'clang-mac',
    'factory' : clang_unix_factory
    }
b_sfntly_gcc_mac = {
    'name' : 'GCC Mac',
    'builddir' : 'gcc-mac',
    'factory' : gcc_unix_factory
    }
b_sfntly_vc10_win = {
    'name' : 'Visual C++ 10 Windows',
    'builddir' : 'vc10-win',
    'factory' : vc10_win_factory
    }

c['builders'] = [b_sfntly_clang_linux,
                 b_sfntly_gcc_linux,
                 b_sfntly_clang_mac,
                 b_sfntly_gcc_mac,
                 b_sfntly_vc10_win]

from master import master_utils
from master import slaves_list

slaves = slaves_list.SlavesList('slaves.cfg', 'Sfntly')
for builder in c['builders']:
  builder['slavenames'] = slaves.GetSlavesName(builder=builder['name'])


####### BUILDSLAVES

from buildbot.buildslave import BuildSlave

# The 'slaves' list defines the set of allowable buildslaves. List all the
# slaves registered to a builder. Remove dupes.
c['slaves'] = master_utils.AutoSetupSlaves(c['builders'],
                                           'sfntly')

# Make sure everything works together.
master_utils.VerifySetup(c, slaves)

# 'slavePortnum' defines the TCP port to listen on for connections from slaves.
# This must match the value configured into the buildslaves (with their
# --master option)
c['slavePortnum'] = 9989

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.
# In this case, just kick off a 'runtests' build

# Run all tests 30 seconds after a change has been detected
from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers import timed

allBuilders = [builder['name'] for builder in c['builders']]
c['schedulers'] = [
    SingleBranchScheduler(
        name="all",
        branch=None,
        treeStableTimer=30,
        builderNames=allBuilders)
    ]

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import auth, authz
authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    gracefulShutdown = False,
    forceBuild = True, # use this to test your slave once it is set up
    forceAllBuilds = False,
    pingBuilder = True,
    stopBuild = True,
    stopAllBuilds = True,
    cancelPendingBuild = True,
)
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "sfntly"
c['titleURL'] = "http://code.google.com/p/sfntly/"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://bitground.mtv.google.com:8010/"

####### DB URL

# This specifies what database buildbot uses to store change and scheduler
# state.  You can leave this at its default for all but the largest
# installations.
c['db_url'] = "sqlite:///state.sqlite"
