# -*- python -*-
# ex: set syntax=python:

# Copyright (c) 2011 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# This is the buildmaster config file for the 'chromium' bot. It must
# be installed as 'master.cfg' in your buildmaster's base directory
# (although the filename can be changed with the --basedir option to
# 'mktap buildbot master').

# It has one job: define a dictionary named BuildmasterConfig. This
# dictionary has a variety of keys to control different aspects of the
# buildmaster. They are documented in docs/config.xhtml .

# This file follows this naming convention:
# Factories: f_cr_[dbg/rel]_[type]
# Builders:  b_chromium_[dbg/rel]_[os]_[type]
# BuildDir:  chromium-[dbg/rel]-[os]-[type]
#
# os = xp/vista/linux/mac
# type = perf

from buildbot.changes import svnpoller
from buildbot.scheduler import Scheduler
from buildbot.scheduler import Triggerable

from master import build_utils
from master import master_config
from master import master_utils
from master import perf_notifier
from master import slaves_list
from master.factory import chromium_factory

import config

ActiveMaster = config.Master.ChromiumPerfClang

# Enable PERF_NOTIFIER in production to send cmp@google.com perf alerts.
PERF_NOTIFIER = ActiveMaster.is_production_host

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

# 'slavePortnum' defines the TCP port to listen on. This must match the value
# configured into the buildslaves (with their --master option)
c['slavePortnum'] = ActiveMaster.slave_port

# Disable compression for the stdio files.
c['logCompressionLimit'] = False

# Load the list of slaves.
slaves = slaves_list.SlavesList('slaves.cfg', 'ChromiumPerfClang')

####### CHANGESOURCES

# the 'change_source' list tells the buildmaster how it should find out about
# source code changes. Any class which implements IChangeSource can be added
# to this list: there are several in buildbot/changes/*.py to choose from.
def ChromeTreeFileSplitter(path):
  """split_file for the 'src' project in the trunk."""

  # Exclude .DEPS.git from triggering builds on chrome.
  if path == 'src/.DEPS.git':
    return None

  # List of projects we are interested in. The project names must exactly
  # match paths in the Subversion repository, relative to the 'path' URL
  # argument. build_utils.SplitPath() will use them as branch names to
  # kick off the Schedulers for different projects.
  projects = ['src']
  return build_utils.SplitPath(projects, path)

# Polls config.Master.trunk_url for changes
chromium_rev = 'http://src.chromium.org/viewvc/chrome?view=rev&revision=%s'
trunk_poller = svnpoller.SVNPoller(svnurl=config.Master.trunk_url,
                                   split_file=ChromeTreeFileSplitter,
                                   pollinterval=10,
                                   revlinktmpl=chromium_rev)

c['change_source'] = [trunk_poller]


####### SCHEDULERS

## configure the Schedulers

# Scheduler to trigger slaves that depend on the mac release build.
s_chromium_macrel_builder = Scheduler(name='chromium_macrel_builder',
                                      branch='src',
                                      treeStableTimer=60,
                                      builderNames=['Mac Builder'])

s_chromium_macrel_trigger = Triggerable('macrel',
                                        ['Mac10.5 Perf',
                                         'Mac10.6 Perf',
                                        ])

c['schedulers'] = [
                   s_chromium_macrel_builder,
                   s_chromium_macrel_trigger,
                  ]

####### BUILDERS

# buildbot/process/factory.py provides several BuildFactory classes you can
# start with, which implement build processes for common targets (GNU
# autoconf projects, CPAN perl modules, etc). The factory.BuildFactory is the
# base class, and is configured with a series of BuildSteps. When the build
# is run, the appropriate buildslave is told to execute each Step in turn.

# the first BuildStep is typically responsible for obtaining a copy of the
# sources. There are source-obtaining Steps in buildbot/process/step.py for
# CVS, SVN, and others.

builders = []

# ----------------------------------------------------------------------------
# FACTORIES

m_mac = chromium_factory.ChromiumFactory('src/build', 'darwin')

# Some shortcut to simplify the code below.
F_MAC = m_mac.ChromiumFactory

# TODO(thakis): Change that to whatever the clang rel builder's output directory
# will be.
chromium_rel_mac_archive = master_config.GetArchiveUrl('ChromiumPerfClang',
    'Mac Builder',
    'chromium-rel-mac-builder',
    'mac')

# The identifier of the factory is the build configuration. If two factories
# are using the same build configuration, they should have the same identifier.

# BuilderTesters using a custom build configuration.

f_cr_rel_mac_builder = F_MAC(slave_type='Builder',
                             options=['--compiler=clang', '--',
                                      '-target', 'chromium_builder_perf'],
                             factory_properties={
                                 'trigger': 'macrel',
                                 'gclient_env':  {
                                     'GYP_DEFINES':'clang=1 clang_use_chrome_plugins=1'
                                 },
                             })

# Helper since the 10.5 vs 10.6 differences are just for ids.
def RelMacPerfTester(perf_id, tests):
  return F_MAC(slave_type='Tester',
               build_url=chromium_rel_mac_archive,
               tests=tests,
               factory_properties={'show_perf_results': True,
                                   'expectations': True,
                                   'halt_on_missing_build': True,
                                   'perf_id': perf_id})

# TODO: XP/Vista Perf also runs: 'reliability', 'dom_checker'
# Tests are split across machines to get all the perf data as quickly as
# possible.
f_cr_rel_mac5_perf = RelMacPerfTester('chromium-rel-mac5-clang',
                                        ['page_cycler', 'page_cycler_http',
                                         'startup', 'tab_switching', 'memory',
                                         'v8_benchmark', 'sunspider',
                                         'dom_perf',
                                         'dromaeo', 'plugin',
                                        ])

# Same setup as 10.5, just using 10.6 naming.
f_cr_rel_mac6_perf = RelMacPerfTester('chromium-rel-mac6-clang',
                                        ['page_cycler', 'page_cycler_http',
                                         'startup', 'tab_switching', 'memory',
                                         'v8_benchmark', 'sunspider',
                                         'dom_perf',
                                         'dromaeo', 'plugin',
                                        ])


# ----------------------------------------------------------------------------
# BUILDER DEFINITIONS

# The 'builders' list defines the Builders. Each one is configured with a
# dictionary, using the following keys:
#  name (required): the name used to describe this bilder
#  builddir (required): which subdirectory to run the builder in
#  factory (required): a BuildFactory to define how the build is run
#  periodicBuildTime (optional): if set, force a build every N seconds
#  category (optional): it is not used in the normal 'buildbot' meaning. It is
#                       used by gatekeeper to determine which steps it should
#                       look for to close the tree.
#

b_chromium_rel_mac_builder = {'name': 'Mac Builder',
  'builddir': 'chromium-rel-mac-builder',
  'factory': f_cr_rel_mac_builder,
  'category': '3mac|builders_compile',
}

b_chromium_rel_mac5_perf = {'name': 'Mac10.5 Perf',
  'builddir': 'chromium-rel-mac5-perf',
  'factory': f_cr_rel_mac5_perf,
  'category': '3mac|builder_testers',
}

b_chromium_rel_mac6_perf = {'name': 'Mac10.6 Perf',
  'builddir': 'chromium-rel-mac6-perf',
  'factory': f_cr_rel_mac6_perf,
  'category': '3mac|builder_testers',
}

c['builders'] = [
  b_chromium_rel_mac_builder,
  b_chromium_rel_mac5_perf,
  b_chromium_rel_mac6_perf,
]


####### BUILDSLAVES

# Associate the slaves to the manual builders. The configuration is in
# slaves.cfg.
for builder in c['builders']:
  builder['slavenames'] = slaves.GetSlavesName(builder=builder['name'])

# The 'slaves' list defines the set of allowable buildslaves. List all the
# slaves registered to a builder. Remove dupes.
c['slaves'] = master_utils.AutoSetupSlaves(c['builders'],
                                           config.Master.GetBotPassword())
master_utils.VerifySetup(c, slaves)


####### STATUS TARGETS

# Adds common status and tools to this master.
master_utils.AutoSetupMaster(c, ActiveMaster,
                             public_html="../master.chromium/public_html")

# Add more.

if PERF_NOTIFIER:
  categories_steps = {
    '': ['update'],
    'builder_testers': [
      # Perf tests
      'dom_perf',
      'memory_test',
      'new_tab_ui_cold_test',
      'new_tab_ui_warm_test',
      'page_cycler_bloat-http',
      'page_cycler_dhtml',
      'page_cycler_intl1',
      'page_cycler_intl2',
      'page_cycler_morejs',
      'page_cycler_moz',
      'page_cycler_moz-http',
      'startup_test',
      'tab_switching_test',
     ],
    'builders_windows': [],
    'builders_compile': []
  }
  exclusions = { }
  forgiving_steps = ['update_scripts', 'update', 'svnkill', 'taskkill',
                     'archive_build', 'start_crash_handler']
  c['status'].append(perf_notifier.PerfNotifier(
      fromaddr=ActiveMaster.from_address,
      categories_steps=categories_steps,
      exclusions=exclusions,
      relayhost=config.Master.smtp,
      status_header='Perf alert on "%(builder)s":\n%(steps)s',
      subject='buildbot %(result)s in %(projectName)s on %(builder)s, '
              'revision %(revision)s',
      extraRecipients=['cmp@google.com'],
      lookup=master_utils.FilterDomain(),
      forgiving_steps=forgiving_steps,
      use_getname=True))

####### PROJECT IDENTITY

# the 'projectName' string will be used to describe the project that this
# buildbot is working on. For example, it is used as the title of the
# waterfall HTML page. The 'projectURL' string will be used to provide a link
# from buildbot HTML pages to your project's home page.

c['projectName'] = ActiveMaster.project_name
c['projectURL'] = config.Master.project_url

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.Waterfall page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = 'http://build.chromium.org/p/chromium.perf.clang/'
