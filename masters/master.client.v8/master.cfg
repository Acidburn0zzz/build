# -*- python -*-
# ex: set syntax=python:

# Copyright (c) 2010 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# This is the buildmaster config file for the 'v8' bot. It must
# be installed as 'master.cfg' in your buildmaster's base directory
# (although the filename can be changed with the --basedir option to
# 'mktap buildbot master').

# It has one job: define a dictionary named BuildmasterConfig. This
# dictionary has a variety of keys to control different aspects of the
# buildmaster. They are documented in docs/config.xhtml .

from buildbot import locks
from buildbot.buildslave import BuildSlave
from buildbot.changes import svnpoller
from buildbot.steps import shell
from buildbot.scheduler import Dependent
from buildbot.scheduler import Nightly
from buildbot.scheduler import Scheduler
from buildbot.scheduler import Triggerable

from master import build_utils
from master import master_utils
from master import slaves_list
from master.factory import v8_factory
from master.factory import chromium_factory

import config

ActiveMaster = config.Master.V8

SVN_POLLER = True

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}


####### CHANGESOURCES

# the 'change_source' list tells the buildmaster how it should find out about
# source code changes. Any class which implements IChangeSource can be added
# to this list: there are several in buildbot/changes/*.py to choose from.
def V8TreeFileSplitter(path):
  """split_file for the 'src' project in the trunk."""

  # List of projects we are interested in. The project names must exactly
  # match paths in the Subversion repository, relative to the 'path' URL
  # argument. build_utils.SplitPath() will use them as branch names to
  # kick off the Schedulers for different projects.
  projects = ['bleeding_edge']
  return build_utils.SplitPath(projects, path)

if SVN_POLLER:
  # Polls config.Master.trunk_url for changes
  # config.Master.trunk_url,
  trunk_poller = svnpoller.SVNPoller(svnurl=config.Master.v8_branch_url,
                                     split_file=V8TreeFileSplitter,
                                     pollinterval=10)

  c['change_source'] = [trunk_poller]


####### SCHEDULERS

## configure the Schedulers
# v8 Scheduler
s_v8 = Scheduler(name='v8_src',
                 branch='bleeding_edge',
                 treeStableTimer=60,
                 builderNames=['V8 Linux',
                               'V8 Linux64',
                               'V8 Linux - debug',
                               'V8 Linux64 - debug',
                               'V8 Linux - nosnap',
                               'V8 Linux - nosnap - debug',
                               'V8 Win32',
                               'V8 Win32 - debug',
                               'V8 Win64',
                               'V8 Mac',
                               'V8 Mac - debug',
                               'V8 Linux - arm - sim',
                               'V8 Linux - arm - sim - debug',
                               'XP Interactive (dbg)',
                               'Linux Interactive (dbg)',
                               'Webkit',
                               'Webkit Mac',
                               'Webkit Linux',
                               'Webkit Linux 64'])



# Scheduler to trigger slaves that depend on the release build.
s_v8_arm_builder = Scheduler(name='v8_arm_builder',
                                   branch='bleeding_edge',
                                   treeStableTimer=60,
                                   builderNames=['V8 Arm - builder'])

s_v8_arm_dependent = Dependent('v8_arm_dependent',
                                     s_v8_arm_builder,
                                     ['V8 Arm - tester'])



# These builders runs daily. The perf runners because they make the waterfall
# hang. TODO(ricow) - test if this is still the case on the new waterfall. 
s_v8_daily= Nightly(name='v8_thrice_daily',
                                 builderNames=['V8 Fuzzer',
                                               'XP Perf',
                                               'Mac10.5 Perf'],
                                 hour=[19],
                                 minute=30)


c['schedulers'] = [s_v8, s_v8_daily, s_v8_arm_builder, s_v8_arm_dependent]


# buildbot/process/factory.py provides several BuildFactory classes you can
# start with, which implement build processes for common targets (GNU
# autoconf projects, CPAN perl modules, etc). The factory.BuildFactory is the
# base class, and is configured with a series of BuildSteps. When the build
# is run, the appropriate buildslave is told to execute each Step in turn.

# the first BuildStep is typically responsible for obtaining a copy of the
# sources. There are source-obtaining Steps in buildbot/process/step.py for
# CVS, SVN, and others.

builders = []

# ----------------------------------------------------------------------------
# FACTORIES

m_linux = v8_factory.V8Factory('bleeding_edge',
                               target_platform='linux2')

m_linux64 = v8_factory.V8Factory('bleeding_edge',
                                 target_platform='linux64')

m_win32 = v8_factory.V8Factory('bleeding_edge',
                               target_platform='win32')

m_mac = v8_factory.V8Factory('bleeding_edge',
                             target_platform='darwin')

# Note target platform is still win32 - because this is how it is done in scons.
# This is intentionally left as a seperate builder in case this changes.
m_win64 = v8_factory.V8Factory('bleeding_edge',
                               target_platform='win32')

v8_arm_builder_archive = ('http://%s.jail.google.com/'
                         'v8-arm-builder/chrome_staging/'
                         'full-build-linux.zip' %
                         'jega178')


crosstool_prefix = (
  '/usr/local/crosstool-trusted/arm-2009q3/bin/arm-none-linux-gnueabi/'
  'bin/arm-none-linux-gnueabi')


F = chromium_factory.ChromiumFactory
def win(): return F('src/chrome', 'win32')
def win_webkit(): return F('src/webkit', 'win32')
def mac(): return F('src/build', 'darwin')
def linux(): return F('src/build', 'linux2')

# The identifier of the factory is the build configuration. If two factories
# are using the same build configuration, they should have the same identifier.

# The identifier of the factory is the build configuration. If two factories
# are using the same build configuration, they should have the same identifier.

f_v8_linux = m_linux.V8Factory(
    identifier='V8-linux',
    options=['snapshot=on',
             'cctests',
             'sample',
             '--build-tool=scons_v8'],
    tests=['v8testing', 'v8_es5conform', 'sputnik', 'mozilla', 'presubmit'])

f_v8_linux_debug = m_linux.V8Factory(
    identifier='V8-linux-debug',
    options=['snapshot=on',
             'cctests',
             'sample',
             '--build-tool=scons_v8'],
    target='debug',
    tests=['v8testing', 'v8_es5conform', 'sputnik', 'mozilla'])

f_v8_linux64 = m_linux64.V8Factory(
    identifier='V8-linux64',
    options=['snapshot=on',
             'arch=x64',
             'cctests',
             'sample',
             '--build-tool=scons_v8'],
    tests=['v8testing', 'v8_es5conform', 'sputnik', 'mozilla'],
    target_arch='x64')

f_v8_linux64_debug = m_linux64.V8Factory(
    identifier='V8-linux64-debug',
    options=['snapshot=on',
             'cctests',
             'sample',
             'arch=x64',
             '--build-tool=scons_v8'],
    target='debug',
    tests=['v8testing', 'v8_es5conform', 'sputnik', 'mozilla'],
    target_arch='x64')

f_v8_linux_nosnap = m_linux.V8Factory(
    identifier='V8-linux-nosnap',
    options=['cctests',
             'sample',
             '--build-tool=scons_v8'],
    tests=['v8testing', 'v8_es5conform', 'sputnik', 'mozilla'])

f_v8_linux_nosnap_debug = m_linux.V8Factory(
    identifier='V8-linux-nosnap-debug',
    options=['cctests',
             'sample',
             '--build-tool=scons_v8'],
    target='debug',
    tests=['v8testing', 'v8_es5conform', 'sputnik', 'mozilla'])

f_v8_linux_arm_sim = m_linux.V8Factory(
    identifier='V8-linux-arm-sim',
    options=['snapshot=on',
             'cctests',
             'sample',
             'simulator=arm',
             '--build-tool=scons_v8'],
    tests=['arm'])

f_v8_linux_arm_sim_debug = m_linux.V8Factory(
    identifier='V8-linux-arm-sim-debug',
    options=['snapshot=on',
             'cctests',
             'sample',
             'simulator=arm',
             '--build-tool=scons_v8'],
    target='debug',
    tests=['arm'])

f_v8_win32 = m_win32.V8Factory(
    identifier='V8-win32',
    options=['snapshot=on',
             'cctests',
             'sample',
             '--build-tool=scons_v8'],
    tests=['v8testing', 'v8_es5conform', 'sputnik', 'mozilla'])

f_v8_win32_debug = m_win32.V8Factory(
      identifier='V8-win32-debug',
      options=['snapshot=on',
               'cctests',
               'sample',
               '--build-tool=scons_v8'],
      target='debug',
      tests=['v8testing', 'v8_es5conform', 'sputnik', 'mozilla'])

f_v8_win64 = m_win64.V8Factory(
      identifier='V8-win64',
      options=['cctests',
               'sample',
               'arch=x64',
               '--build-tool=scons_v8'],
      tests=['v8testing', 'v8_es5conform', 'sputnik', 'mozilla'],
      target_arch='x64')

f_v8_mac = m_mac.V8Factory(
    identifier='V8-mac',
    options=['snapshot=on',
             'cctests',
             'sample',
             '--build-tool=scons_v8'],
    tests=['v8testing', 'v8_es5conform', 'sputnik', 'mozilla'])


f_v8_mac_debug = m_mac.V8Factory(
    identifier='V8-mac-debug',
    options=['snapshot=on',
             'cctests',
             'sample',
             '--build-tool=scons_v8'],
    target='debug',
    tests=['v8testing', 'v8_es5conform', 'sputnik', 'mozilla'])


f_v8_fuzz = m_linux.V8Factory(
    identifier='V8-fuzz',
    options=['cctests',
             'sample',
             '--build-tool=scons_v8'],
    target='debug,release',
    tests=['fuzz'])

f_chromium_rel_perf_xp_dual_v8 = win().ChromiumV8LatestFactory(
    'chromium-rel',
    tests=['page_cycler', 'startup', 'dom_perf',
           'page_cycler_http',
           'memory', 'sunspider', 'v8_benchmark', 'dromaeo'],
    factory_properties={'perf_id': 'chromium-rel-xp-dual-v8',
                        'show_perf_results': True})

f_chromium_dbg_xp_interactive_v8 = win().ChromiumV8LatestFactory(
    'chromium-dbg',
    tests=['interactive_ui'],
    factory_properties={'process_dumps': True,
                        'start_crash_handler': True,})

f_chromium_dbg_linux_interactive_v8 = linux().ChromiumV8LatestFactory(
    'chromium-dbg',
    tests=['interactive_ui'],
    options=['interactive_ui_tests'])

f_chromium_rel_mac5_perf_v8 = mac().ChromiumV8LatestFactory(
    'chromium-rel-mac5',
    tests=['page_cycler', 'startup', 'dom_perf',
           'page_cycler_http', 'tab_switching',
           'sunspider', 'v8_benchmark', 'dromaeo',
           'memory'],
    options=['--', '-project', '../chrome/chrome.xcodeproj'],
    factory_properties={'perf_id': 'chromium-rel-mac5-v8',
                        'show_perf_results': True})

f_webkit_rel_v8 = win_webkit().ChromiumV8LatestFactory('webkit-rel-v8',
    tests=['test_shell', 'webkit', 'webkit_unit'],
    factory_properties={'archive_webkit_results': True})

f_webkit_rel_mac_v8 = mac().ChromiumV8LatestFactory(
    'webkit-rel-mac-v8',
    tests=['test_shell', 'webkit', 'webkit_unit'],
    factory_properties={'archive_webkit_results': True},
    options=['--', '-project',
             '../webkit/webkit.xcodeproj'])

f_webkit_rel_linux_v8 = linux().ChromiumV8LatestFactory(
    'webkit-rel-linux-v8',
    tests=['test_shell', 'webkit', 'webkit_unit'],
    options=['--build-tool=make', 'test_shell', 'test_shell_tests',
             'webkit_unit_tests'],
    factory_properties={'archive_webkit_results': True,
                        'gclient_env': {'GYP_GENERATORS' : 'make'}})

f_webkit_rel_linux64_v8 = linux().ChromiumV8LatestFactory(
    'webkit-rel-linux64-v8',
    tests=['test_shell', 'webkit', 'webkit_unit'],
    options=['--build-tool=make', 'test_shell', 'test_shell_tests',
             'webkit_unit_tests'],
    factory_properties={'archive_webkit_results': True,
                        'gclient_env': {'GYP_GENERATORS' : 'make'}})

f_v8_arm_builder = m_linux.V8Factory('V8-arm-builder',
    target='release',
    tests=[],
    compile_timeout=3600,
    options=[
      '--build-tool=scons_v8',
      'arch=arm',
      'sample',
      'cctests',
      '--crosstool=' + crosstool_prefix],
    factory_properties={'archive_build': True}
    )

f_v8_arm_tester = m_linux.V8Factory('V8-arm-tester',
    build_url=v8_arm_builder_archive,
    target='release',
    slave_type='Tester',
    tests=['v8testing', 'v8_es5conform', 'sputnik', 'mozilla'])



# ----------------------------------------------------------------------------
# BUILDER DEFINITIONS

# The 'builders' list defines the Builders. Each one is configured with a
# dictionary, using the following keys:
#  name (required): the name used to describe this bilder
#  slavename (required): which slave to use, must appear in c['slaves']
#  builddir (required): which subdirectory to run the builder in
#  factory (required): a BuildFactory to define how the build is run
#  periodicBuildTime (optional): if set, force a build every N seconds
#  category (optional): it is not used in the normal 'buildbot' meaning. It is
#                       used by gatekeeper to determine which steps it should
#                       look for to close the tree.
#


b_v8_linux = {
  'name': 'V8 Linux',
  'builddir': 'v8-linux',
  'factory': f_v8_linux,
}

b_v8_linux64 = {
  'name': 'V8 Linux64',
  'builddir': 'v8-linux64',
  'factory': f_v8_linux64,
}

b_v8_linux_debug = {
  'name': 'V8 Linux - debug',
  'builddir': 'v8-linux-debug',
  'factory': f_v8_linux_debug,
}

b_v8_linux64_debug = {
  'name': 'V8 Linux64 - debug',
  'builddir': 'v8-linux64-debug',
  'factory': f_v8_linux64_debug,
}

b_v8_linux_nosnap = {
  'name': 'V8 Linux - nosnap',
  'builddir': 'v8-linux-nosnap',
  'factory': f_v8_linux_nosnap,
}

b_v8_linux_nosnap_debug = {
  'name': 'V8 Linux - nosnap - debug',
  'builddir': 'v8-linux-nosnap-debug',
  'factory': f_v8_linux_nosnap_debug,
}

b_v8_linux_arm_sim = {
  'name': 'V8 Linux - arm - sim',
  'builddir': 'v8-linux-arm-sim',
  'factory': f_v8_linux_arm_sim,
}

b_v8_linux_arm_sim_debug = {
  'name': 'V8 Linux - arm - sim - debug',
  'builddir': 'v8-linux-arm-sim-debug',
  'factory': f_v8_linux_arm_sim_debug,
}

b_v8_win32 = {
  'name': 'V8 Win32',
  'builddir': 'v8-win32',
  'factory': f_v8_win32,
}

b_v8_win32_debug = {
  'name': 'V8 Win32 - debug',
  'builddir': 'v8-win32-debug',
  'factory': f_v8_win32_debug,
}

b_v8_mac = {
  'name': 'V8 Mac',
  'builddir': 'v8-mac',
  'factory': f_v8_mac,
}

b_v8_mac_debug = {
  'name': 'V8 Mac - debug',
  'builddir': 'v8-mac-debug',
  'factory': f_v8_mac_debug,
}

b_v8_win64 = {
  'name': 'V8 Win64',
  'builddir': 'v8-win64',
  'factory': f_v8_win64,
}

b_v8_fuzz = {
  'name': 'V8 Fuzzer',
  'builddir': 'v8-fuzz',
  'factory': f_v8_fuzz,
}

b_chromium_rel_xp_perf_dual_v8 = {
  'name': 'XP Perf',
  'builddir': 'chromium-rel-xp-perf-dual-v8',
  'factory': f_chromium_rel_perf_xp_dual_v8,
}

b_chromium_dbg_xp_interactive_v8 = {
  'name': 'XP Interactive (dbg)',
  'builddir': 'chromium-dbg-xp-interactive-v8',
  'factory': f_chromium_dbg_xp_interactive_v8,
}

b_chromium_dbg_linux_interactive_v8 = {
  'name': 'Linux Interactive (dbg)',
  'builddir': 'chromium-dbg-linux-interactive-v8',
  'factory': f_chromium_dbg_linux_interactive_v8,
}

b_chromium_rel_mac5_perf_v8 = {
  'name': 'Mac10.5 Perf',
  'builddir': 'chromium-rel-mac5-perf-v8',
  'factory': f_chromium_rel_mac5_perf_v8,
}

b_webkit_rel_v8 = {
  'name': 'Webkit',
  'builddir': 'webkit-rel-v8',
  'factory': f_webkit_rel_v8,
}

b_webkit_rel_mac_v8 = {
  'name': 'Webkit Mac',
  'builddir': 'webkit-rel-mac-v8',
  'factory': f_webkit_rel_mac_v8,
}

b_webkit_rel_linux_v8 = {
  'name': 'Webkit Linux',
  'builddir': 'webkit-rel-linux-v8',
  'factory': f_webkit_rel_linux_v8,
}

b_webkit_rel_linux64_v8 = {
  'name': 'Webkit Linux 64',
  'builddir': 'webkit-rel-linux64-v8',
  'factory': f_webkit_rel_linux64_v8,
}

b_v8_arm_builder = {
  'name': 'V8 Arm - builder',
  'builddir': 'v8-arm-builder',
  'factory': f_v8_arm_builder,
}

b_v8_arm_tester = {
  'name': 'V8 Arm - tester',
  'builddir': 'v8-arm-tester',
  'factory': f_v8_arm_tester,
}


c['builders'] = [b_v8_linux, b_v8_linux_debug, b_v8_linux64,
                 b_v8_linux64_debug, b_v8_linux_nosnap,
                 b_v8_linux_nosnap_debug, b_v8_linux_arm_sim,
                 b_v8_linux_arm_sim_debug,
                 b_v8_win32, b_v8_win32_debug,
                 b_v8_mac, b_v8_mac_debug,
                 b_v8_fuzz,
                 b_webkit_rel_v8,
                 b_webkit_rel_mac_v8,
                 b_webkit_rel_linux_v8,
                 b_chromium_dbg_xp_interactive_v8,
                 b_chromium_dbg_linux_interactive_v8,
                 b_chromium_rel_xp_perf_dual_v8,
                 b_chromium_rel_mac5_perf_v8,
                 b_webkit_rel_linux64_v8,
                 b_v8_win64,
                 b_v8_arm_builder,
                 b_v8_arm_tester]

# Associate the slaves to the builders. The configuration is in slaves.cfg.
slaves = slaves_list.SlavesList('slaves.cfg', 'v8')
for builder in c['builders']:
  builder['slavenames'] = slaves.GetSlavesName(builder=builder['name'])


####### BUILDSLAVES

# The 'slaves' list defines the set of allowable buildslaves. List all the
# slaves registered to a builder. Remove dupes.
c['slaves'] = master_utils.AutoSetupSlaves(c['builders'],
                                           config.Master.GetBotPassword())

# Make sure everything works together.
master_utils.VerifySetup(c, slaves)


####### STATUS TARGETS

# Adds common status and tools to this master.
master_utils.AutoSetupMaster(c, ActiveMaster)


####### PROJECT IDENTITY

# Buildbot master url:
c['buildbotURL'] = 'http://localhost:8010/'
c['projectName'] = ActiveMaster.project_name
c['projectURL'] = config.Master.project_url
