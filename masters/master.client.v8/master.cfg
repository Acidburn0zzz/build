# -*- python -*-
# ex: set syntax=python:

# Copyright (c) 2011 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# This is the buildmaster config file for the 'v8' bot. It must
# be installed as 'master.cfg' in your buildmaster's base directory
# (although the filename can be changed with the --basedir option to
# 'mktap buildbot master').

# It has one job: define a dictionary named BuildmasterConfig. This
# dictionary has a variety of keys to control different aspects of the
# buildmaster. They are documented in docs/config.xhtml .

from buildbot.changes import svnpoller
from buildbot.scheduler import Dependent
from buildbot.scheduler import Nightly
from buildbot.scheduler import Scheduler
from buildbot.scheduler import Triggerable

from master import build_utils
from master import master_utils
from master import slaves_list
from master.factory import v8_factory
from master.factory import chromium_factory

import config

ActiveMaster = config.Master.V8

SVN_POLLER = True

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}


####### CHANGESOURCES

# the 'change_source' list tells the buildmaster how it should find out about
# source code changes. Any class which implements IChangeSource can be added
# to this list: there are several in buildbot/changes/*.py to choose from.
def V8TreeFileSplitter(path):
  """split_file for the 'src' project in the trunk."""

  # List of projects we are interested in. The project names must exactly
  # match paths in the Subversion repository, relative to the 'path' URL
  # argument. build_utils.SplitPath() will use them as branch names to
  # kick off the Schedulers for different projects.
  projects = ['bleeding_edge']
  return build_utils.SplitPath(projects, path)

if SVN_POLLER:
  # Polls config.Master.trunk_url for changes
  # config.Master.trunk_url,
  bleeding_poller = svnpoller.SVNPoller(
      svnurl=config.Master.v8_branch_url,
      split_file=V8TreeFileSplitter,
      pollinterval=10)

  c['change_source'] = [bleeding_poller]


####### SCHEDULERS

## configure the Schedulers
# v8 Scheduler
s_v8 = Scheduler(name='v8_src',
                 branch='bleeding_edge',
                 treeStableTimer=60,
                 builderNames=['V8 Linux',
                               'V8 Linux - debug',
                               'V8 Linux - debug - mozilla',
                               'V8 Linux - debug - sputnik',
                               'V8 Linux64',
                               'V8 Linux64 - debug',
                               'V8 Linux64 - debug - mozilla',
                               'V8 Linux64 - debug - sputnik',
                               'V8 Linux - nosnap',
                               'V8 Linux - nosnap - debug',
                               'V8 Linux - nosnap - debug - mozilla',
                               'V8 Linux - nosnap - debug - sputnik',
                               'V8 Linux - isolates',
                               'V8 Linux - nosse2',
                               'V8 Linux - nosse3',
                               'V8 Linux - nosse4',
                               'V8 Win32',
                               'V8 Win32 - mozilla',
                               'V8 Win32 - sputnik',
                               'V8 Win32 - debug - 1',
                               'V8 Win32 - debug - 2',
                               'V8 Win32 - debug - mozilla - 1',
                               'V8 Win32 - debug - mozilla - 2',
                               'V8 Win32 - debug - sputnik - 1',
                               'V8 Win32 - debug - sputnik - 2',
                               'V8 Win64',
                               'V8 Mac',
                               'V8 Mac - debug',
                               'V8 Mac - debug - mozilla',
                               'V8 Linux - arm - sim',
                               'V8 Linux - arm - sim - mozilla',
                               'V8 Linux - arm - sim - debug',
                               'V8 Linux - arm - sim - debug - mozilla - 1',
                               'V8 Linux - arm - sim - debug - mozilla - 2',
                               'V8 Linux - arm - sim - debug - sputnik',
                               'Vista Perf',
                               'Mac10.6 Perf',
                               'Linux Interactive (dbg)',
                               'Win Reliability Builder',
                               'Webkit',
                               'Webkit Mac',
                               'Webkit Linux',
                               'Webkit Linux 64'])

# Scheduler to trigger slaves that depend on the release build.
s_v8_arm_builder = Scheduler(name='v8_arm_builder',
                                   branch='bleeding_edge',
                                   treeStableTimer=60,
                                   builderNames=['V8 Arm - builder'])

s_v8_arm_dependent = Dependent('v8_arm_dependent',
                               s_v8_arm_builder,
                               ['V8 Arm - tester'])


# These builders runs daily. The perf runners because they make the waterfall
# hang. TODO(ricow) - test if this is still the case on the new waterfall.
s_v8_daily = Nightly(name='v8_thrice_daily',
                     builderNames=['V8 Fuzzer',],
                     hour=[19],
                     minute=30)

# A triggerable scheduler used for the reliability tests.
s_win_reliability = Triggerable('reliability', ['Win Reliability'])

c['schedulers'] = [s_v8, s_v8_daily, s_v8_arm_builder, s_v8_arm_dependent,
                   s_win_reliability]


# buildbot/process/factory.py provides several BuildFactory classes you can
# start with, which implement build processes for common targets (GNU
# autoconf projects, CPAN perl modules, etc). The factory.BuildFactory is the
# base class, and is configured with a series of BuildSteps. When the build
# is run, the appropriate buildslave is told to execute each Step in turn.

# the first BuildStep is typically responsible for obtaining a copy of the
# sources. There are source-obtaining Steps in buildbot/process/step.py for
# CVS, SVN, and others.

builders = []

# ----------------------------------------------------------------------------
# FACTORIES

m_linux = v8_factory.V8Factory('bleeding_edge',
                               target_platform='linux2')

m_linux64 = v8_factory.V8Factory('bleeding_edge',
                                 target_platform='linux64')

m_win32 = v8_factory.V8Factory('bleeding_edge',
                               target_platform='win32')

m_mac = v8_factory.V8Factory('bleeding_edge',
                             target_platform='darwin')

# Note target platform is still win32 - because this is how it is done in scons.
# This is intentionally left as a seperate builder in case this changes.
m_win64 = v8_factory.V8Factory('bleeding_edge',
                               target_platform='win32')

v8_arm_builder_archive = ('http://%s/'
                         'v8-arm-builder/chrome_staging/'
                         'full-build-linux.zip' %
                         'vm54-m3')


crosstool_prefix = (
  '/usr/local/crosstool-trusted/arm-2009q3/bin/arm-none-linux-gnueabi/'
  'bin/arm-none-linux-gnueabi')


F = chromium_factory.ChromiumFactory
def win(): return F('src/build', 'win32')
def win_webkit(): return F('src/webkit', 'win32')
def mac(): return F('src/build', 'darwin')
def linux(): return F('src/build', 'linux2')

# The identifier of the factory is the build configuration. If two factories
# are using the same build configuration, they should have the same identifier.

# The identifier of the factory is the build configuration. If two factories
# are using the same build configuration, they should have the same identifier.

f_v8_linux = m_linux.V8Factory(
    options=['snapshot=on',
             'preparser',
             'cctests',
             'sample',
             '--build-tool=scons_v8'],
    tests=['v8testing', 'v8_es5conform', 'sputnik', 'mozilla', 'presubmit'])

f_v8_linux_debug = m_linux.V8Factory(
    options=['snapshot=on',
             'preparser',
             'cctests',
             'sample',
             '--build-tool=scons_v8'],
    target='debug',
    tests=['v8testing', 'v8_es5conform'])

f_v8_linux_debug_mozilla = m_linux.V8Factory(
    options=['snapshot=on',
             'preparser',
             'cctests',
             'sample',
             '--build-tool=scons_v8'],
    target='debug',
    tests=['mozilla'])

f_v8_linux_debug_sputnik = m_linux.V8Factory(
    options=['snapshot=on',
             'preparser',
             'cctests',
             'sample',
             '--build-tool=scons_v8'],
    target='debug',
    tests=['sputnik'])

f_v8_linux64 = m_linux64.V8Factory(
    options=['snapshot=on',
             'arch=x64',
             'preparser',
             'cctests',
             'sample',
             '--build-tool=scons_v8'],
    tests=['v8testing', 'v8_es5conform', 'sputnik', 'mozilla'],
    target_arch='x64')

f_v8_linux64_debug = m_linux64.V8Factory(
    options=['snapshot=on',
             'cctests',
             'preparser',
             'sample',
             'arch=x64',
             '--build-tool=scons_v8'],
    target='debug',
    tests=['v8testing', 'v8_es5conform'],
    target_arch='x64')

f_v8_linux64_debug_mozilla = m_linux64.V8Factory(
    options=['snapshot=on',
             'cctests',
             'preparser',
             'sample',
             'arch=x64',
             '--build-tool=scons_v8'],
    target='debug',
    tests=['mozilla'],
    target_arch='x64')

f_v8_linux64_debug_sputnik = m_linux64.V8Factory(
    options=['snapshot=on',
             'cctests',
             'preparser',
             'sample',
             'arch=x64',
             '--build-tool=scons_v8'],
    target='debug',
    tests=['sputnik'],
    target_arch='x64')

f_v8_linux_nosnap = m_linux.V8Factory(
    options=['cctests',
             'preparser',
             'sample',
             '--build-tool=scons_v8'],
    tests=['v8testing', 'v8_es5conform', 'sputnik', 'mozilla'])

f_v8_linux_nosnap_debug = m_linux.V8Factory(
    options=['cctests',
             'preparser',
             'sample',
             '--build-tool=scons_v8'],
    target='debug',
    tests=['v8testing', 'v8_es5conform'])

f_v8_linux_nosnap_debug_mozilla = m_linux.V8Factory(
    options=['cctests',
             'preparser',
             'sample',
             '--build-tool=scons_v8'],
    target='debug',
    tests=['mozilla'])

f_v8_linux_nosnap_debug_sputnik = m_linux.V8Factory(
    options=['cctests',
             'preparser',
             'sample',
             '--build-tool=scons_v8'],
    target='debug',
    tests=['sputnik'])

f_v8_linux_arm_sim = m_linux.V8Factory(
    options=['snapshot=on',
             'preparser',
             'cctests',
             'sample',
             'simulator=arm',
             '--build-tool=scons_v8'],
    tests=['v8testing', 'v8_es5conform', 'sputnik'],
    target_arch='arm')

f_v8_linux_arm_sim_mozilla = m_linux.V8Factory(
    options=['snapshot=on',
             'preparser',
             'cctests',
             'sample',
             'simulator=arm',
             '--build-tool=scons_v8'],
    tests=['mozilla'],
    target_arch='arm')

f_v8_linux_arm_sim_debug = m_linux.V8Factory(
    options=['snapshot=on',
             'preparser',
             'cctests',
             'sample',
             'simulator=arm',
             '--build-tool=scons_v8'],
    target='debug',
    tests=['v8testing', 'v8_es5conform'],
    target_arch='arm')

f_v8_linux_arm_sim_debug_mozilla = m_linux.V8Factory(
    options=['snapshot=on',
             'preparser',
             'cctests',
             'sample',
             'simulator=arm',
             '--build-tool=scons_v8'],
    target='debug',
    tests=['mozilla'],
    target_arch='arm')

f_v8_linux_arm_sim_debug_mozilla_1 = m_linux.V8Factory(
    options=['snapshot=on',
             'preparser',
             'cctests',
             'sample',
             'simulator=arm',
             '--build-tool=scons_v8'],
    target='debug',
    tests=['mozilla'],
    target_arch='arm',
    shard_count=2,
    shard_run=1)

f_v8_linux_arm_sim_debug_mozilla_2 = m_linux.V8Factory(
    options=['snapshot=on',
             'preparser',
             'cctests',
             'sample',
             'simulator=arm',
             '--build-tool=scons_v8'],
    target='debug',
    tests=['mozilla'],
    target_arch='arm',
    shard_count=2,
    shard_run=2)

f_v8_linux_arm_sim_debug_sputnik = m_linux.V8Factory(
    options=['snapshot=on',
             'preparser',
             'cctests',
             'sample',
             'simulator=arm',
             '--build-tool=scons_v8'],
    target='debug',
    tests=['sputnik'],
    target_arch='arm')

f_v8_win32 = m_win32.V8Factory(
    options=['snapshot=on',
             'preparser',
             'cctests',
             'sample',
             '--build-tool=scons_v8'],
    tests=['v8testing', 'v8_es5conform'])

f_v8_win32_mozilla = m_win32.V8Factory(
    options=['snapshot=on',
             'preparser',
             'cctests',
             'sample',
             '--build-tool=scons_v8'],
    tests=['mozilla'])

f_v8_win32_sputnik = m_win32.V8Factory(
    options=['snapshot=on',
             'preparser',
             'cctests',
             'sample',
             '--build-tool=scons_v8'],
    tests=['sputnik'])

f_v8_win32_debug_1 = m_win32.V8Factory(
      options=['snapshot=on',
               'preparser',
               'cctests',
               'sample',
               '--build-tool=scons_v8'],
      target='debug',
      tests=['v8testing', 'v8_es5conform'],
      shard_count=2,
      shard_run=1)

f_v8_win32_debug_2 = m_win32.V8Factory(
      options=['snapshot=on',
               'preparser',
               'cctests',
               'sample',
               '--build-tool=scons_v8'],
      target='debug',
      tests=['v8testing', 'v8_es5conform'],
      shard_count=2,
      shard_run=2)

f_v8_win32_debug_mozilla_1 = m_win32.V8Factory(
      options=['snapshot=on',
               'preparser',
               'cctests',
               'sample',
               '--build-tool=scons_v8'],
      target='debug',
      tests=['mozilla'],
      shard_count=2,
      shard_run=1)

f_v8_win32_debug_mozilla_2 = m_win32.V8Factory(
      options=['snapshot=on',
               'preparser',
               'cctests',
               'sample',
               '--build-tool=scons_v8'],
      target='debug',
      tests=['mozilla'],
      shard_count=2,
      shard_run=2)

f_v8_win32_debug_sputnik_1 = m_win32.V8Factory(
      options=['snapshot=on',
               'preparser',
               'cctests',
               'sample',
               '--build-tool=scons_v8'],
      target='debug',
      tests=['sputnik'],
      shard_count=2,
      shard_run=1)

f_v8_win32_debug_sputnik_2 = m_win32.V8Factory(
      options=['snapshot=on',
               'preparser',
               'cctests',
               'sample',
               '--build-tool=scons_v8'],
      target='debug',
      tests=['sputnik'],
      shard_count=2,
      shard_run=2)

f_v8_win64 = m_win64.V8Factory(
      options=['cctests',
               'preparser',
               'sample',
               'arch=x64',
               '--build-tool=scons_v8'],
      tests=['v8testing', 'v8_es5conform', 'sputnik', 'mozilla'],
      target_arch='x64')

f_v8_mac = m_mac.V8Factory(
    options=['snapshot=on',
             'preparser',
             'cctests',
             'sample',
             '--build-tool=scons_v8'],
    tests=['v8testing', 'v8_es5conform', 'sputnik', 'mozilla'])

f_v8_mac_debug = m_mac.V8Factory(
    options=['snapshot=on',
             'preparser',
             'cctests',
             'sample',
             '--build-tool=scons_v8'],
    target='debug',
    tests=['v8testing', 'v8_es5conform', 'sputnik'])

f_v8_mac_debug_mozilla = m_mac.V8Factory(
    options=['snapshot=on',
             'preparser',
             'cctests',
             'sample',
             '--build-tool=scons_v8'],
    target='debug',
    tests=['mozilla'])

f_v8_linux_isolates = m_linux.V8Factory(
    options=['snapshot=on',
             'preparser',
             'cctests',
             'sample',
             '--build-tool=scons_v8'],
    target='debug,release',
    isolates=True,
    tests=['v8testing'])

f_v8_linux_nosse2 = m_linux.V8Factory(
    options=['snapshot=on',
             'preparser',
             'cctests',
             'sample',
             '--build-tool=scons_v8'],
    target='debug,release',
    shell_flags='@ --noenable-sse2',
    tests=['v8testing', 'v8_es5conform', 'mozilla', 'sputnik'])

f_v8_linux_nosse3 = m_linux.V8Factory(
    options=['snapshot=on',
             'preparser',
             'cctests',
             'sample',
             '--build-tool=scons_v8'],
    target='debug,release',
    shell_flags='@ --noenable-sse3',
    tests=['v8testing', 'v8_es5conform', 'mozilla', 'sputnik'])

f_v8_linux_nosse4 = m_linux.V8Factory(
    options=['snapshot=on',
             'preparser',
             'cctests',
             'sample',
             '--build-tool=scons_v8'],
    target='debug,release',
    shell_flags='@ --noenable-sse4-1',
    tests=['v8testing', 'v8_es5conform', 'mozilla', 'sputnik'])

f_v8_fuzz = m_linux.V8Factory(
    options=['cctests',
             'preparser',
             'sample',
             '--build-tool=scons_v8'],
    target='debug,release',
    tests=['fuzz'])

f_chromium_rel_builder_v8 = win().ChromiumV8LatestFactory(
    clobber=True,
    project='all.sln',
    tests=['reliability'],
    compile_timeout=3600,
    factory_properties={'archive_build': True,
                        'use_build_number': True})

# The Windows reliability bot runs on Linux because it only needs to transfer
# the build from one part of the network to another, and it is easier on Linux.
f_chromium_rel_reliability_v8 = linux().ReliabilityTestsFactory('win_v8_canary')

f_chromium_rel_perf_vista_dual_v8 = win().ChromiumV8LatestFactory(
    project='all.sln;chromium_builder',
    tests=['page_cycler', 'startup', 'dom_perf',
           'memory', 'sunspider', 'v8_benchmark', 'dromaeo'],
    compile_timeout=3600,
    factory_properties={'perf_id': 'chromium-rel-vista-dual-v8',
                        'show_perf_results': True})

f_chromium_dbg_linux_interactive_v8 = linux().ChromiumV8LatestFactory(
    tests=['interactive_ui'],
    options=['interactive_ui_tests'])

f_chromium_rel_mac6_perf_v8 = mac().ChromiumV8LatestFactory(
    tests=['page_cycler', 'startup', 'dom_perf',
           'page_cycler_http', 'tab_switching',
           'sunspider', 'v8_benchmark', 'dromaeo',
           'memory'],
    options=['--', '-project', '../chrome/chrome.xcodeproj'],
    factory_properties={'perf_id': 'chromium-rel-mac6-v8',
                        'show_perf_results': True})

f_webkit_rel_v8 = win_webkit().ChromiumV8LatestFactory(
    tests=['test_shell', 'webkit', 'webkit_unit'],
    factory_properties={'archive_webkit_results': True})

f_webkit_rel_mac_v8 = mac().ChromiumV8LatestFactory(
    tests=['test_shell', 'webkit', 'webkit_unit'],
    factory_properties={'archive_webkit_results': True},
    options=['--', '-project',
             '../webkit/webkit.xcodeproj'])

f_webkit_rel_linux_v8 = linux().ChromiumV8LatestFactory(
    tests=['test_shell', 'webkit', 'webkit_unit'],
    options=['--build-tool=make', 'test_shell', 'test_shell_tests',
             'webkit_unit_tests', 'DumpRenderTree'],
    factory_properties={'archive_webkit_results': True,
                        'gclient_env': {'GYP_GENERATORS' : 'make'}})

f_webkit_rel_linux64_v8 = linux().ChromiumV8LatestFactory(
    tests=['test_shell', 'webkit', 'webkit_unit'],
    options=['--build-tool=make', 'test_shell', 'test_shell_tests',
             'webkit_unit_tests', 'DumpRenderTree'],
    factory_properties={'archive_webkit_results': True,
                        'gclient_env': {'GYP_GENERATORS' : 'make'}})

f_v8_arm_builder = m_linux.V8Factory(
    target='release',
    tests=[],
    compile_timeout=3600,
    options=[
      '--build-tool=scons_v8',
      'arch=arm',
      'preparser',
      'sample',
      'cctests',
      '--crosstool=' + crosstool_prefix],
    factory_properties={'archive_build': True}
    )

f_v8_arm_tester = m_linux.V8Factory(
    build_url=v8_arm_builder_archive,
    target='release',
    slave_type='Tester',
    options=['arch=arm'],
    tests=['v8testing', 'v8_es5conform', 'sputnik', 'mozilla'])



# ----------------------------------------------------------------------------
# BUILDER DEFINITIONS

# The 'builders' list defines the Builders. Each one is configured with a
# dictionary, using the following keys:
#  name (required): the name used to describe this bilder
#  slavename (required): which slave to use, must appear in c['slaves']
#  builddir (required): which subdirectory to run the builder in
#  factory (required): a BuildFactory to define how the build is run
#  periodicBuildTime (optional): if set, force a build every N seconds
#  category (optional): it is not used in the normal 'buildbot' meaning. It is
#                       used by gatekeeper to determine which steps it should
#                       look for to close the tree.
#


b_v8_linux = {
  'name': 'V8 Linux',
  'builddir': 'v8-linux',
  'factory': f_v8_linux,
}

b_v8_linux_debug = {
  'name': 'V8 Linux - debug',
  'builddir': 'v8-linux-debug',
  'factory': f_v8_linux_debug,
}

b_v8_linux_debug_mozilla = {
  'name': 'V8 Linux - debug - mozilla',
  'builddir': 'v8-linux-debug-mozilla',
  'factory': f_v8_linux_debug_mozilla,
}

b_v8_linux_debug_sputnik = {
  'name': 'V8 Linux - debug - sputnik',
  'builddir': 'v8-linux-debug-sputnik',
  'factory': f_v8_linux_debug_sputnik,
}

b_v8_linux64 = {
  'name': 'V8 Linux64',
  'builddir': 'v8-linux64',
  'factory': f_v8_linux64,
}

b_v8_linux64_debug = {
  'name': 'V8 Linux64 - debug',
  'builddir': 'v8-linux64-debug',
  'factory': f_v8_linux64_debug,
}

b_v8_linux64_debug_mozilla = {
  'name': 'V8 Linux64 - debug - mozilla',
  'builddir': 'v8-linux64-debug-mozilla',
  'factory': f_v8_linux64_debug_mozilla,
}

b_v8_linux64_debug_sputnik = {
  'name': 'V8 Linux64 - debug - sputnik',
  'builddir': 'v8-linux64-debug-sputnik',
  'factory': f_v8_linux64_debug_sputnik,
}

b_v8_linux_nosnap = {
  'name': 'V8 Linux - nosnap',
  'builddir': 'v8-linux-nosnap',
  'factory': f_v8_linux_nosnap,
}

b_v8_linux_nosnap_debug = {
  'name': 'V8 Linux - nosnap - debug',
  'builddir': 'v8-linux-nosnap-debug',
  'factory': f_v8_linux_nosnap_debug,
}

b_v8_linux_nosnap_debug_mozilla = {
  'name': 'V8 Linux - nosnap - debug - mozilla',
  'builddir': 'v8-linux-nosnap-debug-mozilla',
  'factory': f_v8_linux_nosnap_debug_mozilla,
}

b_v8_linux_nosnap_debug_sputnik = {
  'name': 'V8 Linux - nosnap - debug - sputnik',
  'builddir': 'v8-linux-nosnap-debug-sputnik',
  'factory': f_v8_linux_nosnap_debug_sputnik,
}

b_v8_linux_arm_sim = {
  'name': 'V8 Linux - arm - sim',
  'builddir': 'v8-linux-arm-sim',
  'factory': f_v8_linux_arm_sim,
}

b_v8_linux_arm_sim_mozilla = {
  'name': 'V8 Linux - arm - sim - mozilla',
  'builddir': 'v8-linux-arm-sim-mozilla',
  'factory': f_v8_linux_arm_sim_mozilla,
}

b_v8_linux_arm_sim_debug = {
  'name': 'V8 Linux - arm - sim - debug',
  'builddir': 'v8-linux-arm-sim-debug',
  'factory': f_v8_linux_arm_sim_debug,
}

b_v8_linux_arm_sim_debug_mozilla_1 = {
  'name': 'V8 Linux - arm - sim - debug - mozilla - 1',
  'builddir': 'v8-linux-arm-sim-debug-mozilla-1',
  'factory': f_v8_linux_arm_sim_debug_mozilla_1,
}

b_v8_linux_arm_sim_debug_mozilla_2 = {
  'name': 'V8 Linux - arm - sim - debug - mozilla - 2',
  'builddir': 'v8-linux-arm-sim-debug-mozilla-2',
  'factory': f_v8_linux_arm_sim_debug_mozilla_2,
}

b_v8_linux_arm_sim_debug_sputnik = {
  'name': 'V8 Linux - arm - sim - debug - sputnik',
  'builddir': 'v8-linux-arm-sim-debug-sputnik',
  'factory': f_v8_linux_arm_sim_debug_sputnik,
}

b_v8_win32 = {
  'name': 'V8 Win32',
  'builddir': 'v8-win32',
  'factory': f_v8_win32,
}

b_v8_win32_mozilla = {
  'name': 'V8 Win32 - mozilla',
  'builddir': 'win32-mozilla',
  'factory': f_v8_win32_mozilla,
}

b_v8_win32_sputnik = {
  'name': 'V8 Win32 - sputnik',
  'builddir': 'win32-sputnik',
  'factory': f_v8_win32_sputnik,
}

# Non standard builddir because of path length limit (sputnik tests)
# for all win32 debug slaves.
b_v8_win32_debug_1 = {
  'name': 'V8 Win32 - debug - 1',
  'builddir': 'win-dbg1',
  'factory': f_v8_win32_debug_1,
}

b_v8_win32_debug_2 = {
  'name': 'V8 Win32 - debug - 2',
  'builddir': 'win-dbg2',
  'factory': f_v8_win32_debug_2,
}

b_v8_win32_debug_mozilla_1 = {
  'name': 'V8 Win32 - debug - mozilla - 1',
  'builddir': 'w32-d-moz1',
  'factory': f_v8_win32_debug_mozilla_1,
}

b_v8_win32_debug_mozilla_2 = {
  'name': 'V8 Win32 - debug - mozilla - 2',
  'builddir': 'w32-d-moz2',
  'factory': f_v8_win32_debug_mozilla_2,
}

b_v8_win32_debug_sputnik_1 = {
  'name': 'V8 Win32 - debug - sputnik - 1',
  'builddir': 'w32-d-sput1',
  'factory': f_v8_win32_debug_sputnik_1,
}

b_v8_win32_debug_sputnik_2 = {
  'name': 'V8 Win32 - debug - sputnik - 2',
  'builddir': 'w32-d-sput2',
  'factory': f_v8_win32_debug_sputnik_2,
}

b_v8_mac = {
  'name': 'V8 Mac',
  'builddir': 'v8-mac',
  'factory': f_v8_mac,
}

b_v8_mac_debug = {
  'name': 'V8 Mac - debug',
  'builddir': 'v8-mac-debug',
  'factory': f_v8_mac_debug,
}

b_v8_mac_debug_mozilla = {
  'name': 'V8 Mac - debug - mozilla',
  'builddir': 'v8-mac-debug-mozilla',
  'factory': f_v8_mac_debug_mozilla,
}

b_v8_win64 = {
  'name': 'V8 Win64',
  'builddir': 'v8-win64',
  'factory': f_v8_win64,
}

b_v8_linux_isolates = {
  'name': 'V8 Linux - isolates',
  'builddir': 'v8-linux-isolates',
  'factory': f_v8_linux_isolates,
}

b_v8_linux_nosse2 = {
  'name': 'V8 Linux - nosse2',
  'builddir': 'v8-linux-nosse2',
  'factory': f_v8_linux_nosse2,
}

b_v8_linux_nosse3 = {
  'name': 'V8 Linux - nosse3',
  'builddir': 'v8-linux-nosse3',
  'factory': f_v8_linux_nosse3,
}

b_v8_linux_nosse4 = {
  'name': 'V8 Linux - nosse4',
  'builddir': 'v8-linux-nosse4',
  'factory': f_v8_linux_nosse4,
}

b_v8_fuzz = {
  'name': 'V8 Fuzzer',
  'builddir': 'v8-fuzz',
  'factory': f_v8_fuzz,
}

b_chromium_rel_builder_v8 = {
  'name': 'Win Reliability Builder',
  'builddir': 'chromium-rel-builder-v8',
  'factory': f_chromium_rel_builder_v8,
}

b_chromium_rel_reliability_v8 = {
  'name': 'Win Reliability',
  'builddir': 'chromium-rel-reliability-v8',
  'factory': f_chromium_rel_reliability_v8,
}

b_chromium_rel_vista_perf_dual_v8 = {
  'name': 'Vista Perf',
  'builddir': 'chromium-rel-vista-perf-dual-v8',
  'factory': f_chromium_rel_perf_vista_dual_v8,
}

b_chromium_dbg_linux_interactive_v8 = {
  'name': 'Linux Interactive (dbg)',
  'builddir': 'chromium-dbg-linux-interactive-v8',
  'factory': f_chromium_dbg_linux_interactive_v8,
}

b_chromium_rel_mac6_perf_v8 = {
  'name': 'Mac10.6 Perf',
  'builddir': 'chromium-rel-mac6-perf-v8',
  'factory': f_chromium_rel_mac6_perf_v8,
}

b_webkit_rel_v8 = {
  'name': 'Webkit',
  'builddir': 'webkit-rel-v8',
  'factory': f_webkit_rel_v8,
}

b_webkit_rel_mac_v8 = {
  'name': 'Webkit Mac',
  'builddir': 'webkit-rel-mac-v8',
  'factory': f_webkit_rel_mac_v8,
}

b_webkit_rel_linux_v8 = {
  'name': 'Webkit Linux',
  'builddir': 'webkit-rel-linux-v8',
  'factory': f_webkit_rel_linux_v8,
}

b_webkit_rel_linux64_v8 = {
  'name': 'Webkit Linux 64',
  'builddir': 'webkit-rel-linux64-v8',
  'factory': f_webkit_rel_linux64_v8,
}

b_v8_arm_builder = {
  'name': 'V8 Arm - builder',
  'builddir': 'v8-arm-builder',
  'factory': f_v8_arm_builder,
}

b_v8_arm_tester = {
  'name': 'V8 Arm - tester',
  'builddir': 'v8-arm-tester',
  'factory': f_v8_arm_tester,
}


c['builders'] = [b_v8_linux, b_v8_linux_debug,
                 b_v8_linux_debug_mozilla,
                 b_v8_linux_debug_sputnik,
                 b_v8_linux64,
                 b_v8_linux64_debug,
                 b_v8_linux64_debug_mozilla,
                 b_v8_linux64_debug_sputnik,
                 b_v8_linux_nosnap,
                 b_v8_linux_nosnap_debug,
                 b_v8_linux_nosnap_debug_mozilla,
                 b_v8_linux_nosnap_debug_sputnik,
                 b_v8_win32,
                 b_v8_win32_mozilla,
                 b_v8_win32_sputnik,
                 b_v8_win32_debug_1,
                 b_v8_win32_debug_2,
                 b_v8_win32_debug_mozilla_1,
                 b_v8_win32_debug_mozilla_2,
                 b_v8_win32_debug_sputnik_1,
                 b_v8_win32_debug_sputnik_2,
                 b_v8_mac,
                 b_v8_mac_debug,
                 b_v8_mac_debug_mozilla,
                 b_v8_fuzz,
                 b_v8_linux_arm_sim,
                 b_v8_linux_arm_sim_mozilla,
                 b_v8_linux_arm_sim_debug,
                 b_v8_linux_arm_sim_debug_mozilla_1,
                 b_v8_linux_arm_sim_debug_mozilla_2,
                 b_v8_linux_arm_sim_debug_sputnik,
                 b_webkit_rel_v8,
                 b_webkit_rel_mac_v8,
                 b_webkit_rel_linux_v8,
                 b_v8_win64,
                 b_v8_linux_isolates,
                 b_v8_linux_nosse2,
                 b_v8_linux_nosse3,
                 b_v8_linux_nosse4,
                 b_v8_arm_builder,
                 b_v8_arm_tester,
                 b_chromium_dbg_linux_interactive_v8,
                 b_chromium_rel_mac6_perf_v8,
                 b_chromium_rel_vista_perf_dual_v8,
                 b_chromium_rel_builder_v8,
                 b_chromium_rel_reliability_v8,
                 b_webkit_rel_linux64_v8]

# Associate the slaves to the builders. The configuration is in slaves.cfg.
slaves = slaves_list.SlavesList('slaves.cfg', 'v8')
for builder in c['builders']:
  builder['slavenames'] = slaves.GetSlavesName(builder=builder['name'])


####### BUILDSLAVES

# The 'slaves' list defines the set of allowable buildslaves. List all the
# slaves registered to a builder. Remove dupes.
c['slaves'] = master_utils.AutoSetupSlaves(c['builders'],
                                           config.Master.GetBotPassword())

# Make sure everything works together.
master_utils.VerifySetup(c, slaves)


####### STATUS TARGETS

# Adds common status and tools to this master.
master_utils.AutoSetupMaster(c, ActiveMaster)


####### PROJECT IDENTITY

# Buildbot master url:
c['buildbotURL'] = 'http://localhost:8010/'
c['projectName'] = ActiveMaster.project_name
c['projectURL'] = config.Master.project_url
