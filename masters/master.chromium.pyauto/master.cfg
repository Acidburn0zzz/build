# Copyright (c) 2010 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

from buildbot.changes import svnpoller
from buildbot.scheduler import Dependent
from buildbot.scheduler import Scheduler

from master import build_utils
from master import master_config
from master import master_utils
from master import slaves_list
from master.factory import chromium_factory

import config

ActiveMaster = config.Master.ChromiumPyauto

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

# Disable compression for the stdio files.
c['logCompressionLimit'] = False


####### CHANGESOURCES

def ChromeTreeFileSplitter(path):
  """split_file for the 'src' project in the trunk."""

  # Exclude o3d from triggering builds on chrome for now.
  if path.startswith('src/o3d/'):
    return None

  # List of projects we are interested in. The project names must exactly
  # match paths in the Subversion repository, relative to the 'path' URL
  # argument. build_utils.SplitPath() will use them as branch names to
  # kick off the Schedulers for different projects.
  projects = ['src']
  return build_utils.SplitPath(projects, path)

# Polls config.Master.trunk_url for changes
chromium_rev = 'http://src.chromium.org/viewvc/chrome?view=rev&revision=%s'
trunk_poller = svnpoller.SVNPoller(svnurl=config.Master.trunk_url,
                                   split_file=ChromeTreeFileSplitter,
                                   pollinterval=10,
                                   revlinktmpl=chromium_rev)

c['change_source'] = [trunk_poller]


####### SCHEDULERS

## configure the Schedulers

# Main scheduler for all changes in trunk.
s_chromium = Scheduler(name='chromium',
                       branch='src',
                       treeStableTimer=60,
                       builderNames=['Win XP',
                                     'Win Vista',
                                     'Win7',
                                     'Linux (deb)',
                                    ])

# Scheduler to trigger mac10.5 off mac10.6 since we can't build on 10.5.
s_chromium_mac = Scheduler(name='chromium_mac',
                           branch='src',
                           treeStableTimer=60,
                           builderNames=['Mac 10.6'])

s_chromium_mac_dependent = Dependent('chromium_mac_dependent',
                                     s_chromium_mac,
                                     ['Mac 10.5'])


c['schedulers'] = [s_chromium, s_chromium_mac, s_chromium_mac_dependent]

####### BUILDERS

builders = []

# ----------------------------------------------------------------------------
# FACTORIES

m_win = chromium_factory.ChromiumFactory('src/build', 'win32')
m_linux = chromium_factory.ChromiumFactory('src/build', 'linux2')
m_mac = chromium_factory.ChromiumFactory('src/build', 'darwin')

# Some shortcut to simplify the code below.
F_WIN = m_win.ChromiumFactory
F_LINUX = m_linux.ChromiumFactory
F_MAC = m_mac.ChromiumFactory

chromium_mac_archive = master_config.GetArchiveUrl('ChromiumPyauto',
                                                   'Mac 10.6',
                                                   'pyauto_mac_10_6',
                                                   'mac')

f_linux_deb = F_LINUX(target='Release',
                      options=['chromium_builder_qa'],
                      tests=['pyauto_functional_tests',
                             'chromedriver_tests',
                             'webdriver_tests'],
                      factory_properties={'use_xvfb_on_linux': True})

f_win = F_WIN(project='all.sln;chromium_builder_qa',
              target='Release',
              tests=['pyauto_functional_tests',
                     'chromedriver_tests',
                     'webdriver_tests'])

f_mac_10_6 = F_MAC(slave_type='Builder',
                   target='Release',
                   options=['--', '-project', 'all.xcodeproj',
                            '-target', 'chromium_builder_qa'],
                   tests=['pyauto_functional_tests',
                          'chromedriver_tests',
                          'webdriver_tests'])

f_mac_10_5 = F_MAC(target='Release',
                   slave_type='Tester',
                   build_url=chromium_mac_archive,
                   tests=['pyauto_functional_tests'])


# ----------------------------------------------------------------------------
# BUILDER DEFINITIONS

b_win_xp = {'name': 'Win XP', 'factory': f_win}
b_win_vista = {'name': 'Win Vista', 'factory': f_win}
b_win7 = {'name': 'Win7', 'factory': f_win}
b_linux_deb = {'name': 'Linux (deb)', 'factory': f_linux_deb}
b_mac10_5 = {'name': 'Mac 10.5', 'factory': f_mac_10_5}
b_mac10_6 = {'name': 'Mac 10.6',
             'factory': f_mac_10_6,
             'builddir': 'pyauto_mac_10_6'}


c['builders'] = [
  b_win_xp,
  b_win_vista,
  b_win7,
  b_mac10_5,
  b_mac10_6,
  b_linux_deb,
]

# Associate the slaves to the manual builders. The configuration is in
# slaves.cfg.
slaves = slaves_list.SlavesList('slaves.cfg', 'ChromiumPyauto')
for builder in c['builders']:
  builder['slavenames'] = slaves.GetSlavesName(builder=builder['name'])

####### BUILDSLAVES

# The 'slaves' list defines the set of allowable buildslaves. List all the
# slaves registered to a builder. Remove dupes.
c['slaves'] = master_utils.AutoSetupSlaves(c['builders'],
                                           config.Master.GetBotPassword())

# Make sure everything works together.
master_utils.VerifySetup(c, slaves)

####### STATUS TARGETS

# Adds common status and tools to this master.
master_utils.AutoSetupMaster(c, ActiveMaster,
                             public_html='../master.chromium/public_html')

####### PROJECT IDENTITY

# Buildbot master url:
c['buildbotURL'] = 'http://build.chromium.org/buildbot/pyauto/'
