# Copyright (c) 2010 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# These modules come from scripts/master, which must be in the PYTHONPATH.
from master import master_utils
from master import slaves_list

from common import chromium_utils

import config

ActiveMaster = config.Master.Chromium

# Only the production Chromium Buildbot acts as the tree gatekeeper.
TREE_GATE_KEEPER = ActiveMaster.is_production_host
GOOD_REVISIONS = ActiveMaster.is_production_host

c = BuildmasterConfig = {}
c['change_source'] = []
c['schedulers'] = []
c['builders'] = []
c['status'] = []

import full_cfg
import source_cfg
import win_cfg
import mac_cfg
import linux_cfg
import linux_webkit_cfg
import mac_webkit_cfg
import win_webkit_cfg
import chromeos_cfg

source_cfg.Update(config, ActiveMaster, c)

full_cfg.Update(config, ActiveMaster, c)
win_cfg.Update(config, ActiveMaster, c)
mac_cfg.Update(config, ActiveMaster, c)
linux_cfg.Update(config, ActiveMaster, c)
win_webkit_cfg.Update(config, ActiveMaster, c)
mac_webkit_cfg.Update(config, ActiveMaster, c)
linux_webkit_cfg.Update(config, ActiveMaster, c)
chromeos_cfg.Update(config, ActiveMaster, c)

if TREE_GATE_KEEPER:
  import gatekeeper_cfg
  gatekeeper_cfg.Update(config, ActiveMaster, c)

if GOOD_REVISIONS:
  import good_revisions_cfg
  good_revisions_cfg.Update(config, ActiveMaster, c)

# More settings (will be refactored once I merge maruel's change)
c['slavePortnum'] = ActiveMaster.slave_port
c['logCompressionLimit'] = False
c['projectName'] = ActiveMaster.project_name
c['projectURL'] = config.Master.project_url
c['buildbotURL'] = 'http://build.chromium.org/buildbot/waterfall/'

# Associate the slaves to the manual builders. The configuration is in
# slaves.cfg.
slaves = slaves_list.SlavesList('slaves.cfg', 'Chromium')
for builder in c['builders']:
  builder['slavenames'] = slaves.GetSlavesName(builder=builder['name'])

# The 'slaves' list defines the set of allowable buildslaves. List all the
# slaves registered to a builder. Remove dupes.
c['slaves'] = master_utils.AutoSetupSlaves(c['builders'],
                                           config.Master.GetBotPassword())
#master_utils.VerifySetup(c, slaves)

# Adds common status and tools to this master.
master_utils.AutoSetupMaster(c, ActiveMaster)

if ActiveMaster.base_app_url:
  from master.status_push import HttpStatusPush
  c['status'].append(HttpStatusPush(
      ActiveMaster.base_app_url + '/status-receiver',
      blackList=('requestSubmitted', 'requestCancelled', 'buildsetSubmitted',
                 'builderAdded', 'builderChangedState', 'buildStarted',
                 'buildETAUpdate', 'stepStarted', 'stepTextChanged',
                 'stepText2Changed', 'stepETAUpdate', 'logStarted',
                 'logFinished', 'buildedRemoved', 'slaveConnected',
                 'slaveDisconnected')))
