# Copyright (c) 2011 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# These modules come from scripts/master, which must be in the PYTHONPATH.
from buildbot.status import mail
from master import master_utils
from master import slaves_list

import config


ActiveMaster = config.Master.Skia

# Boolean indicating whether we are running in test or production
IS_PRODUCTION_MODE = ActiveMaster.is_production_host
# Actually, force IS_PRODUCTION_MODE to False, because Skia now runs their
# own production buildbot elsewhere.
IS_PRODUCTION_MODE = False

c = BuildmasterConfig = {}
c['change_source'] = []
c['schedulers'] = []
c['builders'] = []
c['status'] = []


import master_source_cfg
import master_linux_cfg


master_source_cfg.Update(config, ActiveMaster, c)


master_linux_cfg.Update(config, ActiveMaster, c)


# Associate the slaves to the manual builders. The configuration is in
# slaves.cfg.
slaves = slaves_list.SlavesList('slaves.cfg', 'Skia')
for builder in c['builders']:
  builder['slavenames'] = slaves.GetSlavesName(builder=builder['name'])


# The 'slaves' list defines the set of allowable buildslaves. List all the
# slaves registered to a builder. Remove dupes.
c['slaves'] = master_utils.AutoSetupSlaves(c['builders'],
                                           config.Master.GetBotPassword())
master_utils.VerifySetup(c, slaves)


# Adds common status and tools to this master.
master_utils.AutoSetupMaster(c, ActiveMaster, mail_notifier=False)

# Add our own mail notifiers (only in production mode):
# 1. email the committer whether it succeeded or failed
# 2. email skia-commit list only if it changed test results
if IS_PRODUCTION_MODE:
  c['status'].append(mail.MailNotifier(
      fromaddr=ActiveMaster.from_address,
      sendToInterestedUsers=True,
      extraRecipients=['skia-commit@googlegroups.com'],
      mode='change',
      relayhost=config.Master.smtp,
      lookup=master_utils.FilterDomain()))
