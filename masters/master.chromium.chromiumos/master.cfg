# Copyright (c) 2011 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

from buildbot.changes import svnpoller
from buildbot.schedulers.basic import SingleBranchScheduler

# These modules come from scripts/master, which must be in the PYTHONPATH.
from master import build_utils
from master import chromium_notifier
from master import master_config
from master import master_utils
from master import slaves_list

from master.factory import chromeos_factory
from master.factory import chromium_factory

# These modules come from scripts/common, which must be in the PYTHONPATH.
import config


ActiveMaster = config.Master.ChromiumChromiumOS
# This is where we sometimes look up things we share with ChromiumOS.
# The ActiveMaster inherits from Chromium for the rest.
AlternateMaster = config.Master.ChromiumOS

# Only the production Buildbot master closes the tree on failures.
TREE_GATE_KEEPER = ActiveMaster.is_production_host

CODESEARCH_NOTIFIER = True
STATUS_PUSH = False

# These are the common targets to most of the builders
# This is repeated in other linux master configs.
linux_all_test_targets = [
  'base_unittests',
  'crypto_unittests',
  'dbus_unittests',
  'googleurl_unittests',
  'gpu_unittests',
  'media_unittests',
  'printing_unittests',
  'remoting_unittests',
  'net_unittests',
  'safe_browsing_tests',
  'cacheinvalidation_unittests',
  'jingle_unittests',
  'sql_unittests',         # from test target unit
  'ipc_tests',             # from test target unit
  'sync_unit_tests',       # from test target unit
  'content_unittests',     # from test target unit
  'unit_tests',            # from test target unit
  'gfx_unittests',         # from test target unit
  'browser_tests',
  'ui_tests',
]

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### DATABASE

import os
if os.path.isfile('.dbconfig'):
  values = {}
  execfile('.dbconfig', values)
  if 'password' not in values:
    raise Exception('could not get db password')

  c['db_url'] = 'postgresql://%s:%s@%s/%s' % (
      values['username'], values['password'],
      values.get('hostname', 'localhost'), values['dbname'])


####### CHANGESOURCES

# the 'change_source' list tells the buildmaster how it should find out about
# source code changes. Any class which implements IChangeSource can be added
# to this list: there are several in buildbot/changes/*.py to choose from.
def ChromeTreeFileSplitter(path):
  """split_file for the 'src' project in the trunk."""

  # Exclude .DEPS.git from triggering builds on chrome.
  if path == 'src/.DEPS.git':
    return None

  # List of projects we are interested in. The project names must exactly
  # match paths in the Subversion repository, relative to the 'path' URL
  # argument. build_utils.SplitPath() will use them as branch names to
  # kick off the Schedulers for different projects.
  projects = ['src']
  return build_utils.SplitPath(projects, path)

# Rev link urls.
chromium_rev = 'http://src.chromium.org/viewvc/chrome?view=rev&revision=%s'

# Polls config.Master.trunk_url for changes
trunk_poller = svnpoller.SVNPoller(svnurl=config.Master.trunk_url,
                                   split_file=ChromeTreeFileSplitter,
                                   pollinterval=10,
                                   revlinktmpl=chromium_rev)

# TODO(petermayo) Make this sensitive to LKGM changes too, crosbug.com/20798

c['change_source'] = [trunk_poller]


####### SCHEDULERS

## configure the Schedulers

# Main scheduler for all changes in trunk.
s_chromium = SingleBranchScheduler(
    name='chromium',
    branch='src',
    treeStableTimer=60,
    builderNames=[
        'Linux ChromeOS',
        'Linux ChromeOS Aura',
        'Linux Clang (ChromeOS dbg)',
        'ChromiumOS (x86)',
        'ChromiumOS (arm)',
        'ChromiumOS (tegra2)',
        'ChromiumOS (aura)'])


c['schedulers'] = [s_chromium]

####### BUILDERS

# buildbot/process/factory.py provides several BuildFactory classes you can
# start with, which implement build processes for common targets (GNU
# autoconf projects, CPAN perl modules, etc). The factory.BuildFactory is the
# base class, and is configured with a series of BuildSteps. When the build
# is run, the appropriate buildslave is told to execute each Step in turn.

# the first BuildStep is typically responsible for obtaining a copy of the
# sources. There are source-obtaining Steps in buildbot/process/step.py for
# CVS, SVN, and others.

builders = []

# ----------------------------------------------------------------------------
# FACTORIES


f_chromium_linux_chromeos = chromium_factory.ChromiumFactory(
    'src/build', 'linux2').ChromiumOSFactory(
    tests=['unit',
           'dbus',
           'base',
           'net',
           'googleurl',
           'media',
           'ui',
           'printing',
           'remoting',
           'browser_tests',
           'interactive_ui',
           'views',
           'crypto',
           'cacheinvalidation',
           'jingle'],
    options=['--compiler=goma'] + linux_all_test_targets + ['chromeos_builder'],
    factory_properties={
        'archive_build': False,
        'extra_archive_paths': 'chrome/tools/build/chromeos',
        'gclient_env': { 'GYP_DEFINES':'chromeos=1 target_arch=ia32'},
        'generate_gtest_json': True})

f_chromium_linux_chromeos_aura = chromium_factory.ChromiumFactory(
    'src/build', 'linux2').ChromiumOSFactory(
    tests=[#'base',
           'cacheinvalidation',
           'crypto',
           'googleurl',
           'jingle',
           'media',
           'printing',
           'views',
           'aura',
           'aura_shell',
           'compositor',
           'ipc',
           #'sync',
           'sql',
           'gfx',
           'content',
           #'remoting',
           #'browser_tests',
           #'ui'
           #'interactive_ui',
           ],
    options=['--compiler=goma',
             'aura_builder',
             'base_unittests',
             'cacheinvalidation_unittests',
             'crypto_unittests',
             'googleurl_unittests',
             'jingle_unittests',
             'media_unittests',
             'printing_unittests',
             'views_unittests',
             'compositor_unittests',
             'ipc_tests',
             'sync_unit_tests',
             'sql_unittests',
             'gfx_unittests',
             'content_unittests',
             'browser_tests',
             'ui_tests',
             'interactive_ui_tests',
             'net_unittests',
             #'remoting_unittests',
             'unit_tests'],
    factory_properties={
        'archive_build': False,
        'extra_archive_paths': 'chrome/tools/build/chromeos',
        'gclient_env': { 'GYP_DEFINES':'chromeos=1 aura=1 target_arch=ia32'},
        'generate_gtest_json': True})

f_chromium_linux_chromeos_clang_dbg = chromium_factory.ChromiumFactory(
    'src/build', 'linux2').ChromiumOSFactory(
    target='Debug',
    tests=['base',
           'ui_base',
           'gfx',
           'unit',
           'crypto',
           'cacheinvalidation',
           'jingle'],
    options=['--compiler=clang'],
    factory_properties={
        'gclient_env': {
            'GYP_DEFINES':'clang=1 clang_use_chrome_plugins=1 ' +
                          'chromeos=1 fastbuild=1 target_arch=ia32'
    }})

f_chromium_tot_chromeos_x86_generic = chromeos_factory.ChromeCbuildbotFactory(
  buildroot='/b/cbuild.x86',
  crostools_repo=None,
  pass_revision=True,
  params='x86-generic-tot-chrome-pfq-informational').get_factory()

f_chromium_tot_chromeos_arm_generic = chromeos_factory.ChromeCbuildbotFactory(
  buildroot='/b/cbuild.arm',
  crostools_repo=None,
  pass_revision=True,
  params='arm-generic-tot-chrome-pfq-informational').get_factory()

f_chromium_tot_chromeos_tegra2 = chromeos_factory.ChromeCbuildbotFactory(
  buildroot='/b/cbuild.tegra2',
  crostools_repo=None,
  pass_revision=True,
  params='arm-tegra2-tot-chrome-pfq-informational').get_factory()

f_chromium_tot_chromeos_aura = chromeos_factory.ChromeCbuildbotFactory(
  buildroot='/b/cbuild.aura',
  crostools_repo=None,
  pass_revision=True,
  params='aura-tot-chrome-pfq-informational').get_factory()


# ----------------------------------------------------------------------------
# BUILDER DEFINITIONS

# The 'builders' list defines the Builders. Each one is configured with a
# dictionary, using the following keys:
#  name (required): the name used to describe this bilder
#  slavename (required): which slave to use, must appear in c['slaves']
#  builddir (optional): which subdirectory to run the builder in
#  factory (required): a BuildFactory to define how the build is run
#  periodicBuildTime (optional): if set, force a build every N seconds
#  category (optional): it is not used in the normal 'buildbot' meaning. It is
#                       used by gatekeeper to determine which steps it should
#                       look for to close the tree.
#

b_chromium_rel_linux_chromeos = {
  'name': 'Linux ChromeOS',
  'builddir': 'chromium-rel-linux-chromeos',
  'factory': f_chromium_linux_chromeos,
  'category': '1linux|compiler|tester',
}

b_chromium_rel_linux_chromeos_aura = {
  'name': 'Linux ChromeOS Aura',
  'builddir': 'chromium-rel-linux-chromeos-aura',
  'factory': f_chromium_linux_chromeos_aura,
  'category': '1linux|compiler|tester',
}

b_chromium_dbg_linux_chromeos_clang = {
  'name': 'Linux Clang (ChromeOS dbg)',
  'builddir': 'chromium-dbg-linux-chromeos-clang',
  'factory': f_chromium_linux_chromeos_clang_dbg,
  'category': '1linux|compiler|tester',
}

b_chromium_tot_chromeos_x86_generic = {
  'name': 'ChromiumOS (x86)',
  'builddir': 'chromium-tot-chromeos-x86-generic',
  'factory': f_chromium_tot_chromeos_x86_generic,
  'category': '2chromiumos|closer|watch',
}

b_chromium_tot_chromeos_arm_generic = {
  'name': 'ChromiumOS (arm)',
  'builddir': 'chromium-tot-chromeos-arm-generic',
  'factory': f_chromium_tot_chromeos_arm_generic,
  'category': '2chromiumos|closer|watch',
}

b_chromium_tot_chromeos_tegra2 = {
  'name': 'ChromiumOS (tegra2)',
  'builddir': 'chromium-tot-chromeos-tegra2',
  'factory': f_chromium_tot_chromeos_tegra2,
  'category': '2chromiumos|closer|watch',
}

b_chromium_tot_chromeos_aura = {
  'name': 'ChromiumOS (aura)',
  'builddir': 'chromium-tot-chromeos-aura',
  'factory': f_chromium_tot_chromeos_aura,
  'category': '2chromiumos|closer|watch',
}

c['builders'] = [
  b_chromium_rel_linux_chromeos,
  b_chromium_rel_linux_chromeos_aura,
  b_chromium_dbg_linux_chromeos_clang,
  b_chromium_tot_chromeos_x86_generic,
  b_chromium_tot_chromeos_arm_generic,
  b_chromium_tot_chromeos_tegra2,
  b_chromium_tot_chromeos_aura,
]


# Associate the slaves to the manual builders. The configuration is in
# slaves.cfg.
slaves = slaves_list.SlavesList('slaves.cfg', 'ChromiumChromiumOS')
for builder in c['builders']:
  builder['slavenames'] = slaves.GetSlavesName(builder=builder['name'])


####### BUILDSLAVES

# The 'slaves' list defines the set of allowable buildslaves. List all the
# slaves registered to a builder. Remove dupes.
c['slaves'] = master_utils.AutoSetupSlaves(c['builders'],
                                           config.Master.GetBotPassword())

# Make sure everything works together.
master_utils.VerifySetup(c, slaves)


####### STATUS TARGETS

# Adds common status and tools to this master.
master_utils.AutoSetupMaster(c, ActiveMaster,
    public_html='../master.chromium/public_html',
    templates=['../master.chromium/templates'],
    enable_http_status_push=ActiveMaster.is_production_host)

if TREE_GATE_KEEPER:
  import master_gatekeeper_cfg
  master_gatekeeper_cfg.Update(config, ActiveMaster, AlternateMaster, c)

####### PROJECT IDENTITY

# Buildbot master url:
c['buildbotURL'] = 'http://build.chromium.org/p/chromium.chromiumos/'
