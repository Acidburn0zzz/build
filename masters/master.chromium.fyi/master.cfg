# Copyright (c) 2011 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

from buildbot import locks
from buildbot.changes import svnpoller
from buildbot.scheduler import Dependent
from buildbot.scheduler import Nightly
from buildbot.scheduler import Periodic
from buildbot.scheduler import Scheduler
from buildbot.scheduler import Triggerable

# These modules come from scripts/master, which must be in the PYTHONPATH.
from master import build_utils
from master import master_config
from master import master_utils
from master import slaves_list

from master.factory import chromium_factory

# These modules come from scripts/common, which must be in the PYTHONPATH.
import config

ActiveMaster = config.Master.ChromiumFYI

STATUS_PUSH = False

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}


####### CHANGESOURCES

# the 'change_source' list tells the buildmaster how it should find out about
# source code changes. Any class which implements IChangeSource can be added
# to this list: there are several in buildbot/changes/*.py to choose from.
def ChromeTreeFileSplitter(path):
  """split_file for the 'src' project in the trunk."""

  # Exclude o3d from triggering builds on chrome for now.
  if path.startswith('src/o3d/'):
    return None

  # List of projects we are interested in. The project names must exactly
  # match paths in the Subversion repository, relative to the 'path' URL
  # argument. build_utils.SplitPath() will use them as branch names to
  # kick off the Schedulers for different projects.
  projects = ['src']
  return build_utils.SplitPath(projects, path)

# Rev link urls.
chromium_rev = 'http://src.chromium.org/viewvc/chrome?view=rev&revision=%s'

# Polls config.Master.trunk_url for changes
trunk_poller = svnpoller.SVNPoller(svnurl=config.Master.trunk_url,
                                   split_file=ChromeTreeFileSplitter,
                                   pollinterval=10,
                                   revlinktmpl=chromium_rev)

c['change_source'] = [trunk_poller]


####### SCHEDULERS

## configure the Schedulers

# Main scheduler for all changes in trunk.
s_chromium = Scheduler(name='chromium',
                       branch='src',
                       treeStableTimer=60,
                       builderNames=['Linux Tests (tsan ui)(1)',
                                     'Linux Tests (tsan ui)(2)',
                                     'Chromium OS Tests (tsan ui)',
                                     'Chromium Linux Reliability (valgrind)',
                                     'Chromium Mac 10.6 (tsan)',
                                     'Windows Tests (tsan)',
                                     'Windows Tests (DrMemory)',
                                     'Windows Tests (DrMemory Vista)',
                                     'Chromium Embedded',
                                     'Chromium Linux (dbg-shlib)',
                                     'Chromium Vista Memory',
                                     'Chromium Linux Memory',
                                     'Chromium Mac Memory',
                                     'Chromium Linux Redux',
                                     'Chromium Linux Touch',
                                     'Chromium Linux Touch (dbg)',
                                     'Chromium Linux Goma',
                                     'Linux Views Clang (dbg)',
                                     ])

# Scheduler to trigger slaves that depend on the release build.
s_chromium_rel_builder = Scheduler(name='chromium_rel_builder',
                                   branch='src',
                                   treeStableTimer=60,
                                   builderNames=['Chromium Builder'])

s_chromium_rel_dependent = Dependent('chromium_rel_dependent',
                                     s_chromium_rel_builder,
                                     ['XP Tests',
                                      'Chromium Vista 64',
                                      'Chromium Windows7',
                                      'Chrome Frame Perf',
                                      'Chrome Frame Tests (ie6)(peruser)',
                                      'Chrome Frame Tests (ie7)(peruser)',
                                      'Chrome Frame Tests (ie8)(peruser)',
                                      'Chrome Frame Tests (ie9)'
                                     ])

# Nightly scheduler for coverage and slower target builds.
s_chromium_nightly = Nightly(name='chromium_nightly',
                             builderNames=['Win Target Builds'],
                             hour=0,
                             minute=0)

# Three-times-a-day scheduler for quicker target builds.
s_chromium_thrice_daily = Nightly(name='chromium_thrice_daily',
                                  builderNames=['Mac Target Builds',
                                                'Linux Target Builds'],
                                  hour=[0,8,16],
                                  minute=0)

# Once an hour scheduler to provide a periodic poll of lkgr.  The
# coverage builds "run" once an hour but nop themselves if lkgr hasn't
# changed.
s_chromium_hourly = Periodic(name="hourly",
                             builderNames=['Win Coverage (dbg)',
                                           'Mac Coverage (dbg)',
                                           'Linux Coverage (dbg)'],
                             periodicBuildTimer=60*60)  # in seconds

s_chromium_linux_valgrind_x64_builder = Scheduler(
    name='chromium_linux_valgrind_x64_builder',
    branch='src',
    treeStableTimer=60,
    builderNames=['Chromium Linux Builder (valgrind x64)'])

s_chromium_linux_valgrind_x64_dependent = Dependent(
    'chromium_linux_valgrind_x64_dependent',
    s_chromium_linux_valgrind_x64_builder,
    ['Linux Tests (tsan x64)',
    ])

# Scheduler to trigger the Linux reliability builder.
# Running the builder at most once per hour keeps it in sync with the tests.
s_chromium_linux_reliability_builder = Nightly(
    name='reliability_linux_builder',
    branch='src',
    builderNames=['Chromium Linux Reliability Builder'],
    minute=0,
    onlyIfChanged=True)

# Triggerable scheduler for Linux reliability tests.
s_chromium_linux_reliability = Triggerable(
    name='reliability_linux',
    builderNames=['Chromium Linux Reliability'])

# Scheduler for Chrome Frame reliability tests. Runs every hour.
# TODO(robertshield): When this moves to the main waterfall, trigger
# this from the Chrome Frame tests.
s_chrome_frame_reliability = Nightly(
    name='reliability_chrome_frame',
    builderNames=['Chrome Frame Reliability'],
    minute=0)

c['schedulers'] = [s_chromium,
                   s_chromium_hourly,
                   s_chromium_nightly,
                   s_chromium_thrice_daily,
                   s_chromium_linux_valgrind_x64_builder,
                   s_chromium_linux_valgrind_x64_dependent,
                   s_chromium_linux_reliability_builder,
                   s_chromium_linux_reliability,
                   s_chrome_frame_reliability,
                   s_chromium_rel_builder,
                   s_chromium_rel_dependent]

####### BUILDERS

# buildbot/process/factory.py provides several BuildFactory classes you can
# start with, which implement build processes for common targets (GNU
# autoconf projects, CPAN perl modules, etc). The factory.BuildFactory is the
# base class, and is configured with a series of BuildSteps. When the build
# is run, the appropriate buildslave is told to execute each Step in turn.

# the first BuildStep is typically responsible for obtaining a copy of the
# sources. There are source-obtaining Steps in buildbot/process/step.py for
# CVS, SVN, and others.

builders = []

# ----------------------------------------------------------------------------
# FACTORIES

F = chromium_factory.ChromiumFactory
def win(): return F('src/chrome', 'win32')
def win_build(): return F('src/build', 'win32')
def mac(): return F('src/build', 'darwin')
def linux(): return F('src/build', 'linux2')
def chromeos(): return F('src/build', 'linux2')

m_win_cef = chromium_factory.ChromiumFactory('src/cef', 'win32')

chromium_rel_archive = master_config.GetArchiveUrl(
    'ChromiumFYI',
    'Chromium Builder',
    'chromium-rel-builder',
    'win32')

chromium_rel_archive_ext = ('http://master.chromium.org:8802/b/build/slave'
                            '/chromium-rel-builder/chrome_staging/'
                            'full-build-win32.zip')

chromium_linux_valgrind_x64_archive = master_config.GetArchiveUrl(
    'ChromiumFYI',
    'Chromium Linux Builder (valgrind x64)',
    'chromium-rel-linux-valgrind-x64-builder',
    'linux')

# The identifier of the factory is the build configuration. If two factories
# are using the same build configuration, they should have the same identifier.
f_chromium_rel_builder = win_build().ChromiumFactory(
    slave_type='Builder',
    project='all.sln;chromium_builder',
    factory_properties={'gclient_env': {'GYP_DEFINES' : 'fastbuild=1'}})

f_chromium_rel_tests = win_build().ChromiumFactory(
    slave_type='Tester',
    build_url=chromium_rel_archive,
    tests=['ui-single'],
    factory_properties={'start_crash_handler': True})

f_chromium_rel_vista = win_build().ChromiumFactory(
    slave_type='Tester',
    build_url=chromium_rel_archive,
    tests=['unit', 'ui', 'page_cycler', 'startup', 'memory', 'printing',
           'remoting', 'browser_tests', 'installer'],
    factory_properties={'start_crash_handler': True})

f_chromium_rel_win7 = win_build().ChromiumFactory(
    slave_type='Tester',
    build_url=chromium_rel_archive,
    tests=['unit', 'ui', 'installer'],
    factory_properties={'start_crash_handler': True})

f_cr_rel_perf_frame = win_build().ChromiumFactory(
    slave_type='Tester',
    build_url=chromium_rel_archive_ext,
    tests=['chrome_frame_perftests'],
    factory_properties={'show_perf_results': True,
                        'expectations': True,
                        'perf_id': 'chromium-rel-frame',
                        'process_dumps': True,
                        'start_crash_handler': True,})

f_cr_rel_frame = win_build().ChromiumFactory(
    slave_type='Tester',
    build_url=chromium_rel_archive,
    tests=['chrome_frame'],
    factory_properties={'process_dumps': True,
                        'start_crash_handler': True,})

f_chromium_linux_redux = linux().ChromiumFactory(
    tests=['unit', 'net', 'base'],
    options=['app_unittests',
             'base_unittests',
             'googleurl_unittests',
             'ipc_tests',
             'media_unittests',
             'net_unittests',
             'gfx_unittests',
             'printing_unittests',
             'remoting_unittests',
             'sync_unit_tests',
             'ui_tests',
             'unit_tests'],
    factory_properties={
           'gclient_env': {'GYP_DEFINES':
                              ('linux_breakpad=0 '
                               'remoting=0 '
                               'use_openssl=1 '
                               'use_sdch=1 ')}})

f_chromium_rel_linux_touch = linux().ChromiumFactory(
    tests=['unit', 'ui', 'dom_checker', 'googleurl', 'media', 'printing',
           'remoting', 'sizes', 'memory', 'browser_tests',
           'webkit_unit', 'nacl_ui', 'nacl_sandbox', 'gpu', 'check_perms'],
    factory_properties={'gclient_env': {'GYP_DEFINES':'touchui=1'}})

f_chromium_dbg_linux_touch = linux().ChromiumFactory(
    target='Debug',
    tests=['unit', 'ui', 'dom_checker', 'googleurl', 'media', 'printing',
           'remoting', 'sizes', 'memory', 'browser_tests',
           'webkit_unit', 'nacl_ui', 'nacl_sandbox', 'gpu', 'check_perms'],
    factory_properties={'gclient_env': {'GYP_DEFINES':'touchui=1'}})

# TODO(thestig) stop clobbering this bot once we figure out how to reliably
# rebuild LASTCHANGE / file_version_info_linux.h.
f_chromium_linux_reliability_builder = linux().ChromiumFactory(
    clobber=True,
    tests=['automated_ui', 'page_load', 'reliability_linux'],
    options=['all'],
    factory_properties={
           'archive_build': True,
           'gclient_env': {'GYP_DEFINES':
                              ('linux_breakpad=1 '
                               'linux_dump_symbols=1 '
                               'linux_strip_binary=1 '
                               'linux_strip_reliability_tests=1 '),
                           'GYP_GENERATORS':'make',}})

f_chromium_linux_reliability = linux().ReliabilityTestsFactory('linux')

f_chrome_frame_reliability = linux().ReliabilityTestsFactory('win_cf')

valgrind_gyp_defines = chromium_factory.ChromiumFactory.MEMORY_TOOLS_GYP_DEFINES
pin_gyp_defines = chromium_factory.ChromiumFactory.MEMORY_TOOLS_GYP_DEFINES

# Running out of address space on 10.5... try to buy some time.
valgrind_mac_gyp_defines = valgrind_gyp_defines + ' enable_svg=0'

f_chromium_rel_linux_tsan_ui_1 = linux().ChromiumFactory(
    target='Release',
    tests=['tsan_ui_1_of_6',
           'tsan_ui_2_of_6',
           'tsan_ui_3_of_6',
           ],
    options=['ui_tests',],
    factory_properties={
        'needs_valgrind' : True,
        'gclient_env': { 'GYP_DEFINES' : valgrind_gyp_defines,
                         'GYP_GENERATORS':'make',}})

f_chromium_rel_linux_tsan_ui_2 = linux().ChromiumFactory(
    target='Release',
    tests=['tsan_ui_4_of_6',
           'tsan_ui_5_of_6',
           'tsan_ui_6_of_6',
           ],
    options=['ui_tests',],
    factory_properties={
        'needs_valgrind' : True,
        'gclient_env': { 'GYP_DEFINES' : valgrind_gyp_defines,
                         'GYP_GENERATORS':'make',}})

f_chromium_rel_chromeos_tsan_ui = linux().ChromiumOSFactory(
    target='Release',
    tests=['tsan_ui_1_of_6',
           'tsan_ui_2_of_6',
           'tsan_ui_3_of_6',
           'tsan_ui_4_of_6',
           'tsan_ui_5_of_6',
           'tsan_ui_6_of_6',
           ],
    options=['ui_tests',],
    factory_properties={
        'needs_valgrind' : True,
        'gclient_env': { 'GYP_DEFINES' : valgrind_gyp_defines + ' chromeos=1',
                         'GYP_GENERATORS':'make',}})

f_chromium_dbg_win_drmemory = win_build().ChromiumFactory(
    target='Debug',
    tests=[
      'drmemory_googleurl',
      'drmemory_printing',
      'drmemory_media',
      'drmemory_app',
      'drmemory_remoting',
      'drmemory_ipc',
      'drmemory_base',
      # run tests in shards to decrease the number of reports per shard.
      # TODO(timurrrr): avoid shards when Dr.Memory has less false positives.
      'drmemory_net_1_of_5',
      'drmemory_net_2_of_5',
      'drmemory_net_3_of_5',
      'drmemory_net_4_of_5',
      'drmemory_net_5_of_5',
    ],
    project='all.sln;chromium_builder_dbg_tsan_win',
    factory_properties={
        'needs_drmemory' : True,
    }
)

f_cr_dbg_mac_106_tsan = mac().ChromiumFactory(
    target='Debug',
    tests=['tsan_base',
           'tsan_googleurl',
           'tsan_net',
           'tsan_ipc',
           'tsan_media',
           'tsan_printing',
           'tsan_remoting'],
    options=['--', '-project', '../build/all.xcodeproj',
             '-target', 'chromium_builder_dbg_tsan_mac'],
    factory_properties={
        'needs_valgrind' : True,
        'gclient_env': {'GYP_DEFINES' : valgrind_mac_gyp_defines}})

# GYP_DEFINES for running coverage.  Why we do each:
# coverage=1: turn it on!  (e.g. add -ftest-coverage on Linux, enable
#   the 'coverage' target, etc)
# fastbuild=1, enable_svg=0: try and make it smaller so we don't choke on link.
# (Sadly those two don't make us small enough to link with the 10.5 SDK.)
GYP_DEFINES_FOR_COVERAGE_WIN = ('coverage=1 '
                                'enable_svg=0')
# fastbuild=1 prevents PDB generation on Windows and it's necessary for
# code coverage, so we only add it for the other plaforms.
GYP_DEFINES_FOR_COVERAGE_POSIX = '%s fastbuild=1' % GYP_DEFINES_FOR_COVERAGE_WIN

f_coverage_dbg_mac = mac().ChromiumFactory(
    target='Debug',
    clobber=False,
    tests=['check_lkgr', 'run_coverage_bundles', 'process_coverage'],
    options=['--', '-project', '../chrome/chrome.xcodeproj',
             '-sdk', '/Developer/SDKs/MacOSX10.6.sdk',  # Too big for 10.5!
             '-target', 'coverage_build'],
    factory_properties={'lkgr': True,
                        'gclient_env':
                        {'GYP_DEFINES': GYP_DEFINES_FOR_COVERAGE_POSIX},
                        'show_perf_results': True,
                        'perf_id': 'chromium-dbg-mac'})

f_coverage_dbg_linux = linux().ChromiumFactory(
    target='Debug',
    clobber=False,
    tests=['check_lkgr', 'run_coverage_bundles', 'process_coverage'],
    options=['--build-dir=src/chrome',
             '--', 'coverage_build'],
    factory_properties={'lkgr': True,
                        'gclient_env':
                        {'GYP_DEFINES': GYP_DEFINES_FOR_COVERAGE_POSIX,
                         'GYP_GENERATORS':'make'},
                        'show_perf_results': True,
                        'perf_id': 'chromium-dbg-linux'})

f_coverage_dbg_win = win().ChromiumFactory(
    target='Debug',
    clobber=False,
    tests=['check_lkgr', 'run_coverage_bundles', 'process_coverage'],
    options=['--', '/project', 'coverage_build'],
    factory_properties={'lkgr': True,
                        'gclient_env':
                        {'GYP_DEFINES': GYP_DEFINES_FOR_COVERAGE_WIN},
                        'show_perf_results': True,
                        'perf_id': 'chromium-dbg-xp'})

f_chromium_rel_vista_memory = win().ChromiumFactory(
    tests=['memory'],
    options=['--', '/project', 'memory_test'],
    factory_properties={'show_perf_results': True,
                        'perf_id': 'chromium-rel-vista-memory'})

f_chromium_rel_linux_memory = linux().ChromiumFactory(
    tests=['memory'],
    options=['--', 'memory_test'],
    factory_properties={'show_perf_results': True,
                        'perf_id': 'chromium-rel-linux-memory',
                        'gclient_env':{'GYP_GENERATORS':'make'}})

f_chromium_rel_mac_memory = mac().ChromiumFactory(
    tests=['memory'],
    options=['--', '-project', '../chrome/chrome.xcodeproj',
             '-target', 'memory_test'],
    factory_properties={'show_perf_results': True,
                        'perf_id': 'chromium-rel-mac-memory'})

f_chromium_rel_xp_cef = m_win_cef.CEFFactory('chromium-rel-cef')

f_chromium_linux_targets = linux().TargetTestsFactory(
    factory_properties={'show_perf_results' : True,
                        'perf_id' : 'chromium-linux-targets'})

f_chromium_mac_targets = mac().TargetTestsFactory(
    factory_properties={'show_perf_results' : True,
                        'perf_id' : 'chromium-mac-targets'})

f_chromium_win_targets = win().TargetTestsFactory(
    factory_properties={'show_perf_results' : True,
                        'perf_id' : 'chromium-win-targets'})

f_chromium_rel_linux_valgrind_x64_builder = linux().ChromiumFactory(
    slave_type='Builder',
    options=['app_unittests',
             'base_unittests',
             'googleurl_unittests',
             'ipc_tests',
             'media_unittests',
             'net_unittests',
             'gfx_unittests',
             'printing_unittests',
             'remoting_unittests',
             'sync_unit_tests',
             'ui_tests',
             'unit_tests',
             ],
    factory_properties={'gclient_env': { 'GYP_DEFINES' : valgrind_gyp_defines,
                                         'GYP_GENERATORS':'make'}})

f_chromium_rel_linux_tsan_x64 = linux().ChromiumFactory(
    slave_type='Tester',
    build_url=chromium_linux_valgrind_x64_archive,
    tests=['tsan_googleurl',
           'tsan_printing',
           'tsan_media',
           'tsan_app',
           'tsan_ipc',
           'tsan_remoting',
           'tsan_base',
           'tsan_sync',
           'tsan_net',
           'tsan_unit_1_of_2',
           'tsan_unit_2_of_2',
           # Experimental! Run the same set of tests in RaceVerifier mode
           'tsan_rv_googleurl',
           'tsan_rv_printing',
           'tsan_rv_media',
           'tsan_rv_app',
           'tsan_rv_ipc',
           'tsan_rv_remoting',
           'tsan_rv_base',
           'tsan_rv_sync',
           'tsan_rv_net',
           'tsan_rv_unit_1_of_2',
           'tsan_rv_unit_2_of_2',
           ],
    factory_properties={
        'needs_valgrind' : True,
        'gclient_env': { 'GYP_DEFINES' : valgrind_gyp_defines}})

f_chromium_dbg_win_tsan = win_build().ChromiumFactory(
    target='Debug',
    tests=[
      'tsan_googleurl',
      'tsan_printing',
      'tsan_remoting',
      'tsan_app',
      'tsan_media',
      'tsan_ipc',
      'tsan_base',
      'tsan_net',
    ],
    project='all.sln;chromium_builder_dbg_tsan_win',
    factory_properties={
      'needs_tsan_win' : True,
      'gclient_env': { 'GYP_DEFINES' : pin_gyp_defines },
    },
)

f_cr_dbg_linux_shared = linux().ChromiumFactory(
    clobber=True,
    target='Debug',
    slave_type='Builder',
    factory_properties={
        'gclient_env': {'GYP_DEFINES':'library=shared_library',
                        'GYP_GENERATORS':'make'}})

f_chromium_rel_linux_valgrind_reliability = linux().ChromiumFactory(
    target='Release',
    tests=[
      'tsan_reliability',
      'valgrind_reliability',
      'tsan_interactive_ui',
      'valgrind_interactive_ui',
    ],
    options=[
      'reliability_tests',
      'interactive_ui_tests',
    ],
    factory_properties={
        'needs_valgrind' : True,
        'gclient_env': { 'GYP_DEFINES' : valgrind_gyp_defines,
                         'GYP_GENERATORS':'make',}})

f_chromium_rel_linux_goma = linux().ChromiumFactory(
    target='Release',
    options=['--compiler=goma'],
    tests=[])

f_cr_dbg_linux_views_clang = linux().ChromiumFactory(	
    target='Debug',	
    options=['--compiler=clang'],
    tests=['base', 'gfx', 'unit'],	
    factory_properties={	
        'gclient_env': {	
            # TODO(thakis): All clang_use_chrome_plugins=1 once linux/views
            # compiles with clang.
            'GYP_DEFINES':'clang=1 toolkit_views=1 fastbuild=1'	
    }})


# ----------------------------------------------------------------------------
# BUILDER DEFINITIONS

slave_lock = locks.SlaveLock('one_per_slave_lock', maxCount=1)

# ----------------------------------------------------------------------------
# BUILDER DEFINITIONS

# The 'builders' list defines the Builders. Each one is configured with a
# dictionary, using the following keys:
#  name (required): the name used to describe this bilder
#  slavename (required): which slave to use, must appear in c['slaves']
#  builddir (optional): which subdirectory to run the builder in
#  factory (required): a BuildFactory to define how the build is run
#  periodicBuildTime (optional): if set, force a build every N seconds
#  category (optional): it is not used in the normal 'buildbot' meaning. It is
#                       used by gatekeeper to determine which steps it should
#                       look for to close the tree.
#

b_chromium_rel_builder = {'name': 'Chromium Builder',
  'builddir': 'chromium-rel-builder',
  'factory': f_chromium_rel_builder,
  'category': 'windows',
}

b_chromium_rel_perf_frame = {'name': 'Chrome Frame Perf',
  'builddir': 'chromium-rel-perf-frame',
  'factory': f_cr_rel_perf_frame,
  'category': 'windows',
}

b_chromium_rel_xp_tests = {
  'name': 'XP Tests',
  'builddir': 'chromium-rel-xp-tests',
  'factory': f_chromium_rel_tests,
  'category': 'windows',
}

b_chromium_rel_vista64 = {
  'name': 'Chromium Vista 64',
  'builddir': 'chromium-rel-vista64',
  'factory': f_chromium_rel_vista,
  'category': 'windows',
}

b_chromium_rel_win7 = {
  'name': 'Chromium Windows7',
  'builddir': 'chromium-rel-win7',
  'factory': f_chromium_rel_win7,
  'category': 'windows',
}

b_chromium_rel_linux_touch = {
  'name': 'Chromium Linux Touch',
  'builddir': 'chromium-rel-linux-touch',
  'factory': f_chromium_rel_linux_touch,
  'category': 'linux',
}

b_chromium_dbg_linux_touch = {
  'name': 'Chromium Linux Touch (dbg)',
  'builddir': 'chromium-dbg-linux-touch',
  'factory': f_chromium_dbg_linux_touch,
  'category': 'linux',
}

b_chromium_linux_redux = {
  'name': 'Chromium Linux Redux',
  'factory': f_chromium_linux_redux,
  'category': 'linux',
}

b_chromium_linux_reliability_builder = {
  'name': 'Chromium Linux Reliability Builder',
  'builddir': 'chromium-linux-reliability',
  'factory': f_chromium_linux_reliability_builder,
  'category': 'linux',
}

b_chromium_linux_reliability = {
  'name': 'Chromium Linux Reliability',
  'slavename': 'chromium-reliability',
  'builddir': 'chromium-linux-reliability-tester',
  'factory': f_chromium_linux_reliability,
  'category': 'linux',
}

b_chrome_frame_reliability = {
  'name': 'Chrome Frame Reliability',
  'slavename': 'chrome-frame-reliability',
  'builddir': 'chrome-frame-reliability-tester',
  'factory': f_chrome_frame_reliability,
  'category': 'windows',
}

b_chromium_rel_ie6_peruser_frame = {
  'name': 'Chrome Frame Tests (ie6)(peruser)',
  'factory': f_cr_rel_frame,
  'category': 'windows',
}

b_chromium_rel_ie7_peruser_frame = {
  'name': 'Chrome Frame Tests (ie7)(peruser)',
  'factory': f_cr_rel_frame,
  'category': 'windows',
}

b_chromium_rel_ie8_peruser_frame = {
  'name': 'Chrome Frame Tests (ie8)(peruser)',
  'factory': f_cr_rel_frame,
  'category': 'windows',
}

b_chromium_rel_ie9_frame = {
  'name': 'Chrome Frame Tests (ie9)',
  'factory': f_cr_rel_frame,
  'category': 'windows',
}

b_chromium_rel_linux_tsan_ui_1 = {
  'name': 'Linux Tests (tsan ui)(1)',
  'builddir': 'chromium-rel-linux-tsan-ui-1',
  'factory': f_chromium_rel_linux_tsan_ui_1,
  'category': 'memory tests',
}

b_chromium_rel_linux_tsan_ui_2 = {
  'name': 'Linux Tests (tsan ui)(2)',
  'builddir': 'chromium-rel-linux-tsan-ui-2',
  'factory': f_chromium_rel_linux_tsan_ui_2,
  'category': 'memory tests',
}

b_chromium_rel_chromeos_tsan_ui = {
  'name': 'Chromium OS Tests (tsan ui)',
  'builddir': 'chromium-rel-chromeos-tsan-ui',
  'factory': f_chromium_rel_chromeos_tsan_ui,
  'category': 'memory tests',
}

b_chromium_dbg_mac_106_tsan = {
  'name': 'Chromium Mac 10.6 (tsan)',
  'builddir': 'chromium-dbg-mac-106-tsan',
  'factory': f_cr_dbg_mac_106_tsan,
  'category': 'memory tests',
}

b_chromium_dbg_win_drmemory = {
  'name': 'Windows Tests (DrMemory)',
  'builddir': 'chromium-dbg-win-drmemory',
  'factory': f_chromium_dbg_win_drmemory,
  'category': 'memory tests',
}

b_chromium_dbg_win_drmemory_vista = {
  'name': 'Windows Tests (DrMemory Vista)',
  'builddir': 'chromium-dbg-win-drmemory-vista',
  'factory': f_chromium_dbg_win_drmemory,
  'category': 'memory tests',
}

b_chromium_rel_linux_valgrind_x64_builder = {
  'name': 'Chromium Linux Builder (valgrind x64)',
  'builddir': 'chromium-rel-linux-valgrind-x64-builder',
  'factory': f_chromium_rel_linux_valgrind_x64_builder,
  'category': 'memory tests',
}

b_chromium_rel_linux_tsan_x64 = {
  'name': 'Linux Tests (tsan x64)',
  'builddir': 'chromium-rel-linux-tsan-x64',
  'factory': f_chromium_rel_linux_tsan_x64,
  'category': 'memory tests',
}

b_coverage_dbg_mac = {
  'name': 'Mac Coverage (dbg)',
  'builddir': 'coverage-dbg-mac',
  'factory': f_coverage_dbg_mac,
  'category': 'coverage',
  'locks': [slave_lock],
}

b_coverage_dbg_linux = {
  'name': 'Linux Coverage (dbg)',
  'builddir': 'coverage-dbg-linux',
  'factory': f_coverage_dbg_linux,
  'category': 'coverage',
  'locks': [slave_lock],
}

b_coverage_dbg_win = {
  'name': 'Win Coverage (dbg)',
  'builddir': 'coverage-dbg-win',
  'factory': f_coverage_dbg_win,
  'category': 'coverage',
  'locks': [slave_lock],
}

b_chromium_rel_vista_memory = {
  'name': 'Chromium Vista Memory',
  'builddir': 'chromium-rel-vista-memory',
  'factory': f_chromium_rel_vista_memory,
  'category': 'memory tests',
}

b_chromium_rel_linux_memory = {
  'name': 'Chromium Linux Memory',
  'builddir': 'chromium-rel-linux-memory',
  'factory': f_chromium_rel_linux_memory,
  'category': 'memory tests',
}

b_chromium_rel_mac_memory = {
  'name': 'Chromium Mac Memory',
  'builddir': 'chromium-rel-mac-memory',
  'factory': f_chromium_rel_mac_memory,
  'category': 'memory tests',
}

b_chromium_rel_xp_cef = {
  'name': 'Chromium Embedded',
  'builddir': 'chromium-rel-xp-cef',
  'factory': f_chromium_rel_xp_cef,
  'category': 'cef',
}

b_chromium_linux_targets = {
  'name': 'Linux Target Builds',
  'builddir': 'chromium-linux-targets',
  'factory': f_chromium_linux_targets,
  'category': 'target',
}

b_chromium_mac_targets = {
  'name': 'Mac Target Builds',
  'builddir': 'chromium-mac-targets',
  'factory': f_chromium_mac_targets,
  'category': 'target',
}

b_chromium_win_targets = {
  'name': 'Win Target Builds',
  'builddir': 'chromium-win-targets',
  'factory': f_chromium_win_targets,
  'category': 'target',
}

b_chromium_dbg_win_tsan = {
  'name': 'Windows Tests (tsan)',
  'builddir': 'chromium-dbg-win-tsan',
  'factory': f_chromium_dbg_win_tsan,
  'category': 'memory tests',
}

b_chromium_rel_linux_valgrind_reliability = {
  'name': 'Chromium Linux Reliability (valgrind)',
  'builddir': 'chromium-rel-linux-valgrind-reliability',
  'factory': f_chromium_rel_linux_valgrind_reliability,
  'category': 'memory tests',
}

b_chromium_dbg_linux_shared = {
  'name': 'Chromium Linux (dbg-shlib)',
  'builddir': 'chromium-dbg-linux-shared',
  'factory': f_cr_dbg_linux_shared,
  'category': 'linux',
}

b_chromium_rel_linux_goma = {
  'name': 'Chromium Linux Goma',
  'factory': f_chromium_rel_linux_goma,
  'category': 'linux',
}

b_chromium_dbg_linux_views_clang = {	
  'name': 'Linux Views Clang (dbg)',
  'factory': f_cr_dbg_linux_views_clang,
  'category': 'clang',
}


c['builders'] = [
  b_chromium_rel_builder,
  b_chromium_rel_perf_frame,
  b_chromium_rel_ie6_peruser_frame,
  b_chromium_rel_ie7_peruser_frame,
  b_chromium_rel_ie8_peruser_frame,
  b_chromium_rel_ie9_frame,
  b_chromium_dbg_linux_shared,
  b_chromium_linux_redux,
  b_chromium_rel_xp_tests,
  b_chromium_rel_vista64,
  b_chromium_rel_win7,
  b_chromium_linux_reliability_builder,
  b_chromium_linux_reliability,
  b_chrome_frame_reliability,
  b_chromium_rel_linux_valgrind_x64_builder,
  b_chromium_rel_linux_tsan_x64,
  b_chromium_dbg_mac_106_tsan,
  b_chromium_rel_linux_tsan_ui_1,
  b_chromium_rel_linux_tsan_ui_2,
  b_chromium_rel_chromeos_tsan_ui,
  b_chromium_dbg_win_tsan,
  b_chromium_rel_linux_valgrind_reliability,
  b_chromium_rel_linux_touch,
  b_chromium_dbg_linux_touch,
  b_chromium_dbg_win_drmemory,
  b_chromium_dbg_win_drmemory_vista,
  b_coverage_dbg_mac,
  b_coverage_dbg_linux,
  b_coverage_dbg_win,
  b_chromium_rel_vista_memory,
  b_chromium_rel_linux_memory,
  b_chromium_rel_mac_memory,
  b_chromium_rel_xp_cef,
  b_chromium_linux_targets,
  b_chromium_mac_targets,
  b_chromium_win_targets,
  b_chromium_rel_linux_goma,
  b_chromium_dbg_linux_views_clang,
]

# Associate the slaves to the manual builders. The configuration is in
# slaves.cfg.
slaves = slaves_list.SlavesList('slaves.cfg', 'ChromiumFYI')
for builder in c['builders']:
  builder['slavenames'] = slaves.GetSlavesName(builder=builder['name'])


####### BUILDSLAVES

# The 'slaves' list defines the set of allowable buildslaves. List all the
# slaves registered to a builder. Remove dupes.
c['slaves'] = master_utils.AutoSetupSlaves(c['builders'],
                                           config.Master.GetBotPassword())

# Make sure everything works together.
master_utils.VerifySetup(c, slaves)


####### STATUS TARGETS

# Adds common status and tools to this master.
master_utils.AutoSetupMaster(c, ActiveMaster,
                             public_html="../master.chromium/public_html")

# Add more.

if STATUS_PUSH:
  from master.status_push import HttpStatusPush
  c['status'].append(HttpStatusPush(
      'http://craebuild.appspot.com/status-listener'))


####### PROJECT IDENTITY

# Buildbot master url:
c['buildbotURL'] = 'http://build.chromium.org/p/chromium.fyi/'
