# Copyright (c) 2012 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

from buildbot import locks
from buildbot.changes import svnpoller
from buildbot.scheduler import Dependent
from buildbot.scheduler import Nightly
from buildbot.scheduler import Periodic
from buildbot.scheduler import Scheduler
from buildbot.scheduler import Triggerable

# These modules come from scripts/master, which must be in the PYTHONPATH.
from master import build_utils
from master import chromium_notifier
from master import failures_notifier
from master import master_config
from master import master_utils
from master import slaves_list

from master.factory import chromeos_factory
from master.factory import chromium_factory

# These modules come from scripts/common, which must be in the PYTHONPATH.
import config

ActiveMaster = config.Master.ChromiumFYI

CODESEARCH_NOTIFIER = True
DRMEMORY_NOTIFIER = True
STATUS_PUSH = False

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

config.DatabaseSetup(c, require_dbconfig=ActiveMaster.is_production_host)

####### CHANGESOURCES

# the 'change_source' list tells the buildmaster how it should find out about
# source code changes. Any class which implements IChangeSource can be added
# to this list: there are several in buildbot/changes/*.py to choose from.
def ChromeTreeFileSplitter(path):
  """split_file for the 'src' project in the trunk."""

  # Exclude .DEPS.git from triggering builds on chrome.
  if path == 'src/.DEPS.git':
    return None

  # List of projects we are interested in. The project names must exactly
  # match paths in the Subversion repository, relative to the 'path' URL
  # argument. build_utils.SplitPath() will use them as branch names to
  # kick off the Schedulers for different projects.
  projects = ['src']
  return build_utils.SplitPath(projects, path)

# Rev link urls.
chromium_rev = 'http://src.chromium.org/viewvc/chrome?view=rev&revision=%s'

# Polls config.Master.trunk_url for changes
trunk_poller = svnpoller.SVNPoller(svnurl=config.Master.trunk_url,
                                   split_file=ChromeTreeFileSplitter,
                                   pollinterval=10,
                                   revlinktmpl=chromium_rev)

c['change_source'] = [trunk_poller]


####### SCHEDULERS

## configure the Schedulers

# Main scheduler for all changes in trunk.
s_chromium = Scheduler(name='chromium',
                       branch='src',
                       treeStableTimer=60,
                       builderNames=['Chromium Linux Reliability (valgrind)',
                                     'Chromium Builder',
                                     'Chromium Builder (dbg)',
                                     'Linux Tests (tsan RV)',
                                     'Chromium Linux TSan-GCC',
                                     'Chromium OS Tests (tsan ui)',
                                     'Chromium Mac 10.6 (tsan)',
                                     'Windows Tests (DrMemory XP)',
                                     'Windows Tests (DrMemory Release)',
                                     'Windows Tests (DrMemory UI)',
                                     'Windows Tests (DrMemory full)',
                                     'Windows Tests (TSan Win 7)',
                                     'Chromium Vista Memory',
                                     'Chromium Linux Memory',
                                     'Chromium Mac Memory',
                                     'Chromium Linux Redux',
                                     'Chromium Linux Strict (dbg)',
                                     'Chromium Mac 10.6 Shared',
                                     'Chromium Mac 10.6 (vm)',
                                     'Chromium Mac 10.6 (vm, sharded)',
                                     'Chromium Mac Make',
                                     'Chromium OS ASAN Builder',
                                     'Mac ASAN Builder',
                                     'Chromium Linux Android',
                                     'Linux (dbg)(shared)',
                                     'Linux (rel)(aura)',
                                     ])

# Triggerable scheduler for Windows Release.
s_chromium_win_rel = Triggerable(
    name='win_rel',
    builderNames=['Chrome Frame Perf',
                  'Chrome Frame Tests (ie6)(peruser)',
                  'Chrome Frame Tests (ie7)(peruser)',
                  'Chrome Frame Tests (ie8)(peruser)',
                  'Chrome Frame Tests (ie9)'])

# Triggerable scheduler for Windows Debug.
s_chromium_win_dbg = Triggerable(
    name='win_dbg',
    builderNames=['Vista Tests (dbg)(1)',
                  'Vista Tests (dbg)(2)',
                  'Vista Tests (dbg)(3)'])

# Triggerable scheduler for Chromium OS ASAN.
s_chromium_linux_asan = Triggerable(
    name='linux_asan', 
    builderNames=['Chromium OS ASAN Tests (1)',
                  'Chromium OS ASAN Tests (2)'])

# Triggerable scheduler for Mac ASAN.
s_chromium_mac_asan = Triggerable(
    name='mac_asan', 
    builderNames=['Mac ASAN Tests (1)',
                  'Mac ASAN Tests (2)'])

s_chromium_mac_rel = Triggerable(
    name='mac_rel',
    builderNames=['Chromium Mac 10.5 Tests (vm)',
                  'Chromium Mac 10.7 Tests (vm)',
                  'Chromium Mac 10.7 Tests'])


# 3-hourly scheduler.
s_chromium_3hourly = Nightly(name='chromium_3hourly',
                             builderNames=['Chromium Codesearch'],
                             branch='src',
                             hour=range(0, 24, 3),
                             minute=0)

# Once an hour scheduler to provide a periodic poll of lkgr.  The
# coverage builds "run" once an hour but nop themselves if lkgr hasn't
# changed.
s_chromium_hourly = Periodic(name="hourly",
                             builderNames=['Win Coverage (dbg)',
                                           'Mac Coverage (dbg)',
                                           'Linux Coverage (dbg)'],
                             periodicBuildTimer=60*60)  # in seconds


c['schedulers'] = [s_chromium,
                   s_chromium_hourly,
                   s_chromium_3hourly,
                   s_chromium_win_rel,
                   s_chromium_win_dbg,
                   s_chromium_mac_rel,
                   s_chromium_linux_asan,
                   s_chromium_mac_asan]

####### BUILDERS

# buildbot/process/factory.py provides several BuildFactory classes you can
# start with, which implement build processes for common targets (GNU
# autoconf projects, CPAN perl modules, etc). The factory.BuildFactory is the
# base class, and is configured with a series of BuildSteps. When the build
# is run, the appropriate buildslave is told to execute each Step in turn.

# the first BuildStep is typically responsible for obtaining a copy of the
# sources. There are source-obtaining Steps in buildbot/process/step.py for
# CVS, SVN, and others.

builders = []

# ----------------------------------------------------------------------------
# FACTORIES

F = chromium_factory.ChromiumFactory
def win(): return F('src/chrome', 'win32')
def win_build(): return F('src/build', 'win32')
def mac(): return F('src/build', 'darwin')
def linux(): return F('src/build', 'linux2')

def codesearch():
  return F('src/build', 'linux2', pull_internal=False, full_checkout=True,
           additional_svn_urls=[config.Master.trunk_url_tools,
                                config.Master.trunk_url_o3d])
def chromeos(): return F('src/build', 'linux2')

def linux_android():
  return F('', 'linux2', nohooks_on_update=True,
    additional_svn_urls=(config.Master.android_deps_url,))

chromium_rel_archive = master_config.GetArchiveUrl(
    'ChromiumFYI',
    'Chromium Builder',
    'chromium-rel-builder',
    'win32')

chromium_dbg_archive = master_config.GetArchiveUrl(
    'ChromiumFYI',
    'Chromium Builder (dbg)',
    'chromium-dbg-builder',
    'win32')

chromium_rel_mac_archive = master_config.GetArchiveUrl(
    'ChromiumFYI',
    'Chromium Mac 10.6 Shared',
    'chromium-rel-mac-builder',
    'mac')

chromium_dbg_win_drmemory_archive_ext = ('http://vm30-m1/b/build/slave/'
                                         'chromium-dbg-win-drmemory-builder/'
                                         'chrome_staging/full-build-win32.zip')

chromium_rel_archive_ext = ('http://master.chromium.org:8802/b/build/slave'
                            '/chromium-rel-builder/chrome_staging/'
                            'full-build-win32.zip')

chromium_chromeos_asan_archive = master_config.GetArchiveUrl(
    'ChromiumFYI',
    'Chromium OS ASAN Builder',
    'chromium-rel-chromeos-asan-builder',
    'linux')

chromium_mac_asan_archive = master_config.GetArchiveUrl(
    'ChromiumFYI',
    'Mac ASAN Builder',
    'chromium-rel-mac-asan-builder',
    'mac')

valgrind_gyp_defines = chromium_factory.ChromiumFactory.MEMORY_TOOLS_GYP_DEFINES
pin_gyp_defines      = chromium_factory.ChromiumFactory.MEMORY_TOOLS_GYP_DEFINES
drmemory_gyp_defines = chromium_factory.ChromiumFactory.DR_MEMORY_GYP_DEFINES

# Running out of address space on 10.5... try to buy some time.
valgrind_mac_gyp_defines = valgrind_gyp_defines + ' enable_svg=0'

# The identifier of the factory is the build configuration. If two factories
# are using the same build configuration, they should have the same identifier.
f_chromium_rel_builder = win_build().ChromiumFactory(
    slave_type='Builder',
    project='all.sln;chromium_builder_tests',
    factory_properties={'trigger': 'win_rel',
                        'gclient_env': {'GYP_DEFINES': 'fastbuild=1'}})

f_chromium_dbg_builder = win_build().ChromiumFactory(
    slave_type='Builder',
    target='Debug',
    project='all.sln;chromium_builder_tests',
    factory_properties={'trigger': 'win_dbg',
                        'gclient_env': {'GYP_DEFINES': 'fastbuild=1'}})

f_chromium_dbg_tests_1 = win_build().ChromiumFactory(
    slave_type='Tester',
    build_url=chromium_dbg_archive,
    tests=['googleurl', 'media', 'printing', 'remoting', 'courgette', 'unit',
           'gpu', 'installer', 'safe_browsing', 'base', 'crypto',
           'cacheinvalidation', 'jingle', 'net', 'sandbox',],
    factory_properties={'process_dumps': True,
                        'start_crash_handler': True})

f_chromium_dbg_tests_2 = win_build().ChromiumFactory(
    slave_type='Tester',
    build_url=chromium_dbg_archive,
    tests=['browser_tests'],
    factory_properties={'process_dumps': True,
                        'start_crash_handler': True})

f_chromium_dbg_tests_3 = win_build().ChromiumFactory(
    slave_type='Tester',
    build_url=chromium_dbg_archive,
    tests=['ui'],
    factory_properties={'process_dumps': True,
                        'start_crash_handler': True})

f_cr_rel_perf_frame = win_build().ChromiumFactory(
    slave_type='Tester',
    build_url=chromium_rel_archive_ext,
    tests=['chrome_frame_perftests'],
    factory_properties={'show_perf_results': True,
                        'expectations': True,
                        'perf_id': 'chromium-rel-frame',
                        'process_dumps': True,
                        'start_crash_handler': True,})

f_cr_rel_frame = win_build().ChromiumFactory(
    slave_type='Tester',
    build_url=chromium_rel_archive,
    tests=['chrome_frame'],
    factory_properties={'process_dumps': True,
                        'start_crash_handler': True,})

f_chromium_linux_redux = linux().ChromiumFactory(
    tests=['unit', 'net', 'base', 'crypto', 'cacheinvalidation', 'jingle'],
    options=['base_unittests',
             'cacheinvalidation_unittests',
             'content_unittests',
             'crypto_unittests',
             'googleurl_unittests',
             'ipc_tests',
             'jingle_unittests',
             'media_unittests',
             'net_unittests',
             'gfx_unittests',
             'printing_unittests',
             'remoting_unittests',
             'sql_unittests',
             'sync_unit_tests',
             'ui_tests',
             'unit_tests',
             ],
    factory_properties={
        'gclient_env': {
            'GYP_DEFINES': ('linux_fpic=1 '
                            'enable_touch_events=1 '
                            'disable_nacl=1 '
                            'linux_use_tcmalloc=0 '
                            'linux_breakpad=0 '
                            'remoting=0 '
                            'configuration_policy=0 '
                            'safe_browsing=0 '
                            'use_openssl=1')}})

f_chromium_dbg_linux_strict = linux().ChromiumFactory(
    target='Debug',
    factory_properties={'gclient_env': {'GYP_DEFINES': 'glibcxx_debug=1'}})

f_chromium_rel_chromeos_tsan_ui = linux().ChromiumOSFactory(
    slave_type='Tester',
    target='Release',
    build_url=("http://build108-m1/b/build/slave/"
               "chromium-rel-chromeos-valgrind-builder/chrome_staging/"
               "full-build-linux.zip"),
    tests=['tsan_ui_1_of_6',
           'tsan_ui_2_of_6',
           'tsan_ui_3_of_6',
           'tsan_ui_4_of_6',
           'tsan_ui_5_of_6',
           'tsan_ui_6_of_6',
           ],
    factory_properties={'needs_valgrind': True}
)

f_chromium_dbg_win_drmemory = win_build().ChromiumFactory(
    slave_type='Tester',
    target='Debug',
    build_url=chromium_dbg_win_drmemory_archive_ext,
    tests=[
      'drmemory_light_googleurl',
      'drmemory_light_printing',
      'drmemory_light_media',
      'drmemory_light_sql',
      'drmemory_light_crypto',
      'drmemory_light_remoting',
      'drmemory_light_ipc',
      'drmemory_light_base',
      'drmemory_light_net',
      # run tests in shards to decrease the number of reports per shard.
      'drmemory_light_unit_1_of_3',
      'drmemory_light_unit_2_of_3',
      'drmemory_light_unit_3_of_3',
    ],
    factory_properties={'needs_drmemory': True}
)

f_chromium_rel_win_drmemory = win_build().ChromiumFactory(
    target='Release',
    tests=[
      'drmemory_light_googleurl',
      'drmemory_light_printing',
      'drmemory_light_media',
      'drmemory_light_sql',
      'drmemory_light_crypto',
      'drmemory_light_remoting',
      'drmemory_light_ipc',
      'drmemory_light_base',
      'drmemory_light_net',
      # run tests in shards to decrease the number of reports per shard.
      'drmemory_light_unit_1_of_3',
      'drmemory_light_unit_2_of_3',
      'drmemory_light_unit_3_of_3',
    ],
    project='all.sln;chromium_builder_dbg_drmemory_win',
    factory_properties={
      'needs_drmemory': True,
      'gclient_env': {'GYP_DEFINES': drmemory_gyp_defines},
    }
)

f_chromium_dbg_win_drmemory_ui = win_build().ChromiumFactory(
    target='Debug',
    tests=[
      # run tests in shards to decrease the number of reports per shard.
      'drmemory_light_ui_1_of_5',
      'drmemory_light_ui_2_of_5',
      'drmemory_light_ui_3_of_5',
      'drmemory_light_ui_4_of_5',
      'drmemory_light_ui_5_of_5',
    ],
    project='all.sln;ui_tests',
    factory_properties={
      'needs_drmemory': True,
      'gclient_env': {'GYP_DEFINES': drmemory_gyp_defines},
    }
)

f_chromium_dbg_win_drmemory_full = win_build().ChromiumFactory(
    slave_type='Tester',
    target='Debug',
    build_url=chromium_dbg_win_drmemory_archive_ext,
    tests=[
      'drmemory_full_googleurl',
      'drmemory_full_printing',
      'drmemory_full_media',
      'drmemory_full_sql',
      'drmemory_full_crypto',
      'drmemory_full_remoting',
      'drmemory_full_ipc',
      'drmemory_full_base',
      'drmemory_full_net',
      # Full mode has a high memory overhead currently, so shard the tests
      # more.
      'drmemory_full_unit_1_of_6',
      'drmemory_full_unit_2_of_6',
      'drmemory_full_unit_3_of_6',
      'drmemory_full_unit_4_of_6',
      'drmemory_full_unit_5_of_6',
      'drmemory_full_unit_6_of_6',
    ],
    factory_properties={'needs_drmemory': True},
)

f_cr_dbg_mac_106_tsan = mac().ChromiumFactory(
    target='Debug',
    tests=['tsan_base',
           'tsan_googleurl',
           'tsan_crypto',
           'tsan_net',
           'tsan_ipc',
           'tsan_media',
           'tsan_printing',
           'tsan_remoting',
           ],
    options=['--', '-project', '../build/all.xcodeproj',
             '-target', 'chromium_builder_dbg_tsan_mac'],
    factory_properties={
        'needs_valgrind': True,
        'gclient_env': {'GYP_DEFINES': valgrind_mac_gyp_defines}})

f_chromium_rel_linux_tsan_gcc = linux().ChromiumFactory(
    target='Release',
    tests=['tsan_gcc_base',
           'tsan_gcc_content',
           'tsan_gcc_crypto',
           'tsan_gcc_googleurl',
           'tsan_gcc_net',
           'tsan_gcc_ipc',
           'tsan_gcc_media',
           'tsan_gcc_printing',
           'tsan_gcc_remoting',
           'tsan_gcc_gfx',
           'tsan_gcc_sync',
           'tsan_gcc_sql',
           'tsan_gcc_unit',
           'tsan_gcc_ui',
           ],
    options=['--compiler=tsan_gcc',
             'base_unittests',
             'content_unittests',
             'crypto_unittests',
             'googleurl_unittests',
             'net_unittests',
             'ipc_tests',
             'media_unittests',
             'printing_unittests',
             'remoting_unittests',
             'gfx_unittests',
             'sync_unit_tests',
             'sql_unittests',
             'unit_tests',
             'ui_tests',
             ],
    factory_properties={
        'needs_tsan_gcc': True,
        'gclient_env': {
            'GYP_DEFINES': ('linux_use_tcmalloc=0 disable_nacl=1'
                            ' release_valgrind_build=1'
                            ' target_arch=x64')}})

# GYP_DEFINES for running coverage.  Why we do each:
# coverage=1: turn it on!  (e.g. add -ftest-coverage on Linux, enable
#   the 'coverage' target, etc)
# fastbuild=1, enable_svg=0: try and make it smaller so we don't choke on link.
# (Sadly those two don't make us small enough to link with the 10.5 SDK.)
GYP_DEFINES_FOR_COVERAGE_WIN = ('coverage=1 '
                                'enable_svg=0')
# fastbuild=1 prevents PDB generation on Windows and it's necessary for
# code coverage, so we only add it for the other plaforms.
GYP_DEFINES_FOR_COVERAGE_POSIX = '%s fastbuild=1' % GYP_DEFINES_FOR_COVERAGE_WIN

f_coverage_dbg_mac = mac().ChromiumFactory(
    target='Debug',
    clobber=False,
    tests=['check_lkgr', 'run_coverage_bundles', 'process_coverage'],
    options=['--', '-project', '../chrome/chrome.xcodeproj',
             '-sdk', '/Developer/SDKs/MacOSX10.6.sdk',  # Too big for 10.5!
             '-target', 'coverage_build'],
    factory_properties={
        'lkgr': True,
        'gclient_env': {'GYP_DEFINES': GYP_DEFINES_FOR_COVERAGE_POSIX},
        'show_perf_results': True,
        'perf_id': 'chromium-dbg-mac'})

f_coverage_dbg_linux = linux().ChromiumFactory(
    target='Debug',
    clobber=False,
    tests=['check_lkgr', 'run_coverage_bundles', 'process_coverage'],
    options=['--build-dir=src/chrome',
             '--', 'coverage_build'],
    factory_properties={
        'lkgr': True,
        'gclient_env': {
            'GYP_DEFINES': GYP_DEFINES_FOR_COVERAGE_POSIX,
            'GYP_GENERATORS': 'make'},
        'show_perf_results': True,
        'perf_id': 'chromium-dbg-linux'})

f_coverage_dbg_win = win().ChromiumFactory(
    target='Debug',
    clobber=False,
    tests=['check_lkgr', 'run_coverage_bundles', 'process_coverage'],
    options=['--', '/project', 'coverage_build'],
    factory_properties={
        'lkgr': True,
        'gclient_env': {'GYP_DEFINES': GYP_DEFINES_FOR_COVERAGE_WIN},
        'show_perf_results': True,
        'perf_id': 'chromium-dbg-xp'})

f_chromium_rel_vista_memory = win().ChromiumFactory(
    tests=['memory'],
    options=['--', '/project', 'performance_ui_tests'],
    factory_properties={'show_perf_results': True,
                        'perf_id': 'chromium-rel-vista-memory'})

f_chromium_rel_linux_memory = linux().ChromiumFactory(
    tests=['memory'],
    options=['--', 'performance_ui_tests'],
    factory_properties={'show_perf_results': True,
                        'perf_id': 'chromium-rel-linux-memory',
                        'gclient_env': {'GYP_GENERATORS': 'make'}})

f_chromium_rel_mac_memory = mac().ChromiumFactory(
    tests=['memory'],
    options=['--', '-project', '../chrome/chrome.xcodeproj',
             '-target', 'performance_ui_tests'],
    factory_properties={'show_perf_results': True,
                        'perf_id': 'chromium-rel-mac-memory'})

f_chromium_rel_linux_tsan_rv = linux().ChromiumFactory(
    target='Release',
    tests=['tsan_rv_googleurl',
           'tsan_rv_printing',
           'tsan_rv_media',
           'tsan_rv_sql',
           'tsan_rv_ipc',
           'tsan_rv_remoting',
           'tsan_rv_gfx',
           'tsan_rv_base',
           'tsan_rv_crypto',
           'tsan_rv_sync',
           'tsan_rv_net',
           'tsan_rv_unit_1_of_2',
           'tsan_rv_unit_2_of_2',
           ],
    options=['content_unittests',
             'googleurl_unittests',
             'printing_unittests',
             'media_unittests',
             'sql_unittests',
             'ipc_tests',
             'remoting_unittests',
             'base_unittests',
             'crypto_unittests',
             'sync_unit_tests',
             'net_unittests',
             'gfx_unittests',
             'unit_tests',
             ],
    factory_properties={
        'needs_valgrind': True,
        'gclient_env': {'GYP_DEFINES': valgrind_gyp_defines}})

f_chromium_dbg_win_tsan = win_build().ChromiumFactory(
    slave_type='Tester',
    target='Debug',
    build_url=chromium_dbg_win_drmemory_archive_ext,
    tests=[
      'tsan_googleurl',
      'tsan_printing',
      'tsan_remoting',
      'tsan_sql',
      'tsan_media',
      'tsan_ipc',
      'tsan_base',
      'tsan_crypto',
      'tsan_net',
    ],
    factory_properties={'needs_tsan_win': True},
)

f_chromium_rel_linux_valgrind_reliability = linux().ChromiumFactory(
    target='Release',
    tests=[
      'tsan_reliability',
      'valgrind_reliability',
      'tsan_browser',
      'valgrind_browser',
    ],
    options=[
      'reliability_tests',
      'browser_tests',
    ],
    factory_properties={
        'needs_valgrind': True,
        'gclient_env': {
            'GYP_DEFINES': valgrind_gyp_defines,
            'GYP_GENERATORS': 'make'}})

f_chromium_mac_106_shared = mac().ChromiumFactory(
    slave_type='Builder',
    target='Release',
    options=[
        '--build-tool=make',
        '--compiler=goma-clang',
    ],
    factory_properties={
      'trigger': 'mac_rel',
      'gclient_env': {
          'GYP_DEFINES': 'fastbuild=1 component=shared_library',
          'GYP_GENERATORS': 'make',
      }},
    tests=[])

f_chromium_mac_105_tests = mac().ChromiumFactory(
    slave_type='Tester',
    build_url=chromium_rel_mac_archive,
    target='Release',
    tests=['base',
           'browser_tests',
           'cacheinvalidation',
           'crypto',
           'googleurl',
           'gpu',
           'jingle',
           'media',
           'nacl_integration',
           'printing',
           'remoting',
           'safe_browsing',
           'ui'],
    factory_properties={'generate_gtest_json': True,})

mac_unsharded = [
  'gfx_unittests',
  'interactive_ui_tests',
  'ipc_tests',
  'net_unittests',
  'sql_unittests',
  'ui_tests',
  'unit_tests',
]

f_chromium_mac_106_vm_sharded = mac().ChromiumFactory(
    target='Release',
    options=['--build-tool=make', '--compiler=goma-clang'],
    tests=['base', 'browser_tests', 'cacheinvalidation', 'check_deps',
           'crypto', 'googleurl', 'gpu', 'interactive_ui', 'jingle', 'media',
           'nacl_integration', 'net', 'printing', 'pyauto_functional_tests',
           'remoting', 'safe_browsing', 'test_shell', 'ui', 'unit',
           'webkit_unit'],
    factory_properties={
        'generate_gtest_json': True,
        'sharding_supervisor': True,
        'unsharded_tests': mac_unsharded,
        'gclient_env': {
            'GYP_DEFINES': 'fastbuild=1 enable_svg=0 dcheck_always_on=1 ',
            'GYP_GENERATORS': 'make'}})

f_chromium_mac_106_vm = mac().ChromiumFactory(
    target='Release',
    tests=['base', 'browser_tests', 'cacheinvalidation', 'check_deps',
           'crypto', 'googleurl', 'gpu', 'interactive_ui', 'jingle', 'media',
           'nacl_integration', 'net', 'printing', 'pyauto_functional_tests',
           'remoting', 'safe_browsing', 'test_shell', 'ui', 'unit',
           'webkit_unit'],
    factory_properties={
        'generate_gtest_json': True,
        'gclient_env': {
            'GYP_DEFINES': 'fastbuild=1 enable_svg=0 '}})

f_chromium_mac_107_tests = mac().ChromiumFactory(
    slave_type='Tester',
    build_url=chromium_rel_mac_archive,
    target='Release',
    tests=['base',
           'browser_tests',
           'cacheinvalidation',
           'crypto',
           'googleurl',
           'gpu',
           'jingle',
           'media',
           'nacl_integration',
           'printing',
           'remoting',
           'safe_browsing',
           'ui'],
    factory_properties={'generate_gtest_json': True,})

f_chromium_mac_107_tests_vm = mac().ChromiumFactory(
    slave_type='Tester',
    build_url=chromium_rel_mac_archive,
    target='Release',
    tests=['base',
           'browser_tests',
           'cacheinvalidation',
           'crypto',
           'googleurl',
           'gpu',
           'jingle',
           'media',
           'nacl_integration',
           'printing',
           'remoting',
           'safe_browsing',
           'ui'],
    factory_properties={'generate_gtest_json': True,})

f_chromium_mac_make = mac().ChromiumFactory(
    target='Debug',
    options=['--build-tool=make', '--compiler=goma-clang'],
    factory_properties={'gclient_env': {'GYP_GENERATORS': 'make'}},
    tests=['base', 'gfx', 'unit', 'crypto'])

f_chromium_codesearch = codesearch().ChromiumFactory(
    target='Release',
    slave_type='Updater',
    factory_properties={'gclient_deps': 'all'})

linux_aura_tests = [
  'aura',
  'aura_shell',
  'base',
  'browser_tests',
  'cacheinvalidation',
  'compositor',
  'crypto',
  'googleurl',
  'interactive_ui',
  'jingle',
  'media',
  'printing',
  #'remoting',
  'views',
  'unit',
  'ui',
]

# TODO(glider): add remoting_unittests to |asan_tests_2| below once they are
# enabled.
linux_aura_options=[
  'aura_builder',
  'base_unittests',
  'cacheinvalidation_unittests',
  'crypto_unittests',
  'googleurl_unittests',
  'jingle_unittests',
  'media_unittests',
  'printing_unittests',
  #'remoting_unittests',
  'ipc_tests',
  'sql_unittests',
  'gfx_unittests',
  'content_unittests',
  'browser_tests',
  'ui_tests',
  'interactive_ui_tests',
]

f_linux_rel_aura = linux().ChromiumFactory(
    target='Release',
    slave_type='BuilderTester',
    options=['--compiler=goma'] + linux_aura_options,
    tests=linux_aura_tests,
    factory_properties={'gclient_env': {'GYP_DEFINES': 'use_aura=1'}})

f_chromium_rel_chromeos_asan_builder = chromeos().ChromiumOSASANFactory(
    target='Release',
    slave_type='Builder',
    options=['--compiler=asan'] + linux_aura_options,
    factory_properties={
      'asan': True,
      'trigger': 'linux_asan',
      'gclient_env': {
          'GYP_DEFINES': ('asan=1 '
                          'linux_use_tcmalloc=0 '
                          'chromeos=1 '
                          'target_arch=ia32')}})

asan_tests_1 = ['aura', 'aura_shell', 'base', 'cacheinvalidation', 'crypto',
                'gpu', 'jingle', 'net', 'safe_browsing', 'ui', 'unit']
asan_tests_2 = ['browser_tests', 'googleurl', 'media', 'printing', 'views']
chromeos_asan_tests_1 = list(set(asan_tests_1) & set(linux_aura_tests))
chromeos_asan_tests_2 = list(set(asan_tests_2) & set(linux_aura_tests))

f_chromium_rel_chromeos_asan_tests_1 = chromeos().ChromiumOSASANFactory(
    slave_type='Tester',
    build_url=chromium_chromeos_asan_archive,
    tests=chromeos_asan_tests_1,
    factory_properties={
      'asan': True,
    })

f_chromium_rel_chromeos_asan_tests_2 = chromeos().ChromiumOSASANFactory(
    slave_type='Tester',
    build_url=chromium_chromeos_asan_archive,
    tests=chromeos_asan_tests_2,
    factory_properties={
      'asan': True,
    })

mac_asan_options=[
  'base_unittests',
  'browser_tests',
  'cacheinvalidation_unittests',
  'content_unittests',
  'crypto_unittests',
  'gfx_unittests',
  'googleurl_unittests',
  'interactive_ui_tests',
  'ipc_tests',
  'jingle_unittests',
  'media_unittests',
  'printing_unittests',
  'remoting_unittests',
  'sql_unittests',
  'ui_tests',
]

mac_asan_tests_1=[
  'base',
  'cacheinvalidation',
  'content',
  'crypto',
  'gfx',
  'printing',
  'remoting',
  'sql',
  'ui',
]

mac_asan_tests_2=[
  'browser_tests',
  'googleurl',
  'interactive_ui',
  'ipc',
  'jingle',
  'media',
]

f_chromium_rel_mac_asan_builder = mac().ChromiumASANFactory(
    target='Release',
    slave_type='Builder',
    options=['--build-tool=make', '--compiler=asan'] + mac_asan_options,
    factory_properties={
      'asan': True,
      'trigger': 'mac_asan',
      'gclient_env': {'GYP_DEFINES': 'asan=1 release_extra_cflags=-g',
                      'GYP_GENERATORS': 'make' }}
)

f_chromium_rel_mac_asan_tests_1 = mac().ChromiumASANFactory(
    slave_type='Tester',
    build_url=chromium_mac_asan_archive,
    tests=mac_asan_tests_1,
    factory_properties={
      'asan': True,
    })

f_chromium_rel_mac_asan_tests_2 = mac().ChromiumASANFactory(
    slave_type='Tester',
    build_url=chromium_mac_asan_archive,
    tests=mac_asan_tests_2,
    factory_properties={
      'asan': True,
    })

f_chromium_rel_linux_android = linux_android().ChromiumAnnotationFactory(
    target='Release',
    annotation_script='src/build/android/buildbot_fyi.sh',
    )

f_chromium_dbg_linux_shared = linux().ChromiumFactory(
    tests=['googleurl', 'media', 'printing', 'remoting', 'courgette', 'unit',
           'gpu', 'installer', 'safe_browsing', 'base', 'crypto',
           'cacheinvalidation', 'jingle', 'ui', 'net', 'browser_tests'],
    options=['--compiler=goma'],
    factory_properties={
      'gclient_env': {'GYP_DEFINES':'component=shared_library'}
    })

# ----------------------------------------------------------------------------
# BUILDER DEFINITIONS

slave_lock = locks.SlaveLock('one_per_slave_lock', maxCount=1)

# ----------------------------------------------------------------------------
# BUILDER DEFINITIONS

# The 'builders' list defines the Builders. Each one is configured with a
# dictionary, using the following keys:
#  name (required): the name used to describe this bilder
#  slavename (required): which slave to use, must appear in c['slaves']
#  builddir (optional): which subdirectory to run the builder in
#  factory (required): a BuildFactory to define how the build is run
#  periodicBuildTime (optional): if set, force a build every N seconds
#  category (optional): it is not used in the normal 'buildbot' meaning. It is
#                       used by gatekeeper to determine which steps it should
#                       look for to close the tree.
#

b_chromium_rel_builder = {'name': 'Chromium Builder',
  'builddir': 'chromium-rel-builder',
  'factory': f_chromium_rel_builder,
  'category': 'windows',
}

b_chromium_dbg_builder = {'name': 'Chromium Builder (dbg)',
  'builddir': 'chromium-dbg-builder',
  'factory': f_chromium_dbg_builder,
  'category': 'windows',
}

b_chromium_rel_perf_frame = {'name': 'Chrome Frame Perf',
  'builddir': 'chromium-rel-perf-frame',
  'factory': f_cr_rel_perf_frame,
  'auto_reboot': True,
  'category': 'windows',
}

b_chromium_dbg_vista_tests_1 = {
  'name': 'Vista Tests (dbg)(1)',
  'factory': f_chromium_dbg_tests_1,
  'category': 'windows',
}

b_chromium_dbg_vista_tests_2 = {
  'name': 'Vista Tests (dbg)(2)',
  'factory': f_chromium_dbg_tests_2,
  'category': 'windows',
}

b_chromium_dbg_vista_tests_3 = {
  'name': 'Vista Tests (dbg)(3)',
  'factory': f_chromium_dbg_tests_3,
  'category': 'windows',
}

b_chromium_dbg_linux_strict = {
  'name': 'Chromium Linux Strict (dbg)',
  'factory': f_chromium_dbg_linux_strict,
  'category': 'linux',
}

b_chromium_linux_redux = {
  'name': 'Chromium Linux Redux',
  'factory': f_chromium_linux_redux,
  'category': 'linux',
}

b_chromium_rel_linux_aura = {
  'name': 'Linux (rel)(aura)',
  'factory': f_linux_rel_aura,
  'category': 'linux',
}

b_chromium_rel_ie6_peruser_frame = {
  'name': 'Chrome Frame Tests (ie6)(peruser)',
  'factory': f_cr_rel_frame,
  'auto_reboot': True,
  'category': 'windows',
}

b_chromium_rel_ie7_peruser_frame = {
  'name': 'Chrome Frame Tests (ie7)(peruser)',
  'factory': f_cr_rel_frame,
  'auto_reboot': True,
  'category': 'windows',
}

b_chromium_rel_ie8_peruser_frame = {
  'name': 'Chrome Frame Tests (ie8)(peruser)',
  'factory': f_cr_rel_frame,
  'auto_reboot': True,
  'category': 'windows',
}

b_chromium_rel_ie9_frame = {
  'name': 'Chrome Frame Tests (ie9)',
  'factory': f_cr_rel_frame,
  'auto_reboot': True,
  'category': 'windows',
}

b_chromium_rel_linux_tsan_gcc = {
  'name': 'Chromium Linux TSan-GCC',
  'builddir': 'chromium-rel-linux-tsan-gcc',
  'factory': f_chromium_rel_linux_tsan_gcc,
  'category': 'tsan',
}

b_chromium_rel_chromeos_tsan_ui = {
  'name': 'Chromium OS Tests (tsan ui)',
  'builddir': 'chromium-rel-chromeos-tsan-ui',
  'factory': f_chromium_rel_chromeos_tsan_ui,
  'category': 'tsan',
}

b_chromium_dbg_mac_106_tsan = {
  'name': 'Chromium Mac 10.6 (tsan)',
  'builddir': 'chromium-dbg-mac-106-tsan',
  'factory': f_cr_dbg_mac_106_tsan,
  'category': 'tsan',
}

b_chromium_dbg_win_drmemory_xp = {
  'name': 'Windows Tests (DrMemory XP)',
  'builddir': 'chromium-dbg-win-drmemory-xp',
  'factory': f_chromium_dbg_win_drmemory,
  'category': 'drmemory|memory_tester',
}

b_chromium_rel_win_drmemory = {
  'name': 'Windows Tests (DrMemory Release)',
  'builddir': 'chromium-rel-win-drmemory',
  'factory': f_chromium_rel_win_drmemory,
  'category': 'drmemory|memory_tester',
}

b_chromium_dbg_win_drmemory_ui = {
  'name': 'Windows Tests (DrMemory UI)',
  'builddir': 'chromium-dbg-win-drmemory-ui',
  'factory': f_chromium_dbg_win_drmemory_ui,
  'category': 'drmemory|memory_tester',
}

b_chromium_dbg_win_drmemory_full = {
  'name': 'Windows Tests (DrMemory full)',
  'builddir': 'chromium-dbg-win-drmemory-full',
  'factory': f_chromium_dbg_win_drmemory_full,
  'category': 'drmemory',
}

b_chromium_rel_linux_tsan_rv = {
  'name': 'Linux Tests (tsan RV)',
  'builddir': 'chromium-rel-linux-tsan-rv',
  'factory': f_chromium_rel_linux_tsan_rv,
  'category': 'tsan',
}

b_chromium_dbg_win_tsan = {
  'name': 'Windows Tests (TSan Win 7)',
  'builddir': 'chromium-dbg-win-tsan',
  'factory': f_chromium_dbg_win_tsan,
  'category': 'tsan',
}

b_coverage_dbg_mac = {
  'name': 'Mac Coverage (dbg)',
  'builddir': 'coverage-dbg-mac',
  'factory': f_coverage_dbg_mac,
  'category': 'coverage',
  'locks': [slave_lock],
}

b_coverage_dbg_linux = {
  'name': 'Linux Coverage (dbg)',
  'builddir': 'coverage-dbg-linux',
  'factory': f_coverage_dbg_linux,
  'category': 'coverage',
  'locks': [slave_lock],
}

b_coverage_dbg_win = {
  'name': 'Win Coverage (dbg)',
  'builddir': 'coverage-dbg-win',
  'factory': f_coverage_dbg_win,
  'category': 'coverage',
  'locks': [slave_lock],
}

b_chromium_rel_vista_memory = {
  'name': 'Chromium Vista Memory',
  'builddir': 'chromium-rel-vista-memory',
  'factory': f_chromium_rel_vista_memory,
  'category': 'memory tests',
}

b_chromium_rel_linux_memory = {
  'name': 'Chromium Linux Memory',
  'builddir': 'chromium-rel-linux-memory',
  'factory': f_chromium_rel_linux_memory,
  'category': 'memory tests',
}

b_chromium_rel_mac_memory = {
  'name': 'Chromium Mac Memory',
  'builddir': 'chromium-rel-mac-memory',
  'factory': f_chromium_rel_mac_memory,
  'category': 'memory tests',
}

b_chromium_rel_linux_valgrind_reliability = {
  'name': 'Chromium Linux Reliability (valgrind)',
  'builddir': 'chromium-rel-linux-valgrind-reliability',
  'factory': f_chromium_rel_linux_valgrind_reliability,
  'category': 'valgrind',
}

b_chromium_mac_106_shared = {
  'name': 'Chromium Mac 10.6 Shared',
  'builddir': 'chromium-rel-mac-builder',
  'factory': f_chromium_mac_106_shared,
  'category': 'goma',
}

b_chromium_mac_105_tests = {
  'name': 'Chromium Mac 10.5 Tests (vm)',
  'factory': f_chromium_mac_105_tests,
  'auto_reboot': True,
}

b_chromium_mac_106_vm_sharded = {
  'name': 'Chromium Mac 10.6 (vm, sharded)',
  'factory': f_chromium_mac_106_vm_sharded,
  'auto_reboot': True,
}

b_chromium_mac_106_vm = {
  'name': 'Chromium Mac 10.6 (vm)',
  'factory': f_chromium_mac_106_vm,
  'auto_reboot': True,
}

b_chromium_mac_107_tests_vm = {
  'name': 'Chromium Mac 10.7 Tests (vm)',
  'factory': f_chromium_mac_107_tests_vm,
  'auto_reboot': True,
}

b_chromium_mac_107_tests = {
  'name': 'Chromium Mac 10.7 Tests',
  'factory': f_chromium_mac_107_tests,
  'auto_reboot': True,
}

b_chromium_mac_make = {
  'name': 'Chromium Mac Make',
  'factory': f_chromium_mac_make,
  'category': 'macmake',
}

b_chromium_codesearch = {
  'name': 'Chromium Codesearch',
  'factory': f_chromium_codesearch,
  'category': 'codesearch',
}

b_chromium_rel_chromeos_asan_builder = {
  'name': 'Chromium OS ASAN Builder',
  'builddir': 'chromium-rel-chromeos-asan-builder',
  'factory': f_chromium_rel_chromeos_asan_builder,
  'category': 'ASan',
}

b_chromium_rel_chromeos_asan_tests_1 = {
  'name': 'Chromium OS ASAN Tests (1)',
  'factory': f_chromium_rel_chromeos_asan_tests_1,
  'auto_reboot': True,
  'category': 'ASan',
}

b_chromium_rel_chromeos_asan_tests_2 = {
  'name': 'Chromium OS ASAN Tests (2)',
  'factory': f_chromium_rel_chromeos_asan_tests_2,
  'auto_reboot': True,
  'category': 'ASan',
}

b_chromium_rel_mac_asan_builder = {
  'name': 'Mac ASAN Builder',
  'builddir': 'chromium-rel-mac-asan-builder',
  'factory': f_chromium_rel_mac_asan_builder,
  'category': 'ASan',
}

b_chromium_rel_mac_asan_tests_1 = {
  'name': 'Mac ASAN Tests (1)',
  'factory': f_chromium_rel_mac_asan_tests_1,
  'auto_reboot': True,
  'category': 'ASan',
}

b_chromium_rel_mac_asan_tests_2 = {
  'name': 'Mac ASAN Tests (2)',
  'factory': f_chromium_rel_mac_asan_tests_2,
  'auto_reboot': True,
  'category': 'ASan',
}

b_chromium_rel_linux_android = {
  'name': 'Chromium Linux Android',
  'factory': f_chromium_rel_linux_android,
  'category': 'android'
}

b_chromium_dbg_linux_shared = {'name': 'Linux (dbg)(shared)',
  'factory': f_chromium_dbg_linux_shared,
  'category': 'linux',
}

c['builders'] = [
  # Windows release
  b_chromium_rel_builder,
  b_chromium_rel_perf_frame,
  b_chromium_rel_ie6_peruser_frame,
  b_chromium_rel_ie7_peruser_frame,
  b_chromium_rel_ie8_peruser_frame,
  b_chromium_rel_ie9_frame,

  # Windows debug
  b_chromium_dbg_builder,
  b_chromium_dbg_vista_tests_1,
  b_chromium_dbg_vista_tests_2,
  b_chromium_dbg_vista_tests_3,

  # Mac release
  b_chromium_mac_106_shared,
  b_chromium_mac_105_tests,
  b_chromium_mac_107_tests,
  b_chromium_mac_107_tests_vm,

  # Mac BuilderTesters
  b_chromium_mac_106_vm,
  b_chromium_mac_106_vm_sharded,
  b_chromium_mac_make,

  # Linux BuilderTesters
  b_chromium_linux_redux,
  b_chromium_rel_linux_valgrind_reliability,
  b_chromium_dbg_linux_strict,
  b_chromium_dbg_linux_shared,
  b_chromium_rel_linux_aura,

  # Android
  b_chromium_rel_linux_android,

  # TSAN
  b_chromium_dbg_win_tsan,
  b_chromium_dbg_mac_106_tsan,
  b_chromium_rel_linux_tsan_rv,
  b_chromium_rel_linux_tsan_gcc,
  b_chromium_rel_chromeos_tsan_ui,

  # DrMemory
  b_chromium_dbg_win_drmemory_xp,
  b_chromium_dbg_win_drmemory_ui,
  b_chromium_dbg_win_drmemory_full,
  b_chromium_rel_win_drmemory,

  # Memory
  b_chromium_rel_vista_memory,
  b_chromium_rel_linux_memory,
  b_chromium_rel_mac_memory,

  # Chrome OS ASAN 
  b_chromium_rel_chromeos_asan_builder,
  b_chromium_rel_chromeos_asan_tests_1,
  b_chromium_rel_chromeos_asan_tests_2,

  # Mac ASAN
  b_chromium_rel_mac_asan_builder,
  b_chromium_rel_mac_asan_tests_1,
  b_chromium_rel_mac_asan_tests_2,

  # Coverage
  b_coverage_dbg_mac,
  b_coverage_dbg_linux,
  b_coverage_dbg_win,

  # Codesearch
  b_chromium_codesearch,
]

# Associate the slaves to the manual builders. The configuration is in
# slaves.cfg.
slaves = slaves_list.SlavesList('slaves.cfg', 'ChromiumFYI')
for builder in c['builders']:
  builder['slavenames'] = slaves.GetSlavesName(builder=builder['name'])


####### BUILDSLAVES

# The 'slaves' list defines the set of allowable buildslaves. List all the
# slaves registered to a builder. Remove dupes.
c['slaves'] = master_utils.AutoSetupSlaves(c['builders'],
                                           config.Master.GetBotPassword())

# Make sure everything works together.
master_utils.VerifySetup(c, slaves)


####### STATUS TARGETS

# Adds common status and tools to this master.
master_utils.AutoSetupMaster(c, ActiveMaster,
    public_html="../master.chromium/public_html",
    templates=['../master.chromium/templates'],
    enable_http_status_push=ActiveMaster.is_production_host)

# Add more.

if STATUS_PUSH:
  from buildbot.status.status_push import HttpStatusPush
  c['status'].append(HttpStatusPush(
      'http://craebuild.appspot.com/status-listener'))

if CODESEARCH_NOTIFIER:
  categories_steps = {
    'codesearch': ['update_scripts', 'update', 'svnkill', 'package_source'],
  }
  c['status'].append(chromium_notifier.ChromiumNotifier(
      fromaddr=ActiveMaster.from_address,
      categories_steps=categories_steps,
      exclusions={},
      relayhost=config.Master.smtp,
      status_header='Codesearch alert on "%(builder)s":\n%(steps)s',
      subject='codesearch buildbot %(result)s in %(projectName)s on '
              '%(builder)s, revision %(revision)s',
      extraRecipients=['jochen@chromium.org'],
      lookup=master_utils.FilterDomain(),
      forgiving_steps=[],
      use_getname=True))

if DRMEMORY_NOTIFIER:
  categories_steps = {
    'memory_tester': [
      'memory test: googleurl',
      'memory test: printing',
      'memory test: media',
      'memory test: remoting',
      'memory test: sql',
      'memory test: sync',
      'memory test: sync_unit_tests',
      'memory test: ipc',
      'memory test: base',
      'memory test: content',
      'memory test: crypto',
      'memory test: net',
      'memory test: gfx',
      'memory test: unit',  # unit_tests can be sharded
      'memory test: unit_1',
      'memory test: unit_2',
   ],
  }
  c['status'].append(failures_notifier.FailuresNotifier(
      fromaddr=ActiveMaster.from_address,
      categories_steps=categories_steps,
      exclusions={},
      relayhost=config.Master.smtp,
      status_header='New DrMemory failure on "%(builder)s":\n%(steps)s',
      subject='drmemory buildbot %(result)s in %(projectName)s on '
              '%(builder)s, revision %(revision)s',
      sendToInterestedUsers=False,  # don't send e-mails to the committers.
      extraRecipients=[
          'bruening+drmfyifailure@google.com',
          'rnk+drmfyifailure@google.com',
          'timurrrr+drmfyifailure@google.com',
          'zhaoqin+drmfyifailure@google.com',
      ],
      lookup=master_utils.FilterDomain(),
      forgiving_steps=[],
      use_getname=True))


####### PROJECT IDENTITY

# Buildbot master url:
c['buildbotURL'] = 'http://build.chromium.org/p/chromium.fyi/'
