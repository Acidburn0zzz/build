# Copyright (c) 2010 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

from buildbot import locks
from buildbot.changes import svnpoller
from buildbot.scheduler import Dependent
from buildbot.scheduler import Nightly
from buildbot.scheduler import Periodic
from buildbot.scheduler import Scheduler
from buildbot.scheduler import Triggerable
from buildbot.status.mail import MailNotifier

# These modules come from scripts/master, which must be in the PYTHONPATH.
from master import build_utils
from master import master_utils
from master import slaves_list

from master.factory import chromium_factory
from master.factory import gyp_factory

# These modules come from scripts/common, which must be in the PYTHONPATH.
import config

ActiveMaster = config.Master.ChromiumFYI

STATUS_PUSH = False

CLANG_NOTIFIER = ActiveMaster.is_production_host

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}


####### CHANGESOURCES

# the 'change_source' list tells the buildmaster how it should find out about
# source code changes. Any class which implements IChangeSource can be added
# to this list: there are several in buildbot/changes/*.py to choose from.
def ChromeTreeFileSplitter(path):
  """split_file for the 'src' project in the trunk."""

  # Exclude o3d from triggering builds on chrome for now.
  if path.startswith('src/o3d/'):
    return None

  # List of projects we are interested in. The project names must exactly
  # match paths in the Subversion repository, relative to the 'path' URL
  # argument. build_utils.SplitPath() will use them as branch names to
  # kick off the Schedulers for different projects.
  projects = ['src']
  return build_utils.SplitPath(projects, path)

def WebkitFileSplitter(path):
  """split_file for webkit.org repository."""
  projects = ['trunk']
  return build_utils.SplitPath(projects, path)

# Rev link urls.
chromium_rev="http://src.chromium.org/viewvc/chrome?view=rev&revision=%s"
webkit_rev="http://trac.webkit.org/changeset/%s"
gyp_rev="http://code.google.com/p/gyp/source/detail?r=%s"

# Polls config.Master.trunk_url for changes
trunk_poller = svnpoller.SVNPoller(svnurl=config.Master.trunk_url,
                                   split_file=ChromeTreeFileSplitter,
                                   pollinterval=10,
                                   revlinktmpl=chromium_rev)

## Polls webkit.org repository.
webkit_poller = svnpoller.SVNPoller(
                    svnurl = config.Master.webkit_root_url,
                    split_file=WebkitFileSplitter,
                    pollinterval=30,
                    revlinktmpl=webkit_rev)

gyp_poller = svnpoller.SVNPoller(
                 svnurl=config.Master.gyp_trunk_url,
                 pollinterval=60,
                 revlinktmpl=gyp_rev)

c['change_source'] = [trunk_poller, webkit_poller, gyp_poller]


####### SCHEDULERS

## configure the Schedulers

# Main scheduler for all changes in trunk.
s_chromium = Scheduler(name='chromium',
                       branch='src',
                       treeStableTimer=60,
                       builderNames=['Webkit Vista (dbg)',
                                     'Webkit Windows7 (dbg)',
                                     'Webkit Linux 64',
                                     'Webkit (webkit.org)',
                                     'Webkit Linux (webkit.org)',
                                     'Webkit Linux (valgrind webkit.org)',
                                     'Linux Tests (tsan ui)',
                                     'Chromium Mac 10.6 (tsan)',
                                     'Windows Tests (DrMemory)',
                                     'Webkit Mac (webkit.org)',
                                     'Mac10.6 Perf (webkit.org)',
                                     'Linux Perf (webkit.org)',
                                     'Linux Perf (lowmem)',
                                     'Webkit Mac (valgrind layout)',
                                     'Google Chrome XP',
                                     'Google Chrome Linux',
                                     'Google Chrome Linux x64',
                                     'Google Chrome Mac',
                                     'Google Chrome ChromeOS',
                                     'Chromium Embedded',
                                     'Chromium Linux (dbg-shlib)',
                                     'Chromium Linux Debug Clang',
                                     'Chromium XP Memory',
                                     'Chromium Linux Memory',
                                     'Chromium Mac Memory',
                                     'Chromium Linux GYP (make)',
                                     'Chromium Linux GYP (scons)',
                                     'Chromium Mac GYP',
                                     'Chromium Mac Debug Clang',
                                     'Chromium XP GYP',
                                     'Ubuntu Packaging GYP',
                                     'Chrome Frame Perf',
                                     'Chromium XP (dbg shared)',
                                     'Chromium Mac Sync',
                                     ])

# Create the triggerable scheduler for the reliability tests.
s_webkit_reliability = Triggerable(name='reliability',
                                   builderNames=['WebKit Reliability'])

# Scheduler to trigger slaves that depend on the release build.
s_chromium_rel_builder = Scheduler(name='chromium_rel_builder',
                                   branch='src',
                                   treeStableTimer=60,
                                   builderNames=['Chromium Builder'])

s_chromium_rel_dependent = Dependent('chromium_rel_dependent',
                                     s_chromium_rel_builder,
                                     ['XP Tests',
                                      'XP Perf (jank)',
                                      'Vista Perf (jank)',
                                      'Chromium Vista 64',
                                      'Chromium Windows7',
                                      'Chromium Windows7 Sync',
                                     ])

# Scheduler for building Chromium with WebKit TOT when Chromium code changes.
s_webkit_org_rel_builder = Scheduler(name='webkit_rel_builder',
    branch='src',
    treeStableTimer=60,
    builderNames=['Webkit.org Builder',
                  'Webkit.org Reliability Builder'])

# Scheduler to trigger slaves that depend on the webkit.org release build.
s_webkit_rel_org_builder_dependent = Dependent('webkit_release_dependent',
                                               s_webkit_org_rel_builder,
                                               ['XP Perf (webkit.org)',
                                                'XP Tests (webkit.org)'])

# Scheduler for building Chromium with WebKit TOT when WebKit code changes.
s_webkit_org_rel_builder_webkit = Scheduler(name='webkit_org_rel_builder',
    branch='trunk',
    treeStableTimer=60,
    builderNames=['Webkit.org Builder',
                  'Webkit.org Reliability Builder'])

# Scheduler to trigger slaves that depend on the webkit.org release build.
s_webkit_rel_org_builder_dependent_webkit = Dependent(
    'webkit_org_release_dependent',
    s_webkit_org_rel_builder_webkit,
    ['XP Perf (webkit.org)',
     'XP Tests (webkit.org)'])

# Nightly scheduler for coverage and slower target builds.
s_chromium_nightly = Nightly(name='chromium_nightly',
                             builderNames=['Win Target Builds'],
                             hour=0,
                             minute=0)

# Three-times-a-day scheduler for quicker target builds.
s_chromium_thrice_daily= Nightly(name='chromium_thrice_daily',
                                 builderNames=['Mac Target Builds',
                                               'Linux Target Builds'],
                                 hour=[0,8,16],
                                 minute=0)

# Once an hour scheduler to provide a periodic poll of lkgr.  The
# coverage builds "run" once an hour but nop themselves if lkgr hasn't
# changed.
s_chromium_hourly = Periodic(name="hourly",
                             builderNames=['Win Coverage (dbg)',
                                           'Mac Coverage (dbg)',
                                           'Linux Coverage (dbg)'],
                             periodicBuildTimer=60*60)  # in seconds

# Scheduler to trigger when webkit.org is updated.
s_webkit_rel_webkit_org = Scheduler(name='webkit_rel_webkit_org',
    branch='trunk',
    treeStableTimer=60,
    builderNames=['Webkit (webkit.org)',
                  'Webkit Linux (webkit.org)',
                  'Linux Perf (webkit.org)',
                  'Mac10.6 Perf (webkit.org)',
                  'Webkit Mac (webkit.org)',
                  'Webkit Linux (valgrind webkit.org)'])

# Scheduler to trigger when GYP is updated.
s_gyp = Scheduler(name='gyp',
                  branch=None,
                  treeStableTimer=60,
                  builderNames=['GYP XP',
                                'GYP Mac',
                                'GYP Linux (make)',
                                'GYP Linux (scons)'])

s_chromium_linux_valgrind_x64_builder= Scheduler(
    name='chromium_linux_valgrind_x64_builder',
    branch='src',
    treeStableTimer=60,
    builderNames=['Chromium Linux Builder (valgrind x64)'])

s_chromium_linux_valgrind_x64_dependent = Dependent(
    'chromium_linux_valgrind_x64_dependent',
    s_chromium_linux_valgrind_x64_builder,
    ['Linux Tests (tsan x64)',
    ])

# Scheduler to trigger the Linux reliability builder.
# Running the builder at most once per hour keeps it in sync with the tests.
s_chromium_linux_reliability_builder = Nightly(
    name='reliability_linux_builder',
    branch='src',
    builderNames=['Chromium Linux Reliability Builder'],
    minute=0,
    onlyIfChanged=True)

# Triggerable scheduler for Linux reliability tests.
s_chromium_linux_reliability = Triggerable(
    name='reliability_linux',
    builderNames=['Chromium Linux Reliability'])

# Scheduler for Chrome Frame reliability tests. Runs every hour.
# TODO(robertshield): When this moves to the main waterfall, trigger
# this from the Chrome Frame tests.
s_chrome_frame_reliability = Nightly(
    name='reliability_chrome_frame',
    builderNames=['Chrome Frame Reliability'],
    minute=0)

s_chromium_wine_valgrind_builder = Scheduler(
    name='chromium_wine_valgrind_builder',
    branch='src',
    treeStableTimer=60,
    builderNames=['Chromium XP Wine Valgrind Builder'])

s_chromium_wine_valgrind_dependent = Dependent(
    'chromium_wine_valgrind_dependent',
    s_chromium_wine_valgrind_builder,
    ['Chromium Linux Wine (valgrind)',
    ])

c['schedulers'] = [s_chromium,
                   s_chromium_hourly,
                   s_chromium_nightly,
                   s_chromium_thrice_daily,
                   s_webkit_rel_webkit_org,
                   s_webkit_reliability,
                   s_chromium_linux_valgrind_x64_builder,
                   s_chromium_linux_valgrind_x64_dependent,
                   s_chromium_linux_reliability_builder,
                   s_chromium_linux_reliability,
                   s_chrome_frame_reliability,
                   s_chromium_wine_valgrind_builder,
                   s_chromium_wine_valgrind_dependent,
                   s_chromium_rel_builder,
                   s_chromium_rel_dependent,
                   s_webkit_org_rel_builder,
                   s_webkit_rel_org_builder_dependent,
                   s_webkit_org_rel_builder_webkit,
                   s_webkit_rel_org_builder_dependent_webkit,
                   s_gyp]

####### BUILDERS

# buildbot/process/factory.py provides several BuildFactory classes you can
# start with, which implement build processes for common targets (GNU
# autoconf projects, CPAN perl modules, etc). The factory.BuildFactory is the
# base class, and is configured with a series of BuildSteps. When the build
# is run, the appropriate buildslave is told to execute each Step in turn.

# the first BuildStep is typically responsible for obtaining a copy of the
# sources. There are source-obtaining Steps in buildbot/process/step.py for
# CVS, SVN, and others.

builders = []

# ----------------------------------------------------------------------------
# FACTORIES

F = chromium_factory.ChromiumFactory
def win(): return F('src/chrome', 'win32')
def win_build(): return F('src/build', 'win32')
def win_webkit(): return F('src/webkit', 'win32')
def mac(): return F('src/build', 'darwin')
def linux(): return F('src/build', 'linux2')
def chromeos(): return F('src/build', 'linux2')
def wine(): return F('src/chrome', 'linux2')

m_win_cef = chromium_factory.ChromiumFactory('src/cef', 'win32')
m_gyp_win = gyp_factory.GYPFactory('trunk', target_platform='win32')
m_gyp_mac = gyp_factory.GYPFactory('trunk', target_platform='darwin')
m_gyp_linux = gyp_factory.GYPFactory('trunk', target_platform='linux2')

def _GetArchiveUrl(machine_name, builder_name, zip_os_name):
  return ('http://%s.jail.google.com/b/slave/%s/chrome_staging/'
          'full-build-%s.zip' % (machine_name, builder_name, zip_os_name))

chromium_rel_archive = _GetArchiveUrl('codf33', 'chromium-rel-builder', 'win32')
webkit_rel_archive = _GetArchiveUrl('codf33', 'webkit-rel-builder', 'win32')
chromium_linux_valgrind_x64_archive = _GetArchiveUrl('codg145',
    'chromium-rel-linux-valgrind-x64-builder', 'linux')
chromium_dbg_wine_valgrind_archive = _GetArchiveUrl('codg151',
    'chromium-dbg-wine-valgrind', 'win32')

# The identifier of the factory is the build configuration. If two factories
# are using the same build configuration, they should have the same identifier.
f_chromium_rel_builder = win_build().ChromiumFactory(
    'chromium-rel',
    slave_type='Builder',
    project='all.sln;chromium_builder',
    factory_properties={'gclient_env': {'GYP_DEFINES' : 'fastbuild=1'}})

f_chromium_dbg_shared = win_build().ChromiumFactory(
    'chromium-dbg-shared',
    project='all.sln',
    compile_timeout=2400,
    factory_properties={'gclient_env':
                            {'GYP_DEFINES' : 'component=shared_library'}})


# This builder is run on Linux, thus we use linux() here, although it is to
# fetch reliability test results for Windows build.
f_webkit_reliability = linux().ReliabilityTestsFactory(
    'webkit-reliability', 'win_webkit_canary')

f_webkit_rel_builder = win_build().ChromiumWebkitLatestFactory(
    'webkit-rel',
    slave_type='Builder',
    project='all.sln;chromium_builder',
    factory_properties={'gclient_env': {'GYP_DEFINES' : 'fastbuild=1'}})

f_webkit_rel_reliability_builder = win_build().ChromiumWebkitLatestFactory(
    'webkit-rel-reliability',
    clobber=True,
    tests=['automated_ui', 'reliability'],
    slave_type='Builder',
    project='all.sln',
    factory_properties={'archive_build': True,
                        'use_build_number': True})

f_chromium_rel_tests = win_build().ChromiumFactory(
    'chromium-rel',
    slave_type='Tester',
    build_url=chromium_rel_archive,
    tests=['ui-single'],
    factory_properties={'start_crash_handler': True})

f_chromium_rel_xp_sync = win_build().ChromiumFactory(
    'chromium-rel',
    slave_type='Tester',
    build_url=chromium_rel_archive,
    tests=['sync_integration'],
    factory_properties={'start_crash_handler': True})

f_chromium_rel_mac_sync = mac().ChromiumFactory(
    'chromium-rel-mac-sync',
    tests=['sync_integration'],
    options=['--', '-target', 'chromium_builder_rel'])

f_chromium_rel_vista = win_build().ChromiumFactory(
    'chromium-rel',
    slave_type='Tester',
    build_url=chromium_rel_archive,
    tests=['unit', 'ui', 'page_cycler', 'startup', 'memory', 'printing',
           'remoting', 'browser_tests', 'installer'],
    factory_properties={'start_crash_handler': True})

f_chromium_rel_win7 = win_build().ChromiumFactory(
    'chromium-rel',
    slave_type='Tester',
    build_url=chromium_rel_archive,
    tests=['unit', 'ui', 'installer'],
    factory_properties={'start_crash_handler': True})

# We steal the build from the builder on the main waterfall because it
# would be too slow to build on this machine. This should not be a big
# problem though.
f_cr_rel_perf_xp_jank = win_build().ChromiumFactory(
    'chromium-rel',
    slave_type='Tester',
    build_url=chromium_rel_archive,
    tests=['page_cycler', 'startup', 'memory', 'page_cycler_http',
           'sunspider', 'v8_benchmark', 'dom_perf', 'dromaeo'],
    factory_properties={'show_perf_results': True,
                        'expectations': True,
                        'perf_id': 'chromium-rel-xp-single',
                        'process_dumps': True,
                        'start_crash_handler': True,})

# TODO: run 'page_cycler_http' on vista.
# We steal the build from the builder on the main waterfall because it
# would be too slow to build on this machine. This should not be a big
# problem though.
f_cr_rel_perf_vista_jank = win_build().ChromiumFactory(
    'chromium-rel',
    slave_type='Tester',
    build_url=chromium_rel_archive,
    tests=['page_cycler', 'startup', 'memory', 'sunspider',
           'v8_benchmark', 'dom_perf', 'dromaeo'],
    factory_properties={'show_perf_results': True,
                        'expectations': True,
                        'perf_id': 'chromium-rel-vista-single',
                        'process_dumps': True,
                        'start_crash_handler': True,})

f_cr_rel_perf_frame = win_build().ChromiumFactory(
    'chromium-rel',
    slave_type='Tester',
    build_url=chromium_rel_archive,
    tests=['chrome_frame_perftests'],
    factory_properties={'show_perf_results': True,
                        'expectations': True,
                        'perf_id': 'chromium-rel-frame',
                        'process_dumps': True,
                        'start_crash_handler': True,})

f_cr_rel_linux_hardy_lowmem = linux().ChromiumFactory(
    'chromium-rel-linux-hardy',
    tests=['page_cycler', 'startup', 'dom_perf', 'tab_switching', 'memory',
           'sunspider', 'v8_benchmark', 'page_cycler_http'],
    options=['--build-tool=make'],
    factory_properties={
        'gclient_env': {'GYP_GENERATORS':'make'},
        'show_perf_results': True,
        'perf_id': 'chromium-rel-linux-hardy-lowmem'})

# TODO(thestig) stop clobbering this bot once we figure out how to reliably
# rebuild LASTCHANGE / file_version_info_linux.h.
f_chromium_linux_reliability_builder = linux().ChromiumFactory(
    'chromium-linux-reliability',
    clobber=True,
    tests=['automated_ui', 'page_load', 'reliability_linux'],
    options=['--build-tool=make', 'all'],
    factory_properties={
           'archive_build': True,
           'gclient_env': {'GYP_DEFINES':
                              ('linux_breakpad=1 '
                               'linux_dump_symbols=1 '
                               'linux_strip_binary=1 '
                               'linux_strip_reliability_tests=1 '),
                           'GYP_GENERATORS':'make',}})

f_chromium_linux_reliability = linux().ReliabilityTestsFactory(
    'chromium-linux-reliability', 'linux')

f_chrome_frame_reliability = linux().ReliabilityTestsFactory(
    'chrome-frame-reliability', 'win_cf')

valgrind_gyp_defines = chromium_factory.ChromiumFactory.MEMORY_TOOLS_GYP_DEFINES

# Running out of address space on 10.5... try to buy some time.
valgrind_mac_gyp_defines = valgrind_gyp_defines + ' enable_svg=0'

f_webkit_dbg_vista = win_webkit().ChromiumFactory('webkit-dbg-vista',
    tests=['test_shell', 'webkit', 'webkit_unit'],
    factory_properties={'archive_webkit_results': True,
                        'test_results_server': 'test-results.appspot.com'})

f_webkit_dbg_win7 = win_webkit().ChromiumFactory('webkit-dbg-win7',
    tests=['test_shell', 'webkit', 'webkit_unit'],
    factory_properties={'archive_webkit_results': True,
                        'test_results_server': 'test-results.appspot.com'})

f_webkit_rel_linux64 = linux().ChromiumWebkitLatestFactory(
    'webkit-rel-linux64',
    tests=['test_shell', 'webkit', 'webkit_unit'],
    options=['--build-tool=make', 'test_shell', 'test_shell_tests',
             'webkit_unit_tests'],
    factory_properties={'archive_webkit_results': True,
        'test_results_server': 'test-results.appspot.com',
        'gclient_env': {'GYP_GENERATORS' : 'make'}})

f_webkit_rel_webkit_org = win_webkit().ChromiumWebkitLatestFactory(
    'webkit-rel-webkit-org',
    tests=['test_shell', 'webkit', 'webkit_unit'],
    factory_properties={'archive_webkit_results': True,
                        'test_results_server': 'test-results.appspot.com',
                        'gclient_env': {'GYP_DEFINES' : 'fastbuild=1'}})

f_webkit_rel_linux_webkit_org = linux().ChromiumWebkitLatestFactory(
    'webkit-rel-linux-webkit-org',
    tests=['test_shell', 'webkit', 'webkit_unit'],
    options=['--build-tool=make', 'test_shell', 'test_shell_tests',
             'webkit_unit_tests'],
    factory_properties={'archive_webkit_results': True,
                        'test_results_server': 'test-results.appspot.com',
                        'gclient_env': {'GYP_GENERATORS' : 'make'}})

f_webkit_rel_linux_valgrind_webkit_org = linux().ChromiumWebkitLatestFactory(
    'webkit-rel-linux-valgrind-webkit-org',
    tests=['valgrind_test_shell'],
    options=['--build-tool=make', 'test_shell', 'test_shell_tests'],
    factory_properties={
        'needs_valgrind' : True,
        'gclient_env': { 'GYP_DEFINES' : valgrind_gyp_defines,
                         'GYP_GENERATORS' : 'make'}})

f_chromium_rel_linux_tsan_ui = linux().ChromiumFactory(
    'chromium-rel-linux-tsan-ui',
    target='Release',
    tests=['tsan_ui_1_of_10',
           'tsan_ui_2_of_10',
           'tsan_ui_3_of_10',
           'tsan_ui_4_of_10',
           'tsan_ui_5_of_10',
           'tsan_ui_6_of_10',
           'tsan_ui_7_of_10',
           'tsan_ui_8_of_10',
           'tsan_ui_9_of_10',
           'tsan_ui_10_of_10',
           ],
    options=['--build-tool=make', 'ui_tests',],
    factory_properties={
        'needs_valgrind' : True,
        'gclient_env': { 'GYP_DEFINES' : valgrind_gyp_defines,
                         'GYP_GENERATORS':'make',}})

f_chromium_dbg_win_drmemory = win_build().ChromiumFactory(
    'chromium-dbg-win-drmemory',
    target='Debug',
    tests=[
      'drmemory_googleurl',
      'drmemory_printing',
      'drmemory_media',
      'drmemory_app',
      'drmemory_remoting',
      'drmemory_ipc',
      # run tests in shards to decrease the number of reports per shard.
      # TODO(timurrrr): avoid shards when Dr.Memory has less false positives.
      'drmemory_base_1_of_2',
      'drmemory_base_2_of_2',
      'drmemory_net_1_of_5',
      'drmemory_net_2_of_5',
      'drmemory_net_3_of_5',
      'drmemory_net_4_of_5',
      'drmemory_net_5_of_5',
    ],
    project='all.sln;chromium_builder_dbg_tsan_win',
    factory_properties={
        'needs_drmemory' : True,
    }
)

f_cr_dbg_mac_106_tsan = mac().ChromiumFactory(
    'chromium-dbg-mac-106-tsan',
    target='Debug',
    tests=['tsan_base',
           'tsan_googleurl',
           'tsan_net',
           'tsan_ipc',
           'tsan_media',
           'tsan_printing',
           'tsan_remoting'],
    options=['--', '-project', '../build/all.xcodeproj',
             '-target', 'chromium_builder_dbg_tsan_mac'],
    factory_properties={
        'needs_valgrind' : True,
        'gclient_env': {'GYP_DEFINES' : valgrind_mac_gyp_defines}})

f_webkit_rel_mac_webkit_org = mac().ChromiumWebkitLatestFactory(
    'webkit-rel-mac-webkit-org',
    tests=['test_shell', 'webkit', 'webkit_unit'],
    factory_properties={'archive_webkit_results': True,
                        'test_results_server': 'test-results.appspot.com'},
    options=['--', '-project',
             '../webkit/webkit.xcodeproj'])

f_cr_rel_perf_xp_webkit = win_build().ChromiumWebkitLatestFactory(
    'chromium-rel-webkit-1',
    slave_type='Tester',
    build_url=webkit_rel_archive,
    tests=['page_cycler', 'dom_perf', 'selenium', 'sunspider'],
    factory_properties={'perf_id': 'chromium-rel-xp-webkit',
                        'show_perf_results': True,
                        'start_crash_handler': True})

f_cr_rel_tests_xp_webkit = win_build().ChromiumWebkitLatestFactory(
    'chromium-rel-webkit-2',
    slave_type='Tester',
    build_url=webkit_rel_archive,
    tests=['unit', 'ui', 'dom_checker', 'installer'],
    factory_properties={'perf_id': 'chromium-rel-xp-webkit',
                        'show_perf_results': True,
                        'start_crash_handler': True,
                        'generate_gtest_json': True})

f_cr_rel_perf_linux_webkit = linux().ChromiumWebkitLatestFactory(
    'chromium-rel-linux-webkit',
    options=['--build-tool=make'],
    tests=['startup', 'page_cycler', 'ui', 'dromaeo', 'unit', 'browser_tests'],
    factory_properties={'perf_id': 'chromium-rel-linux-webkit',
                        'show_perf_results': True,
                        'gclient_env': {'GYP_GENERATORS' : 'make'},
                        'generate_gtest_json': True})

f_cr_rel_perf_mac5_webkit = mac().ChromiumWebkitLatestFactory(
    'chromium-rel-mac5-webkit',
    options=['--', '-target', 'chromium_builder_rel'],
    tests=['page_cycler', 'page_cycler_http', 'startup', 'tab_switching',
           'memory', 'v8_benchmark', 'sunspider', 'dom_perf', 'dromaeo'],
    factory_properties={'show_perf_results': True,
                        'perf_id': 'chromium-rel-mac5-webkit'})

f_webkit_rel_mac_valgrind_layout = mac().ChromiumFactory(
    'webkit-rel-mac-valgrind-layout',
    tests=['valgrind_layout'],
    factory_properties={
        'needs_valgrind' : True,
        'gclient_env': { 'GYP_DEFINES' : valgrind_gyp_defines}},
    options=['--', '-project',
             '../webkit/webkit.xcodeproj'])

# GYP_DEFINES for running coverage.  Why we do each:
# coverage=1: turn it on!  (e.g. add -ftest-coverage on Linux, enable
#   the 'coverage' target, etc)
# fastbuild=1, enable_svg=0: try and make it smaller so we don't choke on link.
# (Sadly those two don't make us small enough to link with the 10.5 SDK.)
GYP_DEFINES_FOR_COVERAGE_WIN = ('coverage=1 '
                                'enable_svg=0')
# fastbuild=1 prevents PDB generation on Windows and it's necessary for
# code coverage, so we only add it for the other plaforms.
GYP_DEFINES_FOR_COVERAGE_POSIX = '%s fastbuild=1' % GYP_DEFINES_FOR_COVERAGE_WIN

f_coverage_dbg_mac = mac().ChromiumFactory(
    'coverage-dbg-mac', target='Debug',
    clobber=False,
    tests=['check_lkgr', 'run_coverage_bundles', 'process_coverage'],
    options=['--', '-project', '../chrome/chrome.xcodeproj',
             '-sdk', '/Developer/SDKs/MacOSX10.6.sdk',  # Too big for 10.5!
             '-target', 'coverage_build'],
    factory_properties={'lkgr': True,
                        'gclient_env':
                        {'GYP_DEFINES': GYP_DEFINES_FOR_COVERAGE_POSIX},
                        'show_perf_results': True,
                        'perf_id': 'chromium-dbg-mac'})

f_coverage_dbg_linux = linux().ChromiumFactory(
    'coverage-dbg-linux', target='Debug',
    clobber=False,
    tests=['check_lkgr', 'run_coverage_bundles', 'process_coverage'],
    options=['--build-tool=make', '--build-dir=src/chrome',
             '--', 'coverage_build'],
    factory_properties={'lkgr': True,
                        'gclient_env':
                        {'GYP_DEFINES': GYP_DEFINES_FOR_COVERAGE_POSIX,
                         'GYP_GENERATORS':'make'},
                        'show_perf_results': True,
                        'perf_id': 'chromium-dbg-linux'})

f_coverage_dbg_win = win().ChromiumFactory(
    'coverage-dbg-win', target='Debug',
    clobber=False,
    tests=['check_lkgr', 'run_coverage_bundles', 'process_coverage'],
    options=['--', '/project', 'coverage_build'],
    factory_properties={'lkgr': True,
                        'gclient_env':
                        {'GYP_DEFINES': GYP_DEFINES_FOR_COVERAGE_WIN},
                        'show_perf_results': True,
                        'perf_id': 'chromium-dbg-xp'})

f_chromium_rel_xp_memory = win().ChromiumFactory(
    'chromium-rel-xp-memory',
    tests=['memory'],
    options=['--', '/project', 'memory_test'],
    factory_properties={'show_perf_results': True,
                        'perf_id': 'chromium-rel-xp-memory'})

f_chromium_rel_linux_memory = linux().ChromiumFactory(
    'chromium-rel-linux-memory',
    tests=['memory'],
    options=['--build-tool=make', '--', 'memory_test'],
    factory_properties={'show_perf_results': True,
                        'perf_id': 'chromium-rel-linux-memory',
                        'gclient_env':{'GYP_GENERATORS':'make'}})

f_chromium_rel_mac_memory = mac().ChromiumFactory(
    'chromium-rel-mac-memory',
    tests=['memory'],
    options=['--', '-project', '../chrome/chrome.xcodeproj',
             '-target', 'memory_test'],
    factory_properties={'show_perf_results': True,
                        'perf_id': 'chromium-rel-mac-memory'})

f_chromium_linux_gyp_make = linux().ChromiumGYPLatestFactory(
    'chromium-linux-gyp',
    target='Release',
    gyp_format='make')

f_chromium_linux_gyp_scons = linux().ChromiumGYPLatestFactory(
    'chromium-linux-gyp',
    target='Release',
    gyp_format='scons')

f_chromium_mac_gyp = mac().ChromiumGYPLatestFactory('chromium-mac-gyp')

f_chromium_xp_gyp = win().ChromiumGYPLatestFactory('chromium-xp-gyp')

f_ubuntu_packaging_gyp = linux().ChromiumGYPLatestFactory(
    'ubuntu-packaging-gyp', gyp_format='scons')

f_gyp_linux_make = m_gyp_linux.GYPFactory(formats=['make'])

f_gyp_linux_scons = m_gyp_linux.GYPFactory(formats=['scons'])

f_gyp_mac = m_gyp_mac.GYPFactory(formats=['xcode'])

f_gyp_xp = m_gyp_win.GYPFactory(formats=['msvs'])

# Please contact chrome-re before changing this _google_chrome_rel builder
f_google_chrome_rel_xp = win().ChromiumFactory(
    'google-chrome-rel-xp',
    clobber=True,
    compile_timeout=2400,
    mode='google_chrome',
    tests=[],
    factory_properties={
        'gclient_env': {'GYP_DEFINES': 'branding=Chrome'}})

# Please contact chrome-re before changing this _google_chrome_rel builder
f_google_chrome_rel_linux = linux().ChromiumFactory(
    'google-chrome-rel-linux',
    mode='official',
    clobber=True,
    compile_timeout=2400,
    tests=[],
    factory_properties={
        'gclient_env': {'GYP_DEFINES': 'branding=Chrome buildtype=Official '
                        'target_arch=ia32'}})

# Please contact chrome-re before changing this _google_chrome_rel builder
f_google_chrome_rel_linux_64 = linux().ChromiumFactory(
    'google-chrome-rel-linux-64',
    mode='official',
    clobber=True,
    compile_timeout=2400,
    tests=[],
    factory_properties={
        'gclient_env': {'GYP_DEFINES': 'branding=Chrome buildtype=Official '
                        'target_arch=x64'}})

# Please contact chrome-re before changing this _google_chrome_rel builder
f_google_chrome_rel_mac = mac().ChromiumFactory(
    'google-chrome-rel-mac',
    mode='official',
    clobber=True,
    compile_timeout=2400,
    tests=[],
    factory_properties={
        'gclient_env': {'GYP_DEFINES': 'branding=Chrome buildtype=Official'}})

# Please contact chrome-re before changing this _google_chrome_rel builder
f_google_chrome_rel_chromeos = chromeos().ChromiumOSFactory(
    'google-chrome-rel-chromeos',
    mode='official',
    clobber=True,
    options=['chrome', 'chrome_sandbox', 'linux_symbols', 'symupload',
             'candidate_window'],
    compile_timeout=2400,
    tests=[],
    factory_properties={
        'gclient_env': {
            'GYP_DEFINES':
                'branding=Chrome buildtype=Official target_arch=ia32 '
                'linux_sandbox_path=/opt/google/chrome/chrome-sandbox '
                'chromeos=1'}})

f_chromium_rel_xp_cef = m_win_cef.CEFFactory('chromium-rel-cef')

f_chromium_linux_targets = linux().TargetTestsFactory(
    factory_properties={'show_perf_results' : True,
                        'perf_id' : 'chromium-linux-targets'})

f_chromium_mac_targets = mac().TargetTestsFactory(
    factory_properties={'show_perf_results' : True,
                        'perf_id' : 'chromium-mac-targets'})

f_chromium_win_targets = win().TargetTestsFactory(
    factory_properties={'show_perf_results' : True,
                        'perf_id' : 'chromium-win-targets'})

f_chromium_rel_linux_valgrind_x64_builder = linux().ChromiumFactory(
    'chromium-rel-linux-valgrind-x64-builder',
    slave_type='Builder',
    options=['--build-tool=make',
             'app_unittests',
             'base_unittests',
             'googleurl_unittests',
             'ipc_tests',
             'media_unittests',
             'net_unittests',
             'printing_unittests',
             'remoting_unittests',
             'sync_unit_tests',
             'ui_tests',
             'unit_tests',
             ],
    factory_properties={'gclient_env': { 'GYP_DEFINES' : valgrind_gyp_defines,
                                         'GYP_GENERATORS':'make'}})

f_chromium_rel_linux_tsan_x64 = linux().ChromiumFactory(
    'chromium-rel-linux-tsan-x64',
    slave_type='Tester',
    build_url=chromium_linux_valgrind_x64_archive,
    tests=['tsan_googleurl',
           'tsan_printing',
           'tsan_media',
           'tsan_app',
           'tsan_ipc',
           'tsan_remoting',
           'tsan_base',
           'tsan_sync',
           'tsan_net',
           'tsan_unit_1_of_2',
           'tsan_unit_2_of_2',
           # Experimental! Run the same set of tests in RaceVerifier mode
           'tsan_rv_googleurl',
           'tsan_rv_printing',
           'tsan_rv_media',
           'tsan_rv_app',
           'tsan_rv_ipc',
           'tsan_rv_remoting',
           'tsan_rv_base',
           'tsan_rv_sync',
           'tsan_rv_net',
           'tsan_rv_unit_1_of_2',
           'tsan_rv_unit_2_of_2',
           ],
    factory_properties={
        'needs_valgrind' : True,
        'gclient_env': { 'GYP_DEFINES' : valgrind_gyp_defines}})

f_chromium_dbg_wine_valgrind_builder = win().ChromiumFactory(
    'chromium-dbg-wine',
    target='Debug',
    slave_type='Builder')

f_cr_dbg_linux_shared = linux().ChromiumFactory(
    'chromium-dbg-linux-shared',
    clobber=True,
    target='Debug',
    slave_type='Builder',
    options=['--build-tool=make'],
    factory_properties={
        'gclient_env': {'GYP_DEFINES':'library=shared_library',
                        'GYP_GENERATORS':'make'}})

f_chromium_dbg_linux_wine_valgrind = wine().ChromiumWineFactory(
    'chromium-dbg-linux-wine-valgrind',
    build_url=chromium_dbg_wine_valgrind_archive,
    tests=[
        'wine_valgrind_base_unittests',
        'wine_valgrind_net_unittests',
        'wine_valgrind_unit_tests',
    ])

f_cr_dbg_linux_clang = linux().ChromiumFactory(
    'chromium-dbg-linux-clang',
    target='Debug',
    options=['--build-tool=make', '--compiler=clang'],
    tests=['base'],
    factory_properties={
        'gclient_env': {'GYP_DEFINES':'clang=1 linux_use_tcmalloc=0'}})

f_cr_dbg_mac_clang = mac().ChromiumFactory(
    'chromium-dbg-mac-clang',
    target='Debug',
    options=[
        '--compiler=clang',
        ],
    tests=[],  # TODO(thakis): Get all test binaries to pass.
    factory_properties={
        # TODO(thakis): Get NaCl to work. http://crbug.com/56933
        'gclient_env': {'GYP_DEFINES': 'clang=1 disable_nacl=1'}})



# ----------------------------------------------------------------------------
# BUILDER DEFINITIONS

slave_lock = locks.SlaveLock('one_per_slave_lock', maxCount=1)

# ----------------------------------------------------------------------------
# BUILDER DEFINITIONS

# The 'builders' list defines the Builders. Each one is configured with a
# dictionary, using the following keys:
#  name (required): the name used to describe this bilder
#  slavename (required): which slave to use, must appear in c['slaves']
#  builddir (optional): which subdirectory to run the builder in
#  factory (required): a BuildFactory to define how the build is run
#  periodicBuildTime (optional): if set, force a build every N seconds
#  category (optional): it is not used in the normal 'buildbot' meaning. It is
#                       used by gatekeeper to determine which steps it should
#                       look for to close the tree.
#

b_chromium_rel_builder = {'name': 'Chromium Builder',
  'builddir': 'chromium-rel-builder',
  'factory': f_chromium_rel_builder,
  'category': '2windows|builders_compile|builders_windows',
}

b_chromium_dbg_shared = {'name': 'Chromium XP (dbg shared)',
  'builddir': 'chromium-dbg-shared',
  'factory': f_chromium_dbg_shared,
  'category': '2windows|builders_compile|builders_windows',
}

b_chromium_rel_perf_frame = {'name': 'Chrome Frame Perf',
  'builddir': 'chromium-rel-perf-frame',
  'factory': f_cr_rel_perf_frame,
  'category': '2windows|builders_windows',
}

b_webkit_rel_builder = {'name': 'Webkit.org Builder',
  'builddir': 'webkit-rel-builder',
  'factory': f_webkit_rel_builder,
  'category': '2windows|builders_compile|builders_windows',
}

b_webkit_rel_reliability_builder = {
  'name': 'Webkit.org Reliability Builder',
  'builddir': 'webkit-rel-reliability-builder',
  'factory': f_webkit_rel_reliability_builder,
  'category': '2windows|builders_compile|builders_windows',
}

b_webkit_reliability = {'name': 'WebKit Reliability',
  'builddir': 'webkit-reliability-tester',
  'slavename': 'chromium-reliability',
  'factory': f_webkit_reliability,
  'category': '1release full',
}

b_chromium_rel_xp_tests = {
  'name': 'XP Tests',
  'builddir': 'chromium-rel-xp-tests',
  'factory': f_chromium_rel_tests,
}

b_chromium_rel_xp_sync = {
  'name': 'Chromium Windows7 Sync',
  'builddir': 'chromium-rel-xp-sync',
  'factory': f_chromium_rel_xp_sync,
}

b_chromium_rel_mac_sync = {
  'name': 'Chromium Mac Sync',
  'builddir': 'chromium-rel-mac-sync',
  'factory': f_chromium_rel_mac_sync,
}

b_chromium_dbg_mac_clang = {
  'name': 'Chromium Mac Debug Clang',
  'factory': f_cr_dbg_mac_clang,
  'category': 'clang',
}

b_chromium_rel_vista64 = {
  'name': 'Chromium Vista 64',
  'builddir': 'chromium-rel-vista64',
  'factory': f_chromium_rel_vista,
}

b_chromium_rel_win7 = {
  'name': 'Chromium Windows7',
  'builddir': 'chromium-rel-win7',
  'factory': f_chromium_rel_win7,
}

b_chromium_rel_xp_perf_jank = {'name': 'XP Perf (jank)',
  'builddir': 'chromium-rel-xp-perf-single',
  'factory': f_cr_rel_perf_xp_jank,
  'category': '2windows|builder_testers|builders_windows',
}

b_chromium_rel_vista_perf_jank = {'name': 'Vista Perf (jank)',
  'slavename': 'chrome-vista-1',
  'builddir': 'chromium-rel-vista-perf-single',
  'factory': f_cr_rel_perf_vista_jank,
  'category': '2windows|builder_testers|builders_windows',
}

b_chromium_linux_reliability_builder = {
  'name': 'Chromium Linux Reliability Builder',
  'builddir': 'chromium-linux-reliability',
  'factory': f_chromium_linux_reliability_builder,
}

b_chromium_linux_reliability = {
  'name': 'Chromium Linux Reliability',
  'slavename': 'chromium-reliability',
  'builddir': 'chromium-linux-reliability-tester',
  'factory': f_chromium_linux_reliability,
}

b_chrome_frame_reliability = {
  'name': 'Chrome Frame Reliability',
  'slavename': 'chrome-frame-reliability',
  'builddir': 'chrome-frame-reliability-tester',
  'factory': f_chrome_frame_reliability,
}

b_webkit_dbg_vista = {
  'name': 'Webkit Vista (dbg)',
  'builddir': 'webkit-dbg-vista',
  'factory': f_webkit_dbg_vista,
}

b_webkit_dbg_win7 = {
  'name': 'Webkit Windows7 (dbg)',
  'builddir': 'webkit-dbg-win7',
  'factory': f_webkit_dbg_win7,
}

b_webkit_rel_linux64 = {
  'name': 'Webkit Linux 64',
  'builddir': 'webkit-rel-linux64',
  'factory': f_webkit_rel_linux64,
}

b_webkit_rel_webkit_org = {
  'name': 'Webkit (webkit.org)',
  'builddir': 'webkit-rel-webkit-org',
  'factory': f_webkit_rel_webkit_org,
}

b_webkit_rel_linux_webkit_org = {
  'name': 'Webkit Linux (webkit.org)',
  'builddir': 'webkit-rel-linux-webkit-org',
  'factory': f_webkit_rel_linux_webkit_org,
}

b_webkit_rel_linux_valgrind_webkit_org = {
  'name': 'Webkit Linux (valgrind webkit.org)',
  'builddir': 'webkit-rel-linux-valgrind-webkit-org',
  'factory': f_webkit_rel_linux_valgrind_webkit_org,
}

b_chromium_rel_linux_tsan_ui = {
  'name': 'Linux Tests (tsan ui)',
  'builddir': 'chromium-rel-linux-tsan-ui',
  'factory': f_chromium_rel_linux_tsan_ui,
}

b_chromium_dbg_mac_106_tsan = {
  'name': 'Chromium Mac 10.6 (tsan)',
  'builddir': 'chromium-dbg-mac-106-tsan',
  'factory': f_cr_dbg_mac_106_tsan,
  'category': '5memory tests|builders_compile|builder_testers',
}

b_chromium_dbg_win_drmemory = {
  'name': 'Windows Tests (DrMemory)',
  'builddir': 'chromium-dbg-win-drmemory',
  'factory': f_chromium_dbg_win_drmemory,
  'category': '5memory tests|builders_compile|builder_testers',
}

b_webkit_rel_mac_webkit_org = {
  'name': 'Webkit Mac (webkit.org)',
  'builddir': 'webkit-rel-mac-webkit-org',
  'factory': f_webkit_rel_mac_webkit_org,
}

b_chromium_rel_linux_valgrind_x64_builder = {
  'name': 'Chromium Linux Builder (valgrind x64)',
  'builddir': 'chromium-rel-linux-valgrind-x64-builder',
  'factory': f_chromium_rel_linux_valgrind_x64_builder,
  'category': '5memory tests|builders_compile',
}

b_chromium_rel_linux_tsan_x64 = {
  'name': 'Linux Tests (tsan x64)',
  'builddir': 'chromium-rel-linux-tsan-x64',
  'factory': f_chromium_rel_linux_tsan_x64,
  'category': '5memory tests|builder_testers',
}

b_webkit_rel_mac_valgrind_layout = {
  'name': 'Webkit Mac (valgrind layout)',
  'builddir': 'webkit-rel-mac-valgrind-layout',
  'factory': f_webkit_rel_mac_valgrind_layout,
  'category': '5memory tests|builders_compile|builder_testers',
}

b_coverage_dbg_mac = {
  'name': 'Mac Coverage (dbg)',
  'builddir': 'coverage-dbg-mac',
  'factory': f_coverage_dbg_mac,
  'category': '3mac|builders_compile|builder_testers',
  'locks': [slave_lock],
}

b_coverage_dbg_linux = {
  'name': 'Linux Coverage (dbg)',
  'builddir': 'coverage-dbg-linux',
  'factory': f_coverage_dbg_linux,
  'category': '4linux|builders_compile|builder_testers',
  'locks': [slave_lock],
}

b_coverage_dbg_win = {
  'name': 'Win Coverage (dbg)',
  'builddir': 'coverage-dbg-win',
  'factory': f_coverage_dbg_win,
  'category': '2windows|builders_compile|builder_testers',
  'locks': [slave_lock],
}

b_chromium_rel_xp_memory = {
  'name': 'Chromium XP Memory',
  'builddir': 'chromium-rel-xp-memory',
  'factory': f_chromium_rel_xp_memory,
}

b_chromium_rel_linux_memory = {
  'name': 'Chromium Linux Memory',
  'builddir': 'chromium-rel-linux-memory',
  'factory': f_chromium_rel_linux_memory,
}

b_chromium_rel_mac_memory = {
  'name': 'Chromium Mac Memory',
  'builddir': 'chromium-rel-mac-memory',
  'factory': f_chromium_rel_mac_memory,
}

b_chromium_linux_gyp_make = {
  'name': 'Chromium Linux GYP (make)',
  'builddir': 'chromium-linux-gyp-make',
  'factory': f_chromium_linux_gyp_make,
  'locks': [slave_lock],
}

b_chromium_linux_gyp_scons = {
  'name': 'Chromium Linux GYP (scons)',
  'builddir': 'chromium-linux-gyp-scons',
  'factory': f_chromium_linux_gyp_scons,
  'locks': [slave_lock],
}

b_chromium_mac_gyp = {
  'name': 'Chromium Mac GYP',
  'builddir': 'chromium-mac-gyp',
  'factory': f_chromium_mac_gyp,
  'locks': [slave_lock],
}

b_chromium_xp_gyp = {
  'name': 'Chromium XP GYP',
  'builddir': 'chromium-xp-gyp',
  'factory': f_chromium_xp_gyp,
  'locks': [slave_lock],
}

b_ubuntu_packaging_gyp = {
  'name': 'Ubuntu Packaging GYP',
  'builddir': 'ubuntu-packaging-gyp',
  'factory': f_ubuntu_packaging_gyp,
  'locks': [slave_lock],
}

b_gyp_linux_make = {
  'name': 'GYP Linux (make)',
  'builddir': 'gyp-linux-make',
  'factory': f_gyp_linux_make,
  'locks': [slave_lock],
}

b_gyp_linux_scons = {
  'name': 'GYP Linux (scons)',
  'builddir': 'gyp-linux-scons',
  'factory': f_gyp_linux_scons,
  'locks': [slave_lock],
}

b_gyp_mac = {
  'name': 'GYP Mac',
  'builddir': 'gyp-mac',
  'factory': f_gyp_mac,
  'locks': [slave_lock],
}

b_gyp_xp = {
  'name': 'GYP XP',
  'builddir': 'gyp-xp',
  'factory': f_gyp_xp,
  'locks': [slave_lock],
}

b_google_chrome_rel_xp = {
  'name': 'Google Chrome XP',
  'builddir': 'google-chrome-rel-xp',
  'factory': f_google_chrome_rel_xp,
}

b_google_chrome_rel_linux = {
  'name': 'Google Chrome Linux',
  'builddir': 'google-chrome-rel-linux',
  'factory': f_google_chrome_rel_linux,
}

b_google_chrome_rel_linux_64 = {
  'name': 'Google Chrome Linux x64',
  'builddir': 'google-chrome-rel-linux_64',
  'factory': f_google_chrome_rel_linux_64,
}

b_google_chrome_rel_mac = {
  'name': 'Google Chrome Mac',
  'builddir': 'google-chrome-rel-mac',
  'factory': f_google_chrome_rel_mac,
}

b_google_chrome_rel_chromeos = {
  'name': 'Google Chrome ChromeOS',
  'builddir': 'google-chrome-rel-chromeos',
  'factory': f_google_chrome_rel_chromeos,
}

b_chromium_rel_xp_cef = {
  'name': 'Chromium Embedded',
  'builddir': 'chromium-rel-xp-cef',
  'factory': f_chromium_rel_xp_cef,
}

b_chromium_linux_targets = {
  'name': 'Linux Target Builds',
  'builddir': 'chromium-linux-targets',
  'factory': f_chromium_linux_targets,
}

b_chromium_mac_targets = {
  'name': 'Mac Target Builds',
  'builddir': 'chromium-mac-targets',
  'factory': f_chromium_mac_targets,
}

b_chromium_win_targets = {
  'name': 'Win Target Builds',
  'builddir': 'chromium-win-targets',
  'factory': f_chromium_win_targets,
}

b_chromium_rel_linux_hardy = {
  'name': 'Linux Perf (lowmem)',
  'builddir': 'chromium-rel-linux-hardy-lowmem',
  'factory': f_cr_rel_linux_hardy_lowmem,
}

b_chromium_rel_linux_perf_webkit_latest = {
  'name': 'Linux Perf (webkit.org)',
  'builddir': 'chromium-rel-perf-linux-webkit-latest',
  'factory': f_cr_rel_perf_linux_webkit,
}

b_chromium_rel_mac6_perf_webkit_latest = {
  'name': 'Mac10.6 Perf (webkit.org)',
  'builddir': 'chromium-rel-perf-mac6-webkit-latest',
  'factory': f_cr_rel_perf_mac5_webkit,
}

b_chromium_rel_xp_perf_webkit_latest = {
  'name': 'XP Perf (webkit.org)',
  'builddir': 'chromium-rel-perf-xp-webkit-latest',
  'factory': f_cr_rel_perf_xp_webkit,
}

b_chromium_rel_xp_tests_webkit_latest = {
  'name': 'XP Tests (webkit.org)',
  'builddir': 'chromium-rel-perf-xp-webkit-latest-2',
  'factory': f_cr_rel_tests_xp_webkit,
}

b_chromium_dbg_wine_valgrind_builder = {
  'name': 'Chromium XP Wine Valgrind Builder',
  'builddir': 'chromium-dbg-wine-valgrind',
  'factory': f_chromium_dbg_wine_valgrind_builder,
  'category': 'builders_compile',
}

b_chromium_dbg_linux_wine_valgrind = {
  'name': 'Chromium Linux Wine (valgrind)',
  'builddir': 'chromium-dbg-linux-wine-valgrind',
  'factory': f_chromium_dbg_linux_wine_valgrind,
  'category': '5memory tests',
}

b_chromium_dbg_linux_shared = {
  'name': 'Chromium Linux (dbg-shlib)',
  'builddir': 'chromium-dbg-linux-shared',
  'factory': f_cr_dbg_linux_shared,
  'category': '4linux|builders_compile',
}

b_chromium_dbg_linux_clang = {
  'name': 'Chromium Linux Debug Clang',
  'factory': f_cr_dbg_linux_clang,
  'category': 'clang',
}

c['builders'] = [
  b_google_chrome_rel_xp,
  b_google_chrome_rel_linux,
  b_google_chrome_rel_linux_64,
  b_google_chrome_rel_mac,
  b_google_chrome_rel_chromeos,
  b_chromium_rel_builder,
  b_chromium_dbg_shared,
  b_chromium_rel_xp_sync,
  b_chromium_rel_mac_sync,
  b_chromium_rel_perf_frame,
  b_chromium_dbg_linux_shared,
  b_chromium_rel_xp_tests,
  b_chromium_rel_vista64,
  b_chromium_rel_win7,
  b_chromium_rel_xp_perf_jank,
  b_chromium_rel_vista_perf_jank,
  b_chromium_linux_reliability_builder,
  b_chromium_linux_reliability,
  b_chrome_frame_reliability,
  b_chromium_rel_linux_hardy,
  b_webkit_dbg_vista,
  b_webkit_dbg_win7,
  b_webkit_rel_linux64,
  b_chromium_rel_linux_valgrind_x64_builder,
  b_chromium_rel_linux_tsan_x64,
  b_chromium_dbg_mac_106_tsan,
  b_webkit_rel_webkit_org,
  b_webkit_rel_linux_webkit_org,
  b_webkit_rel_mac_webkit_org,
  b_webkit_rel_builder,
  b_webkit_rel_reliability_builder,
  b_webkit_reliability,
  b_chromium_rel_xp_perf_webkit_latest,
  b_chromium_rel_xp_tests_webkit_latest,
  b_chromium_rel_linux_perf_webkit_latest,
  b_chromium_rel_mac6_perf_webkit_latest,
  b_webkit_rel_linux_valgrind_webkit_org,
  b_chromium_rel_linux_tsan_ui,
  b_chromium_dbg_win_drmemory,
  b_webkit_rel_mac_valgrind_layout,
  b_coverage_dbg_mac,
  b_coverage_dbg_linux,
  b_coverage_dbg_win,
  b_chromium_rel_xp_memory,
  b_chromium_rel_linux_memory,
  b_chromium_rel_mac_memory,
  b_chromium_linux_gyp_make,
  b_chromium_linux_gyp_scons,
  b_chromium_mac_gyp,
  b_chromium_xp_gyp,
  b_ubuntu_packaging_gyp,
  b_gyp_linux_make,
  b_gyp_linux_scons,
  b_gyp_mac,
  b_gyp_xp,
  b_chromium_rel_xp_cef,
  b_chromium_linux_targets,
  b_chromium_mac_targets,
  b_chromium_win_targets,
  b_chromium_dbg_wine_valgrind_builder,
  b_chromium_dbg_linux_wine_valgrind,
  b_chromium_dbg_linux_clang,
  b_chromium_dbg_mac_clang,
]

# Associate the slaves to the manual builders. The configuration is in
# slaves.cfg.
slaves = slaves_list.SlavesList('slaves.cfg', 'ChromiumFYI')
for builder in c['builders']:
  builder['slavenames'] = slaves.GetSlavesName(builder=builder['name'])


####### BUILDSLAVES

# The 'slaves' list defines the set of allowable buildslaves. List all the
# slaves registered to a builder. Remove dupes.
c['slaves'] = master_utils.AutoSetupSlaves(c['builders'],
                                           config.Master.GetBotPassword())

# Make sure everything works together.
master_utils.VerifySetup(c, slaves)


####### STATUS TARGETS

# Adds common status and tools to this master.
master_utils.AutoSetupMaster(c, ActiveMaster,
                             public_html="../master.chromium/public_html")

# Add more.

if STATUS_PUSH:
  from master.status_push import HttpStatusPush
  c['status'].append(HttpStatusPush(
      'http://craebuild.appspot.com/status-listener'))

if CLANG_NOTIFIER:
  c['status'].append(MailNotifier(
      fromaddr='clang@chromium.org',
      mode='failing',
      categories=['clang'],
      relayhost=config.Master.smtp,
      subject='clang buildbot %(result)s in %(projectName)s on %(builder)s',
      extraRecipients=['clang@chromium.org'],
      sendToInterestedUsers=False))


####### PROJECT IDENTITY

# Buildbot master url:
c['buildbotURL'] = 'http://build.chromium.org/buildbot/waterfall.fyi/'
